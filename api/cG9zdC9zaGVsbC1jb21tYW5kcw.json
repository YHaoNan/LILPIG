{"title":"cat和find","date":"2019-09-13T04:58:27.000Z","slug":"shell-commands","tags":["shell"],"categories":["Shell"],"updated":"2019-09-13T06:07:33.230Z","content":"<p>平时开发用Ubuntu，SHELL应该是接触的最多的东西，但是一直也没系统的学习SHELL，就是靠着平时遇到需求就百度的积累。但是这样不太行，很多东西还是不会用，而且在SHELL中总会有更简单快速的解决办法，所以最近在读《Linux Shell脚本攻略》一书，顺便记个笔记。</p>\n<h2 id=\"cat\">cat<a href=\"post/shell-commands#cat\"></a></h2><p>cat用于拼接文件或基本输入，应该说是非常常用的命令了。</p>\n<p>对于cat，以前我只会<code>cat xxx</code>来查看文件内容，其实cat的功能还是不少的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat file1 file2 file3</span><br></pre></td></tr></table></figure>\n<p>如上命令可以把三个文件的内容拼接，默认cat会发送到stdout，所以会显示到终端中，可以用重定向符号重定向到另一个文件。比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat emp1 emp2 emp3 &gt; allemp</span><br></pre></td></tr></table></figure></p>\n<p>当然也可以简化成这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat emp* &gt; allemp</span><br></pre></td></tr></table></figure></p>\n<p>cat还可以从标准输入中读取：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls | cat -n</span><br></pre></td></tr></table></figure></p>\n<p>如上命令使用管道符，将ls的输出作为下一条命令的stdin，cat可以读取这个stdin，使用<code>-n</code>为每个项目加上行号。</p>\n<p>如果想将stdin和其他文件的数据拼接在一起，可以用<code>-</code>代表stdin的数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls | cat - file1.txt</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>-s</code>可以去除多余的空白行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//tmp.txt</span><br><span class=\"line\">line1</span><br><span class=\"line\"></span><br><span class=\"line\">line2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">line3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">line4</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat tmp.txt</span><br></pre></td></tr></table></figure>\n<p>执行如上命令可以将多行空行压缩成一行。（注意，不是删除所有空行）</p>\n<blockquote>\n<p>注意，cat命令的目的是拼接，所以绝不会修改你的文件，cat规定如果输入和输出是一个文件的话，则会报错，如果使用管道符号重定向输出会清空文件。</p>\n</blockquote>\n<h2 id=\"find\">find<a href=\"post/shell-commands#find\"></a></h2><p>find命令也是很常用的，但是其实它有很多功能我们都没发挥出来。</p>\n<h3 id=\"查找\">查找<a href=\"post/shell-commands#查找\"></a></h3><p>find可以使用<code>-a</code>和<code>-o</code>进行逻辑与和或操作（或者用<code>-and</code>和<code>-or</code>），比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . \\( -name <span class=\"string\">'*.txt'</span> -o -name <span class=\"string\">'*.md'</span>\\)</span><br></pre></td></tr></table></figure></p>\n<p>如上命令查找当前目录下所有的<code>txt</code>和<code>md</code>文件。<br><code>-path</code>可以指定匹配的路径，因为find命令是递归查找的，会查找子文件夹，所以可以通过<code>-path</code>指定一个路径，在指定的路径下的文件才会被匹配。比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -path <span class=\"string\">'*/node_modules/'</span> -name -<span class=\"built_in\">type</span> d axios</span><br></pre></td></tr></table></figure></p>\n<p>该命令查看所有<code>node_modules</code>下的<code>axios</code>文件夹，运行之后会从根目录开始查找所有nodejs项目中引用的axios库。</p>\n<p><code>-regex</code>可以使用正则表达式，这样的话就可以避免麻烦的<code>-a</code>、<code>-o</code>等选项。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -regex <span class=\"string\">'.*\\.(py\\|sh\\)$'</span></span><br></pre></td></tr></table></figure></p>\n<p>如上命令查找当前目录下所有<code>py</code>和<code>sh</code>文件。</p>\n<p><code>-iregex</code>忽略大小写。</p>\n<p><code>!</code>选项可以启动排除模式，会显示所有不符合规则的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . ! -name <span class=\"string\">'*.txt'</span></span><br></pre></td></tr></table></figure>\n<p>如上命令查找当前目录下所有非<code>txt</code>文件</p>\n<p>Linux系统提供链接，可以用<code>ln</code>命令创建，这和windows的快捷方式很像。find命令默认不会跟随链接，<code>-L</code>可以启动跟随链接。</p>\n<p>可以通过<code>-maxdepth</code>和<code>-mindepth</code>选项可以限制find遍历目录的深度，以免因为指向自身的链接造成死循环。</p>\n<h3 id=\"类型\">类型<a href=\"post/shell-commands#类型\"></a></h3><p><code>-type</code>可以指定查找的类型，它接受如下类型：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">标识符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">普通文件</td>\n<td style=\"text-align:center\">f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">符号链接</td>\n<td style=\"text-align:center\">l</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目录</td>\n<td style=\"text-align:center\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符设备</td>\n<td style=\"text-align:center\">c</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">块设备</td>\n<td style=\"text-align:center\">b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">套接字</td>\n<td style=\"text-align:center\">s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FIFO</td>\n<td style=\"text-align:center\">p</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"根据时间\">根据时间<a href=\"post/shell-commands#根据时间\"></a></h3><p>find还可以根据文件的时间戳进行搜索。</p>\n<p><code>-atime</code>可以指定用户最近一次访问文件的时间，<code>-mtime</code>指定用户最近一次修改的时间，<code>-ctime</code>可以指定文件元数据（权限等）最后一次改变的时间。</p>\n<p>这三个参数以天为基准，并用<code>-</code>和<code>+</code>分别表示小于和大于，比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -atime -7 -name <span class=\"string\">'*.md'</span></span><br></pre></td></tr></table></figure></p>\n<p>以上命令查看最近七天内被访问过的md文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -atime 7 -name <span class=\"string\">'*.md'</span></span><br></pre></td></tr></table></figure></p>\n<p>以上命令查看恰好七天前被访问过的md文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -atime +7 -name <span class=\"string\">'*.md'</span></span><br></pre></td></tr></table></figure></p>\n<p>以上命令查看最近访问时间超过七天的md文件。</p>\n<p>还有更精确的以分钟为单位计时的选项：<code>-amin</code>、<code>-mmin</code>、<code>-cmin</code>。</p>\n<p><code>-newer</code>可以找出比某个文件修改时间更近的所有文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -newer file.txt</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"根据文件大小\">根据文件大小<a href=\"post/shell-commands#根据文件大小\"></a></h3><p>find命令还可以基于文件大小进行搜索<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -size +2k</span><br></pre></td></tr></table></figure></p>\n<p>上面命令查找当前目录下所有大于2k的文件，还可以用<code>-</code>和什么都不用。</p>\n<p>还支持如下文件单位：</p>\n<ul>\n<li><code>b</code> 块（512字节）</li>\n<li><code>c</code> 字节</li>\n<li><code>w</code> 字（2字节）</li>\n<li><code>k</code> KB</li>\n<li><code>M</code> MB</li>\n<li><code>G</code> GB</li>\n</ul>\n<h3 id=\"根据文件权限\">根据文件权限<a href=\"post/shell-commands#根据文件权限\"></a></h3><p><code>-perm</code>可以根据权限来匹配文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -perm 644</span><br></pre></td></tr></table></figure>\n<p>匹配所有权限为664的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -user lilpig</span><br></pre></td></tr></table></figure>\n<p>匹配所有所有权为lilpig的文件。</p>\n<h3 id=\"执行操作\">执行操作<a href=\"post/shell-commands#执行操作\"></a></h3><p>find命令还可以对匹配的文件执行一些操作，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.swp\"</span> -delete</span><br></pre></td></tr></table></figure></p>\n<p>删除所有扩展名为<code>swp</code>的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">'*.sh'</span> -<span class=\"built_in\">exec</span> chmod u+x &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于当前文件夹下的所有sh文件添加执行权限。</p>\n<h3 id=\"跳过指定目录\">跳过指定目录<a href=\"post/shell-commands#跳过指定目录\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find project -name <span class=\"string\">'.git'</span> -prune -<span class=\"built_in\">type</span> f</span><br></pre></td></tr></table></figure>\n<p>使用<code>-prune</code>可以指定跳过的目录，上面命令跳过<code>.git</code>目录。</p>\n","next":{"title":"VIM常用技巧","slug":"vim-skill"},"link":"http://lilpig.site/post/shell-commands/","toc":[{"title":"cat","id":"cat","index":"1"},{"title":"find","id":"find","index":"2","children":[{"title":"查找","id":"查找","index":"2.1"},{"title":"类型","id":"类型","index":"2.2"},{"title":"根据时间","id":"根据时间","index":"2.3"},{"title":"根据文件大小","id":"根据文件大小","index":"2.4"},{"title":"根据文件权限","id":"根据文件权限","index":"2.5"},{"title":"执行操作","id":"执行操作","index":"2.6"},{"title":"跳过指定目录","id":"跳过指定目录","index":"2.7"}]}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/shell-commands/\" title=\"cat和find\">http://lilpig.site/post/shell-commands/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}