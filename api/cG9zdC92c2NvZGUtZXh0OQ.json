{"title":"VSCode 扩展开发(九) Editor操作","date":"2019-06-18T23:35:54.000Z","slug":"vscode-ext9","tags":["editor","vscode"],"categories":["VSCode"],"updated":"2019-06-19T00:08:11.971Z","content":"<h2 id=\"学习目标\">学习目标<a href=\"post/vscode-ext9#学习目标\"></a></h2><p>使用VSCode API操作编辑器，了解常用的API。</p>\n<p>其他API请去官方文档。</p>\n<h2 id=\"获取Editor\">获取Editor<a href=\"post/vscode-ext9#获取Editor\"></a></h2><p>VSCode中的编辑器是一个TextEditor对象，主要通过以下方法获取：</p>\n<ol>\n<li>vscode.commands.registerTextEditorCommand</li>\n<li>vscode.window.activeTextEditor</li>\n</ol>\n<p>第一个方法适合与命令搭配使用的情景，我们之前用到过，用这个方法注册命令我们需要传入一个回调函数，这个函数有一个TextEditor对象的参数，VSCode会帮你把当前的TextEditor传入，我们在里面就可以直接使用它了。</p>\n<p>第二个方法没什么可说的，就是获取当前的TextEditor。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.commands.registerTextEditorCommand(<span class=\"string\">'lilpig.command1'</span>,<span class=\"function\">(<span class=\"params\">editor</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(editor == vscode.window.activeTextEditor)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>运行上面代码，控制台会输出true。</p>\n<p>也就是说，通过这两个方法获得的Editor都是当前编辑器，只是使用场景不同而已。</p>\n<h2 id=\"Position和Range\">Position和Range<a href=\"post/vscode-ext9#Position和Range\"></a></h2><p>在之前一篇文章中简要提过。</p>\n<p>可以把编辑器中的一段文本想象成二维的面，有行有列，通过第几行第几列我们可以精准的定位到一个字符。</p>\n<p><code>vscode.Position</code>是位置对象，它是一个点，它可以定位到一个准确的字符。它有如下属性：</p>\n<ul>\n<li>line<br>  所在行</li>\n<li>character<br>  所在列，也就是字符在该行的位置</li>\n</ul>\n<p>这两个属性从0开始。</p>\n<p>而<code>vscode.Range</code>对象可以表示一个二维的范围，就是在编辑器的文本中取出一段。它由两个Position对象构成，一个是开始位置，一个是结束位置。</p>\n<p>它有如下属性和方法：</p>\n<ul>\n<li><code>constructor(start: Position, end: Position)</code></li>\n<li><code>constructor(startLine: number, startCharacter: number, endLine: number, endCharacter: number)</code></li>\n<li><code>start</code><br>  开始位置</li>\n<li><code>end</code><br>  结束位置</li>\n<li><code>contains(positionOrRange: Position | Range): boolean</code><br>  范围中是否包含range或position</li>\n</ul>\n<p>Range还有很多集合操作，如交集并集等，不一一介绍。</p>\n<h2 id=\"编辑器API\">编辑器API<a href=\"post/vscode-ext9#编辑器API\"></a></h2><p>属性</p>\n<ul>\n<li><h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h3><blockquote>\n<p>文档对象，用它来访问当前编辑器中的所有文本，在provider里也很常见，通常作为provider的第一个参数</p>\n</blockquote>\n<ul>\n<li><code>document.getText(range?: vscode.Range)</code><br>  根据Range对象获取指定范围文本，如果是undefined，则获取全部</li>\n<li><code>document.getWordRangeAtPosition(position: vscode.Position,regex?: RegExp)</code><br>  根据Position对象获取范围单词范围，后面可以跟单词规则的正则，该方法常用来获取当前的一个单词。</li>\n<li>lineAt<br>  定位到行</li>\n</ul>\n</li>\n<li><h3 id=\"selection-amp-selections\"><a href=\"#selection-amp-selections\" class=\"headerlink\" title=\"selection &amp; selections\"></a>selection &amp; selections</h3><blockquote>\n<p>前面我们用过这个东西，就是选中的段落，是Range的子类，没什么好说的</p>\n</blockquote>\n<p>  需要注意的是，无论是否选中，都存在一个selection，只不过未选中时它是空的（isEmpty()==true）。</p>\n</li>\n</ul>\n<p>方法</p>\n<ul>\n<li><p><code>insertSnippets(snippet: SnippetString, location?: Position | Range | Position[] | Range[], options?: { undoStopBefore: boolean; undoStopAfter: boolean; }): Thenable&lt;boolean&gt;</code></p>\n<blockquote>\n<p>向编辑器中插入Snippets，第二个参数不指定则在当前位置插入</p>\n</blockquote>\n</li>\n<li><p><code>edit(callback: (editBuilder: TextEditorEdit) =&gt; void, options?: { undoStopBefore: boolean; undoStopAfter: boolean; }): Thenable&lt;boolean&gt;</code></p>\n<blockquote>\n<p>操作编辑器，传入一个带有<code>TextEditorEdit</code>的回调</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"TextEditorEdit\">TextEditorEdit<a href=\"post/vscode-ext9#TextEditorEdit\"></a></h2><p>前面我们见过一个类似的，就是在做自动完成功能时，有一个<code>additionalTextEdits</code>，这是一个<code>TextEdit</code>对象，他们都差不多，只不过<code>TextEditorEdit</code>是针对<code>TextEditor</code>的。</p>\n<p>这个对象主要用于对编辑器做一些常规操作，插入，替换，删除等，有如下方法：</p>\n<ul>\n<li><code>replace(location: Position | Range | Selection, value: string): void</code>  <blockquote>\n<p>将给定范围内的文本替换成value</p>\n</blockquote>\n</li>\n<li><code>insert(location: Position, value: string): void;</code>   <blockquote>\n<p>将value插入到指定位置</p>\n</blockquote>\n</li>\n<li><code>delete(location: Range | Selection): void;</code>   <blockquote>\n<p>删除指定范围</p>\n</blockquote>\n</li>\n<li><code>setEndOfLine(endOfLine: EndOfLine): void;</code>  <blockquote>\n<p>设置换行符 有LF和CRLF两种，不常用</p>\n</blockquote>\n</li>\n</ul>\n","prev":{"title":"VSCode 扩展开发(十) TreeView","slug":"vscode-ext10"},"next":{"title":"VSCode 扩展开发(八) 实战-Markdown图片上传","slug":"vscode-ext8"},"link":"http://lilpig.site/post/vscode-ext9/","toc":[{"title":"学习目标","id":"学习目标","index":"1"},{"title":"获取Editor","id":"获取Editor","index":"2"},{"title":"Position和Range","id":"Position和Range","index":"3"},{"title":"编辑器API","id":"编辑器API","index":"4","children":[{"title":"","id":"document","index":"4.1"},{"title":"","id":"selection-amp-selections","index":"4.2"}]},{"title":"TextEditorEdit","id":"TextEditorEdit","index":"5"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/vscode-ext9/\" title=\"VSCode 扩展开发(九) Editor操作\">http://lilpig.site/post/vscode-ext9/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}