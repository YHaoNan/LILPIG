{"title":"TypeScript的一些特性","date":"2019-06-07T22:41:21.000Z","slug":"other-typescript-ft","tags":["typescript"],"categories":["Others"],"updated":"2019-06-08T02:12:38.802Z","content":"<p>最近学习VSCode扩展开发，奈何TypeScript技术不够硬，又去总结了一些不熟悉的TypeScript的特性记录下来。</p>\n<h2 id=\"类型断言\">类型断言<a href=\"post/other-typescript-ft#类型断言\"></a></h2><p>假如你开了严格检查，对于这样的代码，编译器是不会通过的。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPerson</span>(<span class=\"params\"></span>): <span class=\"title\">Person</span> | <span class=\"title\">undefined</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(<span class=\"string\">'王钢弹'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = getPerson();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name);</span><br></pre></td></tr></table></figure></p>\n<p>因为<code>getPerson</code>方法的返回值被声明是<code>Person</code>或<code>undefined</code>，尽管方法中它永远不可能返回undefined，但是编译器就是认为p的值可能是undefined，所以需要进行类型检查：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = getPerson();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (p)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p.name);</span><br></pre></td></tr></table></figure></p>\n<p>但是这显然有些臃肿，我们可以通过类型推断来告诉编译器，虽然方法定义中它可能返回undefined，但是我已经清楚了我所得到的返回值不可能是undefined。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = getPerson();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((p <span class=\"keyword\">as</span> Person).name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((&lt;Person&gt;p).name);</span><br></pre></td></tr></table></figure>\n<h2 id=\"let\">let<a href=\"post/other-typescript-ft#let\"></a></h2><p>在以往的JavaScript中，我们都用<code>var</code>来定义变量，<code>let</code>在JavaScript中还是一个比较新的概念。但是TypeScript中推荐使用<code>let</code>代替<code>var</code>。</p>\n<p>确实<code>var</code>的设计真的像坨屎一样，或者说整个JavaScript都是那样。学JavaScript后我感觉这是一门设计的乱糟糟的语言。</p>\n<p><code>var</code>的作用域很奇怪，你可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，但是不包含块作用域，比如：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>): <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码中的<code>test</code>方法竟然真的能返回str，而不是undefined。所以这样的代码就会出现问题：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们预期的结果是输出0~9，但是真正的执行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<p>因为<code>var</code>不认块定义域所以这个<code>i</code>实际上是定义在全局定义域的，然后因为setTimeOut有一定的延迟时间，这个时间之后for已经执行完毕，所以每次引用i都是全局中的i，经过for循环后全局中的i一直是10。</p>\n<p>为了避免发生不可预期的错误和避免污染命名空间，应该使用<code>let</code>替代<code>var</code>，<code>let</code>认识块作用域的。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这次会输出预期的结果，并且<code>let</code>定义的变量不能重定义，并且<code>let</code>可以做到屏蔽：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第一个循环用<code>i</code>作为循环变量，第二个也是，这在其它编程语言里不被允许，因为对于内层循环来说，定义域里已经存在一个<code>i</code>了，但是<code>let</code>关键字允许这样做，可以用内层的<code>i</code>屏蔽掉外层的<code>i</code>，但是现实中没人会写出如此语义不清晰的代码吧。</p>\n<p>注意，<code>const</code>和<code>let</code>的作用域是相同的，但是<code>const</code>是常量。</p>\n<h2 id=\"展开操作\">展开操作<a href=\"post/other-typescript-ft#展开操作\"></a></h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> first = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> bothPlus = [<span class=\"number\">0</span>, ...first, ...second, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">//bothPlus = [0,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<p>如果使用展开操作对对象进行克隆操作，只能克隆其中的属性，并不能克隆方法。</p>\n<h2 id=\"接口\">接口<a href=\"post/other-typescript-ft#接口\"></a></h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPersonInfo</span>(<span class=\"params\">person:Person</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printPersonInfo(&#123;name: <span class=\"string\">'Peppa Pig'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// printPersonInfo(&#123;name: 'Peppa Pig',age: 16&#125;) Wrong</span></span><br></pre></td></tr></table></figure>\n<p>TypeScript中的接口作为参数时并不一定像其他OOP语言一样，必须传入一个接口的实现类，而是只要传入的对象满足接口的规则就行。</p>\n<p>对于非必须的参数，可以这样写：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPersonInfo</span>(<span class=\"params\">person:Person</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printPersonInfo(&#123;name: <span class=\"string\">'Peppa Pig'</span>&#125;);</span><br><span class=\"line\">printPersonInfo(&#123;name: <span class=\"string\">'Peppa Pig'</span>,age: <span class=\"number\">16</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>readonly</code>可以指定对象只读。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    readonly idCard?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果传递的对象中有接口中未定义的属性时会抛出异常，可以使用类型断言去避开异常：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printPersonInfo(&#123;name: <span class=\"string\">'Peppa Pig'</span>,job: <span class=\"string\">'Front-end Programmer'</span>&#125;); <span class=\"comment\">//Wrong</span></span><br><span class=\"line\">printPersonInfo(&#123;name: <span class=\"string\">'Peppa Pig'</span>,job: <span class=\"string\">'Front-end Programmer'</span>&#125; <span class=\"keyword\">as</span> Person); <span class=\"comment\">//Correct</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以在定义接口时添加索引签名。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person&#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    readonly idCard?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后它可以接受任何属性，不过我觉得，如果条件允许的情况下，尽量不要这样写。</p>\n","prev":{"title":"VSCode 扩展开发(六) 用户设置","slug":"vscode-ext6"},"next":{"title":"VSCode 扩展开发(五) 悬停提示、跳转定义","slug":"vscode-ext5"},"link":"http://lilpig.site/post/other-typescript-ft/","toc":[{"title":"类型断言","id":"类型断言","index":"1"},{"title":"let","id":"let","index":"2"},{"title":"展开操作","id":"展开操作","index":"3"},{"title":"接口","id":"接口","index":"4"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/other-typescript-ft/\" title=\"TypeScript的一些特性\">http://lilpig.site/post/other-typescript-ft/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}