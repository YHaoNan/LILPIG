{"title":"VSCode 扩展开发(五) 悬停、跳转定义","date":"2019-06-07T01:33:54.000Z","slug":"vscode-ext5","tags":["editor","vscode"],"categories":["VSCode"],"updated":"2019-06-07T10:14:27.684Z","content":"<h2 id=\"学习目标\">学习目标<a href=\"post/vscode-ext5#学习目标\"></a></h2><p>经过本章，您将会学到VSCode提供的一些其他Provider的用法，比如悬停提示、跳转定义等。</p>\n<h2 id=\"开篇寒暄\">开篇寒暄<a href=\"post/vscode-ext5#开篇寒暄\"></a></h2><p>上一章我们学了用于自动完成的<code>CompletionItemProvider</code>，使用VSCode提供的ProviderAPI，我们可以方便的扩展VSCode的功能，VSCode还提供了一些其他的Provider，这一章里面我们研究其中常用的几个。</p>\n<h2 id=\"悬停提示\">悬停提示<a href=\"post/vscode-ext5#悬停提示\"></a></h2><p>VSCode中的悬停提示由<code>HoverProvider</code>提供，我们可以在<code>extension.ts</code>中调用<code>vscode.languages.registerHoverProvider</code>来注册一个Provider。</p>\n<p>这是一个HoverProvider的实现类：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckHoverProvider <span class=\"keyword\">implements</span> vscode.HoverProvider&#123;</span><br><span class=\"line\">    provideHover(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;vscode.Hover&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something...     </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个和<code>CompletionItemProvider</code>也差不多，只不过是当鼠标放置在源代码上时<code>provideHover</code>会被触发，我们通常在这个方法里通过<code>document</code>和<code>position</code>取到当前鼠标位置的那个单词，然后做一些提示操作。</p>\n<p>我们复制了上一章的项目，基于上一章修改，地址在<a href=\"https://github.com/YHaoNan/vscode-tutorial/tree/master/vsc-extensions-tutorial-5\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>编写bf代码时，我们经常碰到一堆加号或减号，为了确定它们到底是多少个，我们经常要一个一个数，而且很容易出问题。所以我们决定扩展插件的功能，只要鼠标悬浮在一连串的加或减之间时，就弹出悬浮提示，告诉用户有多少个运算符，效果如下：</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/06/07/VwY8gK.gif\" alt=\"效果\" data-zoomable></p></div>\n<p>那么如何制作捏？我们需要先找出悬浮位置的一段连续的加或减，我们可以按照昨天编写代码提示时的方法自己编写一个寻找函数，但是这次我们使用VSCode给我们提供好的方法，那就是<code>document.getWordRangeAtPosition</code>，这个方法传入一个position和一个正则表达式，从position处寻找符合正则表达式的字符串，并返回范围对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; disconnect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'cluster'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckHoverProvider <span class=\"keyword\">implements</span> vscode.HoverProvider&#123;</span><br><span class=\"line\">    provideHover(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;vscode.Hover&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断悬停的字符是否是加或减</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> opt = <span class=\"built_in\">document</span>.lineAt(position.line).text.charAt(position.character);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt!=<span class=\"string\">'+'</span> &amp;&amp; opt!=<span class=\"string\">'-'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获取单词 这里的正则就是 \\++(加号出现一次以上) 或\\-+(减号出现一次以上)</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> wordRange = <span class=\"built_in\">document</span>.getWordRangeAtPosition(position,<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\'</span>+opt+<span class=\"string\">'+'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回一个vscode.Hover对象，这就是一个悬浮提示的文本信息，我们这里构造一个MarkdownString用于显示文本，当有选中单词位置有多个悬浮提示的话，将放在一起显示</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> wordRange?<span class=\"keyword\">new</span> vscode.Hover(<span class=\"keyword\">new</span> vscode.MarkdownString(<span class=\"string\">'### BF Opt Counter  \\n\\n * **Opt: `'</span>+opt+<span class=\"string\">'`**\\n\\n* **Length: `'</span>+(wordRange.end.character-wordRange.start.character)+<span class=\"string\">'`**'</span>)):<span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"跳转定义\">跳转定义<a href=\"post/vscode-ext5#跳转定义\"></a></h2><p>跳转定义的功能由<code>DefinitionProvider</code>提供，该Provider有如下方法：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckDefinitionProvider <span class=\"keyword\">implements</span> vscode.DefinitionProvider&#123;</span><br><span class=\"line\">    provideDefinition(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;vscode.Location | vscode.Location[] | vscode.LocationLink[]&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>provideDefinition</code>在按下Ctrl并点击时生效，position是点击的位置，我们写一个简单的Brainfuck的循环跳转插件，就是这样的效果：</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/06/07/V0lWF0.gif\" alt=\"效果\" data-zoomable></p></div>\n<p>这个插件相比实际业务逻辑中的跳转定义简单很多，但弄懂了这个，我估计写出一个真正的跳转定义插件也不在话下。</p>\n<p>我们需要利用栈和散列表来做这个<code>[</code>配对功能，具体代码我们就不放上来了，可以在本章的github上找到，提供了两个API：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getLoopOptPairMap(document): Map&lt;string,Position&gt;</span><br><span class=\"line\">    - 返回括号对的散列表</span><br><span class=\"line\">getMatchedOpt(map,position): Position</span><br><span class=\"line\">    - 返回map中与position对应的位置 也就是找到文档中对应的另一个括号的position对象</span><br></pre></td></tr></table></figure></p>\n<p><em>（PS:这个配对的代码还是别跟我学了，看看就行了，我感觉我Java写多了，写啥都像Java 等我深入学习一下TypeScript后也许会再回来改这个代码）</em></p>\n<p>然后我们在<code>BrainfuckDefinitionProvider</code>中调用这个API进行跳转：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> util <span class=\"keyword\">from</span> <span class=\"string\">'./util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckDefinitionProvider <span class=\"keyword\">implements</span> vscode.DefinitionProvider&#123;</span><br><span class=\"line\">    provideDefinition(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;vscode.Location | vscode.Location[] | vscode.LocationLink[]&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> char = <span class=\"built_in\">document</span>.lineAt(position.line).text.charAt(position.character);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(char != <span class=\"string\">'['</span> &amp;&amp; char != <span class=\"string\">']'</span>)<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> map = util.getLoopOptPairMap(<span class=\"built_in\">document</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> target = util.getMatchedOpt(map,position);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> vscode.Location(<span class=\"built_in\">document</span>.uri,target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>provideDefinition</code>方法中，如果找到了应该跳转的定义位置，就返回一个Location对象，如果没找到，则不返回(undefined)或者返回null。</p>\n<p>构造Location对象需要传入跳转到的文件的uri，因为我们是在本文件中跳转，所以直接引用了<code>document.uri</code>，第二个是跳转到的位置。</p>\n<h2 id=\"参考\">参考<a href=\"post/vscode-ext5#参考\"></a></h2><ul>\n<li><a href=\"https://code.visualstudio.com/api/references/vscode-api#HoverProvider\" target=\"_blank\" rel=\"noopener\">HoverProvider</a></li>\n</ul>\n","next":{"title":"VSCode 扩展开发(四) Output、自动完成和Snippets","slug":"vscode-ext4"},"link":"http://yoursite.com/post/vscode-ext5/","toc":[{"title":"学习目标","id":"学习目标","index":"1"},{"title":"开篇寒暄","id":"开篇寒暄","index":"2"},{"title":"悬停提示","id":"悬停提示","index":"3"},{"title":"跳转定义","id":"跳转定义","index":"4"},{"title":"参考","id":"参考","index":"5"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://yoursite.com/post/vscode-ext5/\" title=\"VSCode 扩展开发(五) 悬停、跳转定义\">http://yoursite.com/post/vscode-ext5/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}