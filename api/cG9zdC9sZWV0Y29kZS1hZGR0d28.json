{"title":"Leetcode - Add Two Number","date":"2019-05-20T23:36:27.000Z","slug":"leetcode-addtwo","tags":["leetcode","算法"],"categories":["leetcode"],"updated":"2019-05-29T09:00:45.274Z","content":"<h3 id=\"描述\">描述<a href=\"post/leetcode-addtwo#描述\"></a></h3><p>题目：  </p>\n<blockquote>\n<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n</blockquote>\n<p>难度：Medium</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure></p>\n<p>链表的JavaAPI<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链表的Java API：</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    ListNode next;</span><br><span class=\"line\">    ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"想法\">想法<a href=\"post/leetcode-addtwo#想法\"></a></h3><p>由于这个步骤有些多，所以每一步用伪代码实现一下。</p>\n<p>首先不考虑进位，不考虑两个链表长度不同，循环读出链表的值，并且相加成为一个新的链表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(l1,l2)</span><br><span class=\"line\">    r = null</span><br><span class=\"line\">    while(l1!=null)</span><br><span class=\"line\">        plus = l1.val + l2.val</span><br><span class=\"line\">        if(r == null)</span><br><span class=\"line\">            r = ListNode(plus)</span><br><span class=\"line\">        else</span><br><span class=\"line\">            r.next = ListNode(plus)</span><br><span class=\"line\">            r = result.next</span><br><span class=\"line\">        l1 = l1.next</span><br><span class=\"line\">        l2 = l2.next</span><br></pre></td></tr></table></figure></p>\n<p>我们实现了一个基本模型，现在考虑下进位问题。因为每位肯定是不可能超过10的正整数(包括0)，那么就算9和9相加都不到20，所以，进的位肯定是1或者0，而不可能是2。</p>\n<p>所以我们并不用一个数来存储进位，直接用一个布尔变量记录上一次相加是否需要进位即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    while(l1!=null)</span><br><span class=\"line\">        plus = l1.val + l2.val + (n?1:0) # 这里加上了一个判断，如果需要进位就加1</span><br><span class=\"line\">        ...</span><br><span class=\"line\">            r = result.next</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 下面判断是否进位，并做好标记。</span><br><span class=\"line\">        if(r.val&gt;9)</span><br><span class=\"line\">            r.val %= 10 # 取个位数</span><br><span class=\"line\">            n = true</span><br><span class=\"line\">        else</span><br><span class=\"line\">            n = false</span><br><span class=\"line\"></span><br><span class=\"line\">        l1 = l1.next</span><br><span class=\"line\">        l2 = l2.next</span><br></pre></td></tr></table></figure></p>\n<p>进位的问题解决了，我们再考虑下链表长度不同的问题。我们现在依靠l1的长度做这件事，也就是说如果l2比l1长，那么后面的数不会加到，如果比l1短，会引起异常(Null Pointer)。</p>\n<p>那么我们把循环条件放松一些，如果l1和l2中有一个不等于null就行。也就是只要两个中有一个还有要加的数就让它继续循环。不过我们还需要多加一些判断的代码保证不会出异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    while(l1!=null || l2!=null)</span><br><span class=\"line\">        plus = (l1!=null?l1.val:0) + (l2!=null?l2.val:0) + (n?1:0)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">            r = result.next</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 下面判断是否进位，并做好标记。</span><br><span class=\"line\">        if(r.val&gt;9)</span><br><span class=\"line\">            r.val %= 10 # 取个位数</span><br><span class=\"line\">            n = true</span><br><span class=\"line\">        else</span><br><span class=\"line\">            n = false</span><br><span class=\"line\"></span><br><span class=\"line\">        l1 = (l1!=null?l1.next:null)</span><br><span class=\"line\">        l2 = (l2!=null?l2.next:null)</span><br></pre></td></tr></table></figure>\n<p>还有一个终极问题就是，如果最后一位需要进位怎么办？比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入[5 -&gt; 2 -&gt; 1] [1 -&gt; 2 -&gt; 9]</span><br><span class=\"line\"></span><br><span class=\"line\">输出[6 -&gt; 4 -&gt; 0 -&gt; 1]</span><br></pre></td></tr></table></figure></p>\n<p>所以还要在后面判断一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">        l2 = (l2!=null?l2.next:null)</span><br><span class=\"line\"></span><br><span class=\"line\">if(n)</span><br><span class=\"line\">    r.next = ListNode(1)</span><br></pre></td></tr></table></figure></p>\n<p>这就万无一失了。</p>\n<h3 id=\"实现\">实现<a href=\"post/leetcode-addtwo#实现\"></a></h3><p>Java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"comment\">* 空间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isEqualsBiggerThanTen = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ListNode head = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span> || l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> plus = (l1!=<span class=\"keyword\">null</span>?l1.val:<span class=\"number\">0</span>) + (l2!=<span class=\"keyword\">null</span>?l2.val:<span class=\"number\">0</span>) + (isEqualsBiggerThanTen?<span class=\"number\">1</span>:<span class=\"number\">0</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                result = <span class=\"keyword\">new</span> ListNode(plus);</span><br><span class=\"line\">                head = result;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                result.next = <span class=\"keyword\">new</span> ListNode(plus);</span><br><span class=\"line\">                result = result.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result.val &gt; <span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">                result.val %= <span class=\"number\">10</span>;</span><br><span class=\"line\">                isEqualsBiggerThanTen = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">                isEqualsBiggerThanTen = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            l1 = (l1!=<span class=\"keyword\">null</span>?l1.next:<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            l2 = (l2!=<span class=\"keyword\">null</span>?l2.next:<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEqualsBiggerThanTen)&#123;</span><br><span class=\"line\">            result.next = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runtime: 2 ms, faster than 94.88% of Java online submissions for Add Two Numbers.</span><br><span class=\"line\">Memory Usage: 42.8 MB, less than 88.82% of Java online submissions for Add Two Numbers.</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"JS里的继承","slug":"js-extends"},"next":{"title":"Leetcode - Two Sum","slug":"leetcode-sum"},"link":"http://yoursite.com/post/leetcode-addtwo/","reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://yoursite.com/post/leetcode-addtwo/\" title=\"Leetcode - Add Two Number\">http://yoursite.com/post/leetcode-addtwo/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}