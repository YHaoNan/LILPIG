{"title":"（二）数据可见性以及共享对象 —— Java多线程学习","date":"2019-07-26T11:13:30.000Z","slug":"thread4j-c3-obj-share","tags":["java","thread"],"categories":["Java多线程"],"updated":"2019-07-27T23:43:38.166Z","content":"<p>从上一篇文章中可以知道，同步代码块，也就是<code>synchronized</code>标识的代码块可以保证一个操作的原子性，即不可分割，保证了不会出现竞态条件，其他线程读取到的值不会错乱。</p>\n<p>但是<code>synchronized</code>并不是只干了这一件事，他还保证了数据的可见性。</p>\n<h2 id=\"什么是可见性\">什么是可见性<a href=\"post/thread4j-c3-obj-share#什么是可见性\"></a></h2><p>可见性即能保证一个线程修改了一个数据之后，这个数据对另一个线程是可见的。</p>\n<p>可见性说起来简单，但是却很难理解，因为它里面的很多东西都是违背我们的认知规律并且难以用示例说明的。</p>\n<p>你可能会对可见性产生疑问，既然使用<code>synchronized</code>时只能有一个线程进行操作，所有线程都是顺序通过的，那怎么会有可见性问题？如果线程A先争抢到锁之后，把数据改了，那么当它释放锁，线程B得到锁的时候，这个数据已经改完了啊，这和单线程串行程序的道理是一样的，那么A改的数据对B，对其他后来线程肯定是可见的啊。为什么会把<code>synchronized</code>能保证可见性这件显而易见的事拿出来单说？</p>\n<p>没那么简单，我们先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> site.lilpig.tlearn02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoVisibility</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ready;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!ready)&#123;</span><br><span class=\"line\">                Thread.yield();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(number);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReaderThread().start();</span><br><span class=\"line\">        number = <span class=\"number\">42</span>;</span><br><span class=\"line\">        ready = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码看起来很容易判断结果，按照正常思路应该是结束循环并输出42，但是真的是这样吗？可能不是，它可能是死循环或者是输出0。为啥呢？分情况讨论。</p>\n<p>造成死循环的原因是主线程修改后的<code>ready</code>对子线程来说并不可见。为什么会造成这个情况呢？这要从Java内存模型JMM说起。JMM有一个主内存区，每个线程操作数据时要把数据从主内存区复制到自己的工作内存区进行操作，JVM会选择适当的时机把工作内存和主内存区的数据进行同步，造成死循环的原因就是主线程的数据修改和<code>ReaderThread</code>中的数据不是同步的，可以通过同步代码块和<code>volatile</code>关键字修饰。<code>volatile</code>修饰的变量进行读写时会自动同步。</p>\n<p>造成输出0的原因是代码的重排序，这个问题也可以称作“有序性”。</p>\n<blockquote>\n<p>即使在单线程程序中，每条代码也不一定是顺序执行的</p>\n</blockquote>\n<p>没错，我也被震惊到了，但是事实就是这样，即使感觉上这件事违背了常理。</p>\n<p>代码执行的时候，内存的速度远比cpu的运算速度要慢，为了能发挥出cpu的最优性能，会将代码经过多层重排序，编译器会按照一定的规则将指令重排，指令到了cpu，cpu又会根据自己的规则对指令进行重排。比如下面的单线程代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure></p>\n<p>不要直接认为第一行先于第二行执行，这实际上是没准的事，不过重排序肯定会遵循一些规则，否则我们的代码逻辑就乱了套了。</p>\n<p>重排序遵循<code>as-if-serial</code>语义，这名字直译过来是“好像是连续的…”，我们简单了解下这个语义。</p>\n<p>对代码进行重排要满足数据依赖性，如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖。如果存在数据依赖，那么重排就会影响代码的执行结果，<code>as-if-serial</code>语义保证了在单线程程序中重排不会影响代码执行结果。</p>\n<p>但是多线程的话，程序的执行结果无法预判，所以编译器不好从语义上判断数据是否存在依赖性，所以<code>as-if-serial</code>在多线程程序中保证不了数据不会混乱，这下就出现了数据可见性问题。</p>\n<p>上面的代码可能就是因为主线程的<code>ready</code>和<code>number</code>的赋值操作被重排了，<code>ready</code>先为<code>true</code>，然后<code>ReaderThread</code>读取到了，结束了循环并输出，这时主线程的<code>number</code>赋值还没执行，所以输出0。</p>\n<p><code>volatile</code>关键字修饰的变量除了会进行同步外，用它修饰的变量上面的操作不能被重排到下面，下面不能重排到上面，就像这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b;</span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y;</span><br></pre></td></tr></table></figure></p>\n<p>下面进行赋值操作：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">0</span>;</span><br><span class=\"line\">b=<span class=\"number\">1</span>;</span><br><span class=\"line\">x=a;</span><br><span class=\"line\">y=b;</span><br><span class=\"line\">a=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码<code>x</code>是<code>volatile</code>的，所以赋值操作中，第三行上面的两行，也就是对<code>a</code>、<code>b</code>赋值的操作不能重排到第三行下面，但内部可以重排，就是第一行和第二行可以重排，第三行下面的同样也是一样不能排到上面，但内部可以重排。</p>\n<p>你可能跑去执行代码了但是没有出现问题，其实这些问题应当是个极小的概率事件吧，我们理解就好。虽然没有真正的把这个现象重现出来，但是并不代表它不存在，万一上帝就是那么偏爱你，你也没有办法，所以在多线程代码中我们要预防它的发生，否则可能会出现很大的问题。</p>\n<p>对了，别忘了我之前说过</p>\n<p><span style=\"font-size:1.3em\">synchronized会在一个线程退出后同步所有操作，所以能保证数据对其他线程的可见性</span></p>\n<h2 id=\"最低安全性\">最低安全性<a href=\"post/thread4j-c3-obj-share#最低安全性\"></a></h2><p>Java可以保证就算可见性问题发生了，某个线程读到了失效的数据，但这个数据也是以前某个时刻某个线程设置过的，而不是一个随机值，如果做一些对数据要求不太精确的应用，比如网页访问时的计数器时，最低安全性还是能给我们一个保障的。</p>\n<p>不过有一个例外，非原子的64位变量比如<code>long</code>和<code>double</code>无法保证最低安全性，JVM允许把它们的读取和写入操作分成两次，一次操作32位，所以如果发生了可见性问题，有可能读到的数据前32位是之前设置过的一个值的前32位，后32位是另一个之前设置过的值的后32位，这样就会出现问题。</p>\n<p>解决办法是用<code>volatile</code>关键字声明它们或者用<code>synchronized</code>保护它们。</p>\n<p>因为<code>volatile</code>不会产生阻塞，只是保证变量的可见性，所以它也保证不了操作的原子性。</p>\n<h2 id=\"发布对象\">发布对象<a href=\"post/thread4j-c3-obj-share#发布对象\"></a></h2><p>经常会有在多个线程中共享对象的场景，这时我们如何保证对象的可见性和有效性呢？</p>\n<h3 id=\"逸出\">逸出<a href=\"post/thread4j-c3-obj-share#逸出\"></a></h3><p>我们先看看逸出的概念，当发布一个不该被发布的对象时就称作这个对象逸出，可能会导致线程安全问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Obj&gt; lists;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    lists = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面我们通过最简单的公开静态域发布了一个<code>lists</code>对象，要注意发布一个对象时，对象中的所有共有属性和方法也会被发布，比如上面发布了<code>lists</code>，它其中的所有元素也都被发布了。</p>\n<p>我们来看一个逸出的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String[] state = &#123;<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getState</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> state;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面把<code>state</code>设置成了私有，而通过<code>getState</code>方法其他线程可以随意的修改<code>state</code>中的内容，这时<code>state</code>已经逸出了它的私有作用域。</p>\n<p>逸出会造成的危险不可估量，因为我们也不知道其他线程会对逸出的对象做什么，就算它们什么都不做，危险也是始终存在的，就像你的密码被发布到了公开网络上，虽然可能还没人对你的账号做手脚，但是你的账号已经不安全了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThisEscape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThisEscape</span><span class=\"params\">(EventSource event)</span></span>&#123;</span><br><span class=\"line\">        source.registerListener(<span class=\"keyword\">new</span> EventListener()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEvent</span><span class=\"params\">(Event e)</span></span>&#123;</span><br><span class=\"line\">                doSomething(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码会使<code>this</code>引用逸出，因为你在构造方法中就通过匿名内部类把<code>doSomething</code>传给了<code>source</code>控制，就是说当你把<code>doSomething</code>的控制权交给外部时，<code>ThisEscape</code>实例可能还没初始化完成，就算它位于构造方法的最后一行。</p>\n<p>在构造函数启动一个线程时如果在线程内引用对象某个属性或方法的话，也会造成<code>this</code>引用逸出，解决办法就是不在构造函数内<code>start</code>它，而是提供一个<code>init</code>方法在对象构造完成后启动。</p>\n<p>对于上面的<code>ThisEscape</code>可以这样修改：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThisEscape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> EventListener listener;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThisEscape</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        listener = <span class=\"keyword\">new</span> EventListener()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEvent</span><span class=\"params\">(Event e)</span></span>&#123;</span><br><span class=\"line\">                doSomething(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThisEscape <span class=\"title\">newInstance</span><span class=\"params\">(EventSource event)</span></span>&#123;</span><br><span class=\"line\">        ThisEscape instance = <span class=\"keyword\">new</span> ThisEscape();</span><br><span class=\"line\">        event.registerListener(instance.listener);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"线程封闭\">线程封闭<a href=\"post/thread4j-c3-obj-share#线程封闭\"></a></h3><p>保证线程安全的最有效的办法就是不共享数据。。。。就像保证你电脑不被黑客入侵的最有效的办法就是不用电脑。</p>\n<h4 id=\"ad-hoc线程封闭\">ad-hoc线程封闭<a href=\"post/thread4j-c3-obj-share#ad-hoc线程封闭\"></a></h4><p>ad-hoc线程封闭很好实现，你只需要记几（自己）控制记几不去用其他线程的数据就好了。（应该是这样理解）</p>\n<p>但是这个方法还是不要用，因为你可能控制不了记几，并且因为你并没做一些语法层面的限制所以Java也控制不了记几了。</p>\n<h4 id=\"栈封闭\">栈封闭<a href=\"post/thread4j-c3-obj-share#栈封闭\"></a></h4><p>栈封闭就是把对象都限制在局部变量中，其他线程无法访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPassCount</span><span class=\"params\">(List&lt;Student&gt; students)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    List&lt;Student&gt; studentsCopy = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    studentsCopy.addAll(students);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Student s:studentsCopy)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.isPassed())&#123;</span><br><span class=\"line\">            num++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码我们返回了一个基本类型，在Java中无法担心基本类型的引用被另一个线程获得，因为Java中的基本类型都是值传递，而且我们把<code>studentsCopy</code>封装在了方法中，其他线程无法修改。</p>\n<h4 id=\"ThreadLocal类\">ThreadLocal类<a href=\"post/thread4j-c3-obj-share#ThreadLocal类\"></a></h4><p>ThreadLocal是Java提供的一个类。</p>\n<p>很多时候为了节省资源，我们会提供一个全局变量来缓存对象，如果对象之前被创建过我们就直接去拿那个全局变量，这在单线程程序中是安全的，但是在多线程程序中可能不安全。ThreadLocal可以轻易的给每个线程分配一个自己的全局变量，各个线程之间互不打扰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> site.lilpig.tlearn02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadLocalLearning</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class=\"keyword\">new</span> ThreadLocal()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> createObject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getObject</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(getObject());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(getObject());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(getObject());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟一个耗时创建对象的场景，假设这个对象是线程不安全的，比如获得数据库的Connection</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">createObject</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(Thread.currentThread().getName());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Output:</span></span><br><span class=\"line\"><span class=\"comment\">* Thread-0</span></span><br><span class=\"line\"><span class=\"comment\">* Thread-1</span></span><br><span class=\"line\"><span class=\"comment\">* Thread-2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不变性\">不变性<a href=\"post/thread4j-c3-obj-share#不变性\"></a></h3><p>使用不可变对象依然可以保证数据的安全。不可变对象即创建后不能被修改的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Immutable</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImmutableObj</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImmutableObj</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的类是一个不可变对象的类，<code>@Immutable</code>标记可以告诉其他开发人员该类是不可变的，类被定义成<code>final</code>保证了它不可被继承和改写，语义上也进一步告诉开发人员该类不可变。</p>\n<p>该类在构造方法中传入x和y，并且声明为<code>final</code>，就算它们不是<code>final</code>也没有任何线程能修改它。</p>\n<p>我们可以利用这个不可变对象工作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">            Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = <span class=\"keyword\">new</span> ImmutableObj(x,y).sum();</span><br><span class=\"line\">            assertTrue(result == x+y,<span class=\"string\">\"The result of obj.sum() is \"</span>+result+<span class=\"string\">\", x is \"</span>+x +<span class=\"string\">\", y is \"</span>+y);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">assertTrue</span><span class=\"params\">(<span class=\"keyword\">boolean</span> condition,String msg)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!condition)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TaskThread().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于对象的不可变性，异常将永远不会被抛出。</p>\n<p>声明一个不可变的属性时把他设置为<code>final</code>是一个好习惯，其他开发人员能很快的明白你的意图，尽管<code>final</code>关键字并不能限制对对象属性的修改。</p>\n<p>我们还可以用不可变对象做一个缓存功能：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Immutable</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumResultCache</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x,y,result;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SumResultCache</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> result)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.x == x &amp;&amp; <span class=\"keyword\">this</span>.y == y)<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SumResultCache cache = <span class=\"keyword\">new</span> SumResultCache(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">            Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">            Integer result = cache.get(x,y);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                result = x+y;</span><br><span class=\"line\">                <span class=\"comment\">//假设计算需要经过很长时间，是个耗时操作，所以需要缓存</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cache = <span class=\"keyword\">new</span> SumResultCache(x,y,result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            assertTrue(result == x+y,<span class=\"string\">\"The result of obj.sum() is \"</span>+result+<span class=\"string\">\", x is \"</span>+x +<span class=\"string\">\", y is \"</span>+y);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">assertTrue</span><span class=\"params\">(<span class=\"keyword\">boolean</span> condition,String msg)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!condition)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TaskThread().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面我们对<code>cache</code>只有一次<code>get</code>操作，之后就判断<code>result</code>是不是空，如果是就计算，并重新建立缓存。为了避免出现可见性问题，我们要加上<code>volatile</code>关键字确保我们对<code>cache</code>的修改对其他线程可见。</p>\n<h3 id=\"安全发布\">安全发布<a href=\"post/thread4j-c3-obj-share#安全发布\"></a></h3><h4 id=\"不安全的发布\">不安全的发布<a href=\"post/thread4j-c3-obj-share#不安全的发布\"></a></h4><p>很奇怪哈，明明是在说对象的发布，我们却一直在讨论怎么保证对象不被发不出去，虽然不把对象发不出去能解决很多问题，但是如果我们的确需要在多线程间共享数据，那就没办法了。</p>\n<p>来看一个很有意思的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Holder</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;<span class=\"keyword\">this</span>.n = n&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">assertSanity</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n!=n)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"n is not equals to n...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最开始看到这个例子，我无法理解<code>n!=n</code>这件事，我认为这根本不可能发生，我去问了一个乐于助人的老师，他告诉我是因为重排造成的可见性问题，在多线程中，也许<code>this.n=n</code>还没有执行完毕，对象就返回了，所以<code>assertSanity</code>中读取的第一个<code>n</code>可能是默认值0，这时<code>this.n=n</code>执行了，读到的第二个<code>n</code>是正确的n，就发生了这个异常。</p>\n<p>当然你不要试图运行，发生这件事的概率太小了，几乎无法重现，我的那个老师也说至今没找出重现的办法。</p>\n<p>这里要推荐一下老师的课：<a href=\"https://study.163.com/provider/400000000447005/index.htm\" target=\"_blank\" rel=\"noopener\">老葛课堂 — 网易云课堂</a></p>\n<p>嘶，昨天向老师咨询这个多线程问题的时候我不知道老师有多线程的课，我和他说我是看《Java并发编程实战》这本书产生的疑问，他只是给我解答，对自己的课只字未提，真的是…今天看到他有个收费的多线程的课我莫名有点小感动，不过才5块，在这个知识付费的年代，几千都不一定学到啥，反正我是去支持了。</p>\n<p>Java能保证不可变对象的可见性，所以可以通过把<code>n</code>声明成final来解决这个问题。</p>\n<h4 id=\"如何安全发布对象\">如何安全发布对象<a href=\"post/thread4j-c3-obj-share#如何安全发布对象\"></a></h4><ul>\n<li><p>在静态域中初始化对象  </p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Holder holder = <span class=\"keyword\">new</span> Holder(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>  静态域将在JVM初始化类的时候完成初始化，所以是安全的，在单例模式中，常常应用这个技巧。</p>\n</li>\n<li><p>将对象设置为<code>volatile</code>或原子对象中<br>  Java提供了一系列原子操作的对象，可以保证对象操作的原子性，volatile可以保证可见性。</p>\n</li>\n<li><p>将对象的引用保存到某个正确构造的final类型域中</p>\n</li>\n<li>将对象的引用保存到由锁保护的域中</li>\n</ul>\n<p>安全发布只能保证发布那一刻的可见性，如果发布的是可变对象，每次访问时还要做同步操作。</p>\n<hr>\n<h2 id=\"参考\">参考<a href=\"post/thread4j-c3-obj-share#参考\"></a></h2><ul>\n<li><a href=\"https://www.cnblogs.com/gtaxmjld/p/5274779.html\" target=\"_blank\" rel=\"noopener\">多线程之指令重排序</a></li>\n</ul>\n","next":{"title":"Nodejs中的异步编程 -- Promise","slug":"nodejs-promise"},"link":"http://lilpig.site/post/thread4j-c3-obj-share/","toc":[{"title":"什么是可见性","id":"什么是可见性","index":"1"},{"title":"最低安全性","id":"最低安全性","index":"2"},{"title":"发布对象","id":"发布对象","index":"3","children":[{"title":"逸出","id":"逸出","index":"3.1"},{"title":"线程封闭","id":"线程封闭","index":"3.2","children":[{"title":"ad-hoc线程封闭","id":"ad-hoc线程封闭","index":"3.2.1"},{"title":"栈封闭","id":"栈封闭","index":"3.2.2"},{"title":"ThreadLocal类","id":"ThreadLocal类","index":"3.2.3"}]},{"title":"不变性","id":"不变性","index":"3.3"},{"title":"安全发布","id":"安全发布","index":"3.4","children":[{"title":"不安全的发布","id":"不安全的发布","index":"3.4.1"},{"title":"如何安全发布对象","id":"如何安全发布对象","index":"3.4.2"}]}]},{"title":"参考","id":"参考","index":"4"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/thread4j-c3-obj-share/\" title=\"（二）数据可见性以及共享对象 —— Java多线程学习\">http://lilpig.site/post/thread4j-c3-obj-share/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}