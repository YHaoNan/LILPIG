{"title":"BST、2-3树、红黑树和散列函数实现符号表","date":"2019-06-29T01:56:24.000Z","slug":"algorithm-table","tags":["数据结构"],"categories":["算法和数据结构"],"updated":"2019-06-30T10:03:01.058Z","content":"<h2 id=\"有序符号表\">有序符号表<a href=\"post/algorithm-table#有序符号表\"></a></h2><p>有序符号表能保证键的顺序。</p>\n<p>最简单的实现符号表的方式，我们可以用一个链表实现顺序存储，然后每次插入和删除时我们遍历链表，找到合适的位置。但是这样做的时间复杂度很高，需要线性复杂度，没法完成大任务，我们希望将插入和删除操作的时间复杂度限制在对数级别，所以应该另辟蹊径。</p>\n<p>使用两个数组实现也可以，一个存键，一个存值，而且使用数组这种有序的数据结构，我们可以通过下标访问并不相邻的值，这样就可以使用二分算法来查找键，而不是遍历整个数组，这就实现了对数级别的查找功能。</p>\n<p>因为是有序符号表，所以每一个键在数组中都是按顺序排列的，所以我们规定键必须是Comparable的，我们编写了一个rank函数，返回传入的key在符号表中应该摆放的位置，rank使用了二分查找，所以可以保证对数级别的查找速度。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span> , hi = count-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = lo+(hi-lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//比较</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) lo = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> hi = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以下是全部代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearchST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;,<span class=\"title\">Value</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Key</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Key[] keys;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Value[] values;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearchST</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>&#123;</span><br><span class=\"line\">        keys = (Key[]) <span class=\"keyword\">new</span> Comparable[size];</span><br><span class=\"line\">        values = (Value[]) <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> count;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rank(key);</span><br><span class=\"line\">        <span class=\"comment\">//注意，index位置的key并不一定等于传入的key，所以还要判断是否相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; count &amp;&amp; keys[index].compareTo(key) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> values[index];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key)!=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull())<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't put element to a full map.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&lt;count &amp;&amp; keys[index].compareTo(key)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            values[index] = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把index和后面的所有元素往后移动</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=count-<span class=\"number\">1</span>;i&gt;=index;i--)&#123;</span><br><span class=\"line\">            keys[i+<span class=\"number\">1</span>] = keys[i];</span><br><span class=\"line\">            values[i+<span class=\"number\">1</span>] = values[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        keys[index] = key;</span><br><span class=\"line\">        values[index] = value;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&lt;count &amp;&amp; keys[index].compareTo(key) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//把后面的所有元素往前移动</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=index+<span class=\"number\">1</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">                keys[i-<span class=\"number\">1</span>] = keys[i];</span><br><span class=\"line\">                values[i-<span class=\"number\">1</span>] = values[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span> , hi = count-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = lo+(hi-lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) lo = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> hi = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//一些其他方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Key</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor&lt;count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> keys[cursor++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Key&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Iter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> count==<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> count==keys.length;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这下就能保证对数级别的查找操作了，但是。。对于插入和删除操作好像。。。还是很慢，因为删除要移动rank返回的索引后面的所有元素，让他们都前进一个位置，插入新key操作则是要向后一个位置，虽然说符号表的插入新key和删除操作远没有查询用的多，但是这样的代码还是无法面对较大规模的任务。</p>\n<p>这时候可以考虑用链式存储，链式存储没有数组的限制，用链表来思考，如果在链表中间删除一个元素的话，只需要将他的前后结点相连即可，而数组中删除一个元素则需要移动元素。</p>\n<p>但是，我们说的可不是用链表，而是用树。</p>\n<h2 id=\"二叉查找树\">二叉查找树<a href=\"post/algorithm-table#二叉查找树\"></a></h2><p>和链表不同，二叉查找树包含多个指向子节点的链接，一个是左节点，一个是右节点。二叉查找树中一个元素的左节点小于它，右节点大于它，这很像快速排序中的基数。</p>\n<p>查找一个元素的时候，只需要从根节点开始对比，如果key相同就返回，如果key比当前节点小，就去左子树中找，如果大则去右子树，这样就保证了对数级别的查找操作。当然，二叉查找树最坏情况下还是需要线性时间，也就是当整棵树排成一个链表时，也就是都只有右节点或都只有左节点，但是这种情况基本不可能出现。</p>\n<p>插入操作有两种可能，一是该键存在，找到它并充值它的值即可。一种是该键不存在，这时需要在合适位置添加一个节点。</p>\n<p>删除操作比较麻烦，我们需要考虑四种情况：</p>\n<ol>\n<li>删除的节点只有左节点，那么需要用它的左节点顶替他的位置</li>\n<li>删除的节点只有右节点，那么需要用它的右节点顶替他的位置</li>\n<li>删除的节点左右节点都有，需要用右子节点中的最小节点顶替它的位置</li>\n<li>左右子节点都没有，直接删</li>\n</ol>\n<p>关于第三点，为什么要用右子节点中最小节点顶替呢？假设要删的节点是x，在它的父节点的左侧，那么x的子节点肯定比x的父节点小，否则它就在x的父节点的右面了，反之亦然。而x的右节点中最小的子节点肯定大于x的左子节点，所以，综上所述，这个数可以胜任。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;,<span class=\"title\">Value</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node left;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node right;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Key key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            N = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BST</span><span class=\"params\">()</span></span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span></span>&#123;</span><br><span class=\"line\">        root = put(key,value,root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Key key,Value value,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key,value,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) node.right = put(key,value,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) node.left = put(key,value,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key,root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> min(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        root = deleteMin(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">        node.left = deleteMin(node.left);</span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;root = delete(key,root);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Key key,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) node.right = delete(key,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) node.left = delete(key,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有左节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">            <span class=\"comment\">//没有右节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.right==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.left;</span><br><span class=\"line\">            Node t = node;</span><br><span class=\"line\">            <span class=\"comment\">//找到右节点中最小的</span></span><br><span class=\"line\">            node = min(t.right);</span><br><span class=\"line\">            <span class=\"comment\">//删掉这个最小的</span></span><br><span class=\"line\">            node.right = deleteMin(t.right);</span><br><span class=\"line\">            <span class=\"comment\">//顶替之前的元素的位置</span></span><br><span class=\"line\">            node.left = t.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> size(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node!=<span class=\"keyword\">null</span>?node.N:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"习题\">习题<a href=\"post/algorithm-table#习题\"></a></h4><ol>\n<li><p>为二叉查找树添加一个方法<code>height()</code>来计算树的高度。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> height(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) size = Math.max(<span class=\"number\">1</span>+height(node.right),size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>) size = Math.max(<span class=\"number\">1</span>+height(node.left),size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为二叉查找树实现非递归的<code>get</code>和<code>put</code>方法。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span></span>&#123;</span><br><span class=\"line\">    Node node = <span class=\"keyword\">new</span> Node(key,value,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)&#123;root=node;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    Node cur = root,parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        parent = cur;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(cur.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) cur=cur.right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) cur=cur.left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;cur.value = value;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmp = key.compareTo(parent.key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) parent.left  = node;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> parent.right = node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">    Node cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(cur.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) cur=cur.right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) cur=cur.left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> cur.value;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改二叉查找树的实现，将最近访问的节点Node保存在一个变量中，这样<code>get()</code>或<code>put()</code>再次访问同一个键的时候就只需要常数时间了。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Node lastUse = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//get</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastUse!=<span class=\"keyword\">null</span> &amp;&amp; lastUse.key.compareTo(key)==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> lastUse.value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(key,root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key,Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.right);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.left);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lastUse = node;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//put</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastUse!=<span class=\"keyword\">null</span> &amp;&amp; lastUse.key.compareTo(key)==<span class=\"number\">0</span>) &#123;lastUse.value = value;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    root = put(key,value,root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Key key,Value value,Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;lastUse = <span class=\"keyword\">new</span> Node(key,value,<span class=\"number\">1</span>);<span class=\"keyword\">return</span> lastUse;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) node.right = put(key,value,node.right);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) node.left = put(key,value,node.left);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lastUse = node;</span><br><span class=\"line\">        node.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"平衡查找树\">平衡查找树<a href=\"post/algorithm-table#平衡查找树\"></a></h2><p>虽然二叉查找树基本能实现对数级别的插入、删除和查找操作，但是最坏情况下它仍是线性级别的，因为根据输入键的不同，二叉查找树无法保证树的平衡，比如：</p>\n<p>向一个以字符为键的二叉查找树中依次插入<code>A,B,C,D,E,F,G...Z</code>，则这个树是这样的</p>\n<div class=\"article-img\"><p><img src=\"http://nsimg.cn-bj.ufileos.com/img-1561880516848.png\" alt=\"img\" data-zoomable></p></div>\n<p>前面也提到过，这样的一颗树其实和链表没什么区别了，如果这时再去查找<code>Z</code>，是需要线性时间的。所以我们需要研究一种平衡的查找树来完成这个工作。</p>\n<p>平衡查找树一般情况下会在插入和删除时为保证树的完美平衡而做一些变换操作，用这些变换操作换来完美平衡是值得的，因为首先这些变换操作不会太慢，其次是查找操作完全比插入（插入新节点）和删除操作用的多。</p>\n<p>平衡查找树有很多种实现，2-3查找树、红黑树、AVL（平衡二叉树）等等，我们主要研究2-3查找树和红黑树。</p>\n<h3 id=\"2-3树\">2-3树<a href=\"post/algorithm-table#2-3树\"></a></h3><p>和传统的二叉查找树不同，二叉查找树中的节点都有一个键值和两个子节点（左节点、右节点），我们把它称作2节点，而2-3树中还有一种含有两个键值三个子节点的3节点。</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-anatomy.png\" alt=\"img\" data-zoomable></p></div>\n<p>3节点左侧的键大于右侧的键，从左侧子节点开始，后面的树中每个节点的键都小于左侧键（后统称为左册子节点小于左键），中间子节点的键在左右键中间（大于左键小于右键），右侧的子节点的键大于右侧键。</p>\n<p>一颗完美平衡的2-3查找树的所有空连接到根节点的距离是相同的，也就是说命中查找的最大比较次数相同，如上图所示。</p>\n<h4 id=\"查找\">查找<a href=\"post/algorithm-table#查找\"></a></h4><p>查找元素其实和二叉查找树没啥区别，只是多了中间节点，直接看图应该就能懂了。</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-search.png\" alt=\"img\" data-zoomable></p></div>\n<h4 id=\"插入\">插入<a href=\"post/algorithm-table#插入\"></a></h4><p>插入比较难，因为要考虑树的平衡，所以需要考虑两种情况。如果查找结束于一个2节点，那么就直接把该2节点转换为3节点即可（转换为3节点就可以不增加树的高度）。</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert2.png\" alt=\"img\" data-zoomable></p></div>\n<p>但是如果结束于一个3节点则比较麻烦，为保证树的平衡，所以需要往上分解，如何分解？我们先引入4节点的概念，不过不要被这么多花里胡哨的节点搞怕了，你也不用想这么复杂的东西如何用代码实现，我们不会用代码实现2-3树，而是用另一种简单的方式（红黑树）实现它。</p>\n<p>4节点包含三个键，左侧最小，其次是中间，然后是右边，它包含四个子节点，分别小于左侧键，在左侧和第二个键之间，在第二和第三个键之间，在第三和第四个键之间。</p>\n<p>我们现在假设有一个3节点，我们想往这个3节点下插入一个键，那么会经过如下步骤：</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3a.png\" alt=\"img\" data-zoomable></p></div>\n<p>首先把要插入的键和这个3节点合并，并把键放在合适的位置，上图中S大于A和E，所以放在右边，然后抽出中间的节点，假设这个节点的引用叫t，这个4节点变成了三个普通的2节点，然后把左键放到t的左子节点，把右键放到t的右子节点。这就完成了分解。</p>\n<p>但是实际的情况并没这么简单，这个代码也没这么容易实现，我们还要考虑，如果这个被插入的3节点有一个2节点作为父节点，那么就需要如下步骤：</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3b.png\" alt=\"img\" data-zoomable></p></div>\n<p>插入合并为4节点后，抽出的那个中间节点t则会和这上面的2节点合并成一个3节点，并且左键放到这个3节点的中间，右键放到这个3节点的右边。</p>\n<p>再考虑一个问题，如果向3节点中插入新节点，而父节点也是一个3节点，那该怎么办？答案是递归向上分解。</p>\n<p>就是不断组成4节点，向上分解，直到遇到了一个2节点，这个过程就可以结束了。</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-insert3c.png\" alt=\"img\" data-zoomable></p></div>\n<p>如果到了根节点还是3节点，那么需要继续向上分解，根节点分解后树的高度才增加1。</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/23tree-split.png\" alt=\"img\" data-zoomable></p></div>\n<p>我猜现在你能想到这种做法为啥能够保证树的平衡了，如果没想到就多在脑袋里走几遍这个过程。</p>\n<p>（上面的说法是根据图示说的，实际的情况比这个复杂，分解过程可能出现6种情况呢）</p>\n<p>树一旦平衡了，它就可以把操作的时间复杂度限制在对数级别了，说一个激动人心的事，加入我们有10亿个节点的一颗2-3树，那么它的高度也就在19-30之间，也就是说最多需要30次访问即可在10亿个数据中找出一个数据。不得不说上面的2-3树很精妙，不过很难实现，因为可能发生的情况太多，处理这些情况所需要的花销有时候可能还不如直接用二叉查找树。</p>\n<p>下面，我们使用在二叉树中设置链接颜色的方式来用二叉树实现一个平衡树，这种方式叫红黑树。</p>\n<h3 id=\"红黑树\">红黑树<a href=\"post/algorithm-table#红黑树\"></a></h3><p>红黑树用节点间链接的颜色来表示2节点或3节点，红色表示链接的是一个3节点，黑色表示链接的是一个2节点。以下是一个红黑树和2-3树的对比：</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/redblack-1-1.png\" alt=\"img\" data-zoomable></p></div>\n<p>可以清晰的看出红黑树是如何表示2-3树的。</p>\n<p>一颗红黑树满足如下条件：</p>\n<ol>\n<li>只红链接都是左链接</li>\n<li>不会出现连续的两个红链接（这里把红链接连接的两个节点看做一个3节点就知道为什么了）</li>\n</ol>\n<p>给出节点的定义：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">    Key key;</span><br><span class=\"line\">    Value value;</span><br><span class=\"line\">    Node left;</span><br><span class=\"line\">    Node right;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> color;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n, <span class=\"keyword\">boolean</span> color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        N = n;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在2-3树中，向上分解需要借助4节点，在红黑树中也有4节点，如果一个节点的左链接和右链接都是红的，你可以把它看做一个4节点，当然和2-3树中4节点会被分解一样，红黑树中的4节点也会被分解成三个2节点（当然，中间节点最后会向上组成3节点）。</p>\n<p>而且在红黑树这种数据结构中，把4节点分解成3个2节点非常简单，只需要把链接变成黑的就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父节点变为红色，相当于2-3树中的中间节点向上组成3节点</span></span><br><span class=\"line\">    h.color = RED;</span><br><span class=\"line\">    h.left.color = BLACK;</span><br><span class=\"line\">    h.right.color = BLACK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如下图：</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/color-flip.png\" alt=\"img\" data-zoomable></p></div>\n<p>为了方便实现，我们决定，只要插入一个节点，我们就把它以红色的形式插到树底，但是有如下几个问题需要解决：</p>\n<p>插入的元素是插入到右节点的（插入的键比较大），如果父节点的左节点不是红的，那么就需要通过旋转把这个向右的红链接转成向左的</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/redblack-left-rotate.png\" alt=\"img\" data-zoomable></p></div>\n<p>插入的元素是插入到右节点的（插入的键比较大），但是父节点的左节点也是红的，那么如上文所说，这时就构成了4节点，需要通过<code>flipColors</code>修正颜色。</p>\n<div class=\"article-img\"><p><img src=\"https://algs4.cs.princeton.edu/33balanced/images/color-flip.png\" alt=\"img\" data-zoomable></p></div>\n<p>插入的元素是插入到左节点的（插入的键比较小），并且父节点是红的，这下就构成了两个连续的左节点，可以通过两次操作解决它（向右旋转变成4节点再分解）。</p>\n<p>接下来给出红黑树的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> utils.ConsoleTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 红黑树的Java实现</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: LILPIG</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/6/30 16:52</span></span><br><span class=\"line\"><span class=\"comment\"> * God bless my code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedBlackBST</span> &lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt; , <span class=\"title\">Value</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">        Key key;</span><br><span class=\"line\">        Value value;</span><br><span class=\"line\">        Node left;</span><br><span class=\"line\">        Node right;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> color;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n, <span class=\"keyword\">boolean</span> color)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            N = n;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span></span>&#123;root = put(key,value,root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Key key,Value value,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key,value,<span class=\"number\">1</span>,RED);&#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) node.right = put(key,value,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) node.left = put(key,value,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRed(node.right) &amp;&amp; !isRed(node.left)) node = rotateLeft(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left)) node = rotateRight(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRed(node.left) &amp;&amp; isRed(node.right)) flipColors(node);</span><br><span class=\"line\"></span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key,root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key, Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//左旋转</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">        Node x = h.right;</span><br><span class=\"line\">        h.right = x.left;</span><br><span class=\"line\">        x.left = h;</span><br><span class=\"line\">        x.color = h.color;</span><br><span class=\"line\">        h.color = RED;</span><br><span class=\"line\">        x.N = h.N;</span><br><span class=\"line\">        h.N = <span class=\"number\">1</span> + size(h.left) + size(h.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//右旋转</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">        Node x = h.left;</span><br><span class=\"line\">        h.left = x.right;</span><br><span class=\"line\">        x.right = h;</span><br><span class=\"line\">        x.color = h.color;</span><br><span class=\"line\">        h.color = RED;</span><br><span class=\"line\">        x.N = h.N;</span><br><span class=\"line\">        h.N = <span class=\"number\">1</span> + size(h.left) + size(h.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//改变颜色</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</span><br><span class=\"line\">        h.color = RED;</span><br><span class=\"line\">        h.left.color = BLACK;</span><br><span class=\"line\">        h.right.color = BLACK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> size(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node!=<span class=\"keyword\">null</span>?node.N:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRed</span><span class=\"params\">(Node node)</span></span>&#123;<span class=\"keyword\">return</span> node!=<span class=\"keyword\">null</span>?node.color:<span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除最小操作和删除操作\">删除最小操作和删除操作<a href=\"post/algorithm-table#删除最小操作和删除操作\"></a></h3><h2 id=\"散列表\">散列表<a href=\"post/algorithm-table#散列表\"></a></h2><p>利用各种树来实现的符号表已经很快了，但是。。。还可以更快吗？？？可以可以，散列表使用散列函数在最优状态的时间复杂度为O(1)，也就是一下就能找到。</p>\n<p>但是它也有缺点，就是键无序，而且有时会浪费很多空间。</p>\n<p>略。。。</p>\n","next":{"title":"优先队列","slug":"algorithm-maxpq"},"link":"http://lilpig.site/post/algorithm-table/","toc":[{"title":"有序符号表","id":"有序符号表","index":"1"},{"title":"二叉查找树","id":"二叉查找树","index":"2"},{"title":"平衡查找树","id":"平衡查找树","index":"3","children":[{"title":"2-3树","id":"2-3树","index":"3.1","children":[{"title":"查找","id":"查找","index":"3.1.1"},{"title":"插入","id":"插入","index":"3.1.2"}]},{"title":"红黑树","id":"红黑树","index":"3.2"},{"title":"删除最小操作和删除操作","id":"删除最小操作和删除操作","index":"3.3"}]},{"title":"散列表","id":"散列表","index":"4"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/algorithm-table/\" title=\"BST、2-3树、红黑树和散列函数实现符号表\">http://lilpig.site/post/algorithm-table/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}