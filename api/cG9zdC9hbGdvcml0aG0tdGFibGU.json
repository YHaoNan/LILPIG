{"title":"符号表的几种实现方式","date":"2019-06-29T01:56:24.000Z","slug":"algorithm-table","tags":["数据结构"],"categories":["算法和数据结构"],"updated":"2019-06-29T10:52:33.248Z","content":"<h2 id=\"有序符号表\">有序符号表<a href=\"post/algorithm-table#有序符号表\"></a></h2><p>有序符号表能保证键的顺序。</p>\n<p>最简单的实现符号表的方式，我们可以用一个链表实现顺序存储，然后每次插入和删除时我们遍历链表，找到合适的位置。但是这样做的时间复杂度很高，需要线性复杂度，没法完成大任务，我们希望将插入和删除操作的时间复杂度限制在对数级别，所以应该另辟蹊径。</p>\n<p>使用两个数组实现也可以，一个存键，一个存值，而且使用数组这种有序的数据结构，我们可以通过下标访问并不相邻的值，这样就可以使用二分算法来查找键，而不是遍历整个数组，这就实现了对数级别的查找功能。</p>\n<p>因为是有序符号表，所以每一个键在数组中都是按顺序排列的，所以我们规定键必须是Comparable的，我们编写了一个rank函数，返回传入的key在符号表中应该摆放的位置，rank使用了二分查找，所以可以保证对数级别的查找速度。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span> , hi = count-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = lo+(hi-lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//比较</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) lo = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> hi = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以下是全部代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearchST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;,<span class=\"title\">Value</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Key</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Key[] keys;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Value[] values;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearchST</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>&#123;</span><br><span class=\"line\">        keys = (Key[]) <span class=\"keyword\">new</span> Comparable[size];</span><br><span class=\"line\">        values = (Value[]) <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> count;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rank(key);</span><br><span class=\"line\">        <span class=\"comment\">//注意，index位置的key并不一定等于传入的key，所以还要判断是否相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; count &amp;&amp; keys[index].compareTo(key) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> values[index];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key)!=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull())<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't put element to a full map.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&lt;count &amp;&amp; keys[index].compareTo(key)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            values[index] = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把index和后面的所有元素往后移动</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=count-<span class=\"number\">1</span>;i&gt;=index;i--)&#123;</span><br><span class=\"line\">            keys[i+<span class=\"number\">1</span>] = keys[i];</span><br><span class=\"line\">            values[i+<span class=\"number\">1</span>] = values[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        keys[index] = key;</span><br><span class=\"line\">        values[index] = value;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index&lt;count &amp;&amp; keys[index].compareTo(key) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//把后面的所有元素往前移动</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=index+<span class=\"number\">1</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">                keys[i-<span class=\"number\">1</span>] = keys[i];</span><br><span class=\"line\">                values[i-<span class=\"number\">1</span>] = values[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span> , hi = count-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = lo+(hi-lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) lo = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> hi = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//一些其他方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Key</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor&lt;count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> keys[cursor++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Key&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Iter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> count==<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> count==keys.length;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这下就能保证对数级别的查找操作了，但是。。对于插入和删除操作好像。。。还是很慢，因为删除要移动rank返回的索引后面的所有元素，让他们都前进一个位置，插入新key操作则是要向后一个位置，虽然说符号表的插入新key和删除操作远没有查询用的多，但是这样的代码还是无法面对较大规模的任务。</p>\n<p>这时候可以考虑用链式存储，链式存储没有数组的限制，用链表来思考，如果在链表中间删除一个元素的话，只需要将他的前后结点相连即可，而数组中删除一个元素则需要移动元素。</p>\n<p>但是，我们说的可不是用链表，而是用树。</p>\n<h2 id=\"二叉查找树\">二叉查找树<a href=\"post/algorithm-table#二叉查找树\"></a></h2><p>和链表不同，二叉查找树包含多个指向子节点的链接，一个是左节点，一个是右节点。二叉查找树中一个元素的左节点小于它，右节点大于它，这很像快速排序中的基数。</p>\n<p>查找一个元素的时候，只需要从根节点开始对比，如果key相同就返回，如果key比当前节点小，就去左子树中找，如果大则去右子树，这样就保证了对数级别的查找操作。当然，二叉查找树最坏情况下还是需要线性时间，也就是当整棵树排成一个链表时，也就是都只有右节点或都只有左节点，但是这种情况基本不可能出现。</p>\n<p>插入操作有两种可能，一是该键存在，找到它并充值它的值即可。一种是该键不存在，这时需要在合适位置添加一个节点。</p>\n<p>删除操作比较麻烦，我们需要考虑四种情况：</p>\n<ol>\n<li>删除的节点只有左节点，那么需要用它的左节点顶替他的位置</li>\n<li>删除的节点只有右节点，那么需要用它的右节点顶替他的位置</li>\n<li>删除的节点左右节点都有，需要用右子节点中的最小节点顶替它的位置</li>\n<li>左右子节点都没有，直接删</li>\n</ol>\n<p>关于第三点，为什么要用右子节点中最小节点顶替呢？假设要删的节点是x，在它的父节点的左侧，那么x的子节点肯定比x的父节点小，否则它就在x的父节点的右面了，反之亦然。而x的右节点中最小的子节点肯定大于x的左子节点，所以，综上所述，这个数可以胜任。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;,<span class=\"title\">Value</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node left;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node right;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Key key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            N = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BST</span><span class=\"params\">()</span></span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key,Value value)</span></span>&#123;</span><br><span class=\"line\">        root = put(key,value,root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Key key,Value value,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key,value,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) node.right = put(key,value,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) node.left = put(key,value,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key,root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(key,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">min</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> min(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        root = deleteMin(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">        node.left = deleteMin(node.left);</span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span></span>&#123;root = delete(key,root);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Key key,Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(node.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) node.right = delete(key,node.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) node.left = delete(key,node.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有左节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.right;</span><br><span class=\"line\">            <span class=\"comment\">//没有右节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.right==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> node.left;</span><br><span class=\"line\">            Node t = node;</span><br><span class=\"line\">            <span class=\"comment\">//找到右节点中最小的</span></span><br><span class=\"line\">            node = min(t.right);</span><br><span class=\"line\">            <span class=\"comment\">//删掉这个最小的</span></span><br><span class=\"line\">            node.right = deleteMin(t.right);</span><br><span class=\"line\">            <span class=\"comment\">//顶替之前的元素的位置</span></span><br><span class=\"line\">            node.left = t.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.N = size(node.left)+size(node.right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> size(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node!=<span class=\"keyword\">null</span>?node.N:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"平衡查找树\">平衡查找树<a href=\"post/algorithm-table#平衡查找树\"></a></h2><h2 id=\"红黑树\">红黑树<a href=\"post/algorithm-table#红黑树\"></a></h2><h2 id=\"散列表\">散列表<a href=\"post/algorithm-table#散列表\"></a></h2>","next":{"title":"优先队列","slug":"algorithm-maxpq"},"link":"http://lilpig.site/post/algorithm-table/","toc":[{"title":"有序符号表","id":"有序符号表","index":"1"},{"title":"二叉查找树","id":"二叉查找树","index":"2"},{"title":"散列表","id":"散列表","index":"3"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/algorithm-table/\" title=\"符号表的几种实现方式\">http://lilpig.site/post/algorithm-table/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}