{"title":"VSCode 扩展开发(八) 实战-Markdown图片上传","date":"2019-06-18T00:35:54.000Z","slug":"vscode-ext8","tags":["editor","vscode"],"categories":["VSCode"],"updated":"2019-06-21T11:42:48.000Z","content":"<h2 id=\"学习目标\">学习目标<a href=\"post/vscode-ext8#学习目标\"></a></h2><p>本章主要制作一个Markdown图片上传插件，使用UCloud的对象存储作为服务端。</p>\n<p>大概是这样的效果<br><img src=\"https://s2.ax1x.com/2019/06/18/VbHBuD.gif\" alt=\"效果\"></p>\n<h2 id=\"开篇寒暄\">开篇寒暄<a href=\"post/vscode-ext8#开篇寒暄\"></a></h2><p>第一篇中说的，我们在编写Markdown的时候，图片上传是一个问题，如果不整合到编辑器中的话会很麻烦，总要在编辑器和图片上传窗口中跳来跳去，还需要手动复制上传后的URL，并且粘到编辑器中。<br>先不说是否浪费时间，首先这用户体验就不是很好。所以我们编写一个自动上传图片的工具。</p>\n<h2 id=\"注册\">注册<a href=\"post/vscode-ext8#注册\"></a></h2><p>首先去UCloud中注册并通过实名认证。</p>\n<p>然后去开通对象存储服务，在<code>全部产品-&gt;存储-&gt;对象存储 UFile</code>中，然后选择<code>创建存储空间</code>，创建一个公开的空间，你填写的存储空间域名就是你的桶名。</p>\n<p>然后点击创建就好了，UCloud每月有免费的20G流量和存储空间，并且给每个账户50元的金额，个人记录笔记的博客足够用了。</p>\n<p>创建好后，点击你的头像，然后里面有一个<code>API秘钥</code>，进去之后获取你的公钥和私钥。</p>\n<p>至此，注册工作全部完成。</p>\n<h2 id=\"获取Node-SDK\">获取Node SDK<a href=\"post/vscode-ext8#获取Node-SDK\"></a></h2><p>UFile的NodeSDK在这里<code>https://github.com/ufilesdk-dev/ufile-nodejssdk</code></p>\n<p>下载下来，有三个目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ufile     -- UFile的nodejs SDK，其依赖的模块可以查看./ufile/package.json</span><br><span class=\"line\">./sdk_test  -- 几个借助nodejs SDK的测试脚本</span><br><span class=\"line\">./raw_test  -- 几个不借助nodejs SDK的测试脚本，适合阅读人群：需要探究细节，采用原生HTTP请求</span><br></pre></td></tr></table></figure></p>\n<p>我们只需要<code>ufile</code>这个文件夹，把他复制到我们的项目中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r ./ufile ~/vsc-extensions-tutorial-8</span><br></pre></td></tr></table></figure></p>\n<p>项目<a href=\"https://github.com/YHaoNan/vscode-tutorial/tree/master/vsc-extensions-tutorial-8\" target=\"_blank\" rel=\"noopener\">git地址</a></p>\n<p>按理来说，我们需要运行<code>npm</code>来将这个安装到项目中，但是还不行，我们先分析下这个sdk。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── ufile</span><br><span class=\"line\">│   ├── auth_client.js</span><br><span class=\"line\">│   ├── config.json</span><br><span class=\"line\">│   ├── helper.js</span><br><span class=\"line\">│   ├── http_request.js</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   ├── multi_upload.js</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── user_agent.json</span><br></pre></td></tr></table></figure></p>\n<p>这是sdk的整个目录结构，也挺简单，不过作为sdk的用户，我们肯定一眼就看到了和配置相关的<code>config.json</code>，看看里面有什么内容。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ucloud_public_key\"</span> : <span class=\"string\">\"你的公钥\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ucloud_private_key\"</span> : <span class=\"string\">\"你的私钥\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"proxy_suffix\"</span> : <span class=\"string\">\".cn-bj.ufileos.com\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个人下载的sdk中都把各自的公钥和私钥直接写进去了，还有域名后缀，我们不希望这三个参数是死的，因为如果是死的，别人用我们编写的插件时就会把图片上传到你的UFile服务中，这是不合理的。所以我们要把这三个参数留出来，让用户配置。</p>\n<p>既然官方提供了config文件，那就说明SDK的代码里肯定去读取了这些配置，我们在插件的代码里不方便修改这个配置文件，对于插件来说，如果SDK的上传方法能提供几个参数让我们直接把公钥和私钥什么的填写进去，对我们来说是个好事。</p>\n<p>但是显然官方没有提供，就需要我们自己阅读并修改官方的SDK代码了，我们在sdk的<code>auth_client.js</code>中发现了这几行：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> AuthClient = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.req = req;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.public_key = config[<span class=\"string\">'ucloud_public_key'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.private_key = config[<span class=\"string\">'ucloud_private_key'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.proxy_suffix = config[<span class=\"string\">'proxy_suffix'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.authorization = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为json就是js的原生对象，可以直接用<code>require</code>引入，然后构造AuthClient的时候去引用了这里面的值，通过字面意义和官方文档，知道了这个AuthClient就是用作和服务端做认证的一个类。</p>\n<p>所以我们直接修改这个类的定义，添加几个参数，而不是读取<code>config</code>即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> AuthClient = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,public_key,private_key,proxy_suffix</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.req = req;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.public_key = public_key;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.private_key = private_key;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.proxy_suffix = proxy_suffix;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.authorization = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以通过构造AuthClient传入各种认证需要的参数了，并且整个auth_client.js中对<code>config</code>没有别的引用了，所以可以把<code>var config = require(&#39;./config&#39;);</code>这行代码删除了。</p>\n<p>一切完成，我们开始向项目中安装这个库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ./ufile --save</span><br></pre></td></tr></table></figure></p>\n<p>安装完成，现在可以在我们的项目中引用这个库了。</p>\n<h2 id=\"编写代码\">编写代码<a href=\"post/vscode-ext8#编写代码\"></a></h2><p>我们打算提供图片上传并自动向编辑器中写入URL，图片压缩、备份功能。</p>\n<p>首先我们需要提供个命令让用户选择图片，然后才能进行下一步的上传操作：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.commands.registerTextEditorCommand(<span class=\"string\">'lilpig.pickandupload'</span>,(<span class=\"function\"><span class=\"params\">editor</span>=&gt;</span>&#123;</span><br><span class=\"line\">        vscode.window.showOpenDialog(options).then(<span class=\"function\"><span class=\"params\">uris</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(uris&amp;&amp;uris.length&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                vscode.window.showInformationMessage(uris[<span class=\"number\">0</span>].fsPath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><code>package.json</code>中的注册代码请自行编写。</p>\n<p>现在当你调用这个命令时，就会打开文件选择窗口，并且当你选中一个文件就会弹出这个文件的路径。</p>\n<p>下一步就是压缩和上传图片，在这之前，先给用户提供一些设置项：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"img.ucloud_private_key\":&#123;</span><br><span class=\"line\">    \"type\":\"string\",</span><br><span class=\"line\">    \"description\": \"The private key of your ucloud account.\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"img.ucloud_public_key\":&#123;</span><br><span class=\"line\">    \"type\":\"string\",</span><br><span class=\"line\">    \"description\": \"The public key of your ucloud account.\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"img.bucket_name\":&#123;</span><br><span class=\"line\">    \"type\":\"string\",</span><br><span class=\"line\">    \"description\": \"Your bucket name.\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"img.domain\":&#123;</span><br><span class=\"line\">    \"type\":\"string\",</span><br><span class=\"line\">    \"description\": \"The domain of your ufile space.\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"img.backupdir\":&#123;</span><br><span class=\"line\">    \"type\":\"string\",</span><br><span class=\"line\">    \"description\": \"The path that the backup of the image your uploaded.\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"img.imghandlerpath\":&#123;</span><br><span class=\"line\">    \"type\":\"string\",</span><br><span class=\"line\">    \"description\": \"The path of the script that can compress your pick image.\" </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们就可以在插件中读取这些配置了。</p>\n<p>关于压缩，由于没在Node上看到一个好用的，跨平台的图片压缩库，我们决定使用Python实现，在本项目下有一个叫<code>img-handler.py</code>的python脚本，用它可以实现图片的压缩，对应参数为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 img-handler.py 原始路径 压缩等级1-100 输出路径</span><br></pre></td></tr></table></figure></p>\n<p>因为jpg的压缩效果比较好，所以所有的图片都会被压缩成jpeg，该脚本依赖于<code>pillow</code>。</p>\n<p>脚本返回格式是<code>返回码:返回信息</code>，压缩成功的返回是<code>200:图片存储路径</code>，失败的则是<code>错误码:错误信息</code>。</p>\n<p>该脚本在<a href=\"https://github.com/YHaoNan/vscode-tutorial/blob/master/vsc-extensions-tutorial-8/src/img-handler.py\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>再来看看Ufile的SDK使用方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先使用HttpRequest构造一个请求信息，参数是协议，上传后存储的路径，桶名，上传图片的名字，上传的图片在本地的路径</span><br><span class=\"line\">const req = new HttpRequest(&apos;POST&apos;,&apos;/&apos;,bucketName,upload_name,local_path);</span><br><span class=\"line\">//然后创建一个AuthClient，参数分别是请求对象，公钥，私钥和域名</span><br><span class=\"line\">const client = new AuthClient(req,ucloudPublicKey,ucloudPrivateKey,ucloudDomain);</span><br><span class=\"line\"></span><br><span class=\"line\">client.SendRequest((res:any)=&gt;&#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">    if(res instanceof Error)&#123;</span><br><span class=\"line\">        //上传错误 代码执行错误</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(res.statusCode != 200)&#123;</span><br><span class=\"line\">        //上传错误 返回了错误信息</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //否则上传成功</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>然后我们就可以编写代码了，先编写一个简单的工具类读取配置信息：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> getConfig = &lt;T&gt;(key: <span class=\"built_in\">string</span>): <span class=\"function\"><span class=\"params\">T</span>=&gt;</span>&lt;T&gt;vscode.workspace.getConfiguration().get&lt;T&gt;(key);</span><br></pre></td></tr></table></figure>\n<p>然后编写<code>img-upload.ts</code>用于处理图像并上传：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HttpRequest = <span class=\"built_in\">require</span>(<span class=\"string\">'ufile'</span>).HttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">const</span> AuthClient = <span class=\"built_in\">require</span>(<span class=\"string\">'ufile'</span>).AuthClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;exec&#125; <span class=\"keyword\">from</span> <span class=\"string\">'child_process'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;getConfig&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; pathToFileURL &#125; <span class=\"keyword\">from</span> <span class=\"string\">'url'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;join&#125; <span class=\"keyword\">from</span> <span class=\"string\">'path'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">source:<span class=\"built_in\">string</span>,compressLevel:<span class=\"built_in\">number</span>,callback:(err:<span class=\"built_in\">string</span>|<span class=\"literal\">undefined</span>,data:<span class=\"built_in\">string</span>|<span class=\"literal\">undefined</span>)=&gt;<span class=\"built_in\">void</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//读取相关配置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler_path = &lt;<span class=\"built_in\">string</span>&gt;getConfig(<span class=\"string\">'img.imghandlerpath'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ucloudPublicKey = &lt;<span class=\"built_in\">string</span>&gt;getConfig(<span class=\"string\">'img.ucloud_public_key'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ucloudPrivateKey = &lt;<span class=\"built_in\">string</span>&gt;getConfig(<span class=\"string\">'img.ucloud_private_key'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bucketName = &lt;<span class=\"built_in\">string</span>&gt;getConfig(<span class=\"string\">'img.bucketname'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ucloudDomain = &lt;<span class=\"built_in\">string</span>&gt;getConfig(<span class=\"string\">'img.domain'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> backupDir = &lt;<span class=\"built_in\">string</span>&gt;getConfig(<span class=\"string\">'img.backupdir'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成图片上传后的名字 img-unix时间戳.jpg</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> upload_name = <span class=\"string\">'img-'</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()+<span class=\"string\">'.jpg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行压缩脚本的pyhton命令 完整命令是 python3 压缩脚本路径 待上传的文件路径 压缩等级 备份文件夹/$upload_name</span></span><br><span class=\"line\">    <span class=\"comment\">//用join是因为不同平台的文件夹分隔符不一样</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> command = <span class=\"string\">'python3 \"'</span>+handler_path+<span class=\"string\">'\" \"'</span>+ source+<span class=\"string\">'\" '</span>+compressLevel+<span class=\"string\">' \"'</span>+join(backupDir,upload_name)+<span class=\"string\">'\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行命令</span></span><br><span class=\"line\">    exec(command,<span class=\"function\">(<span class=\"params\">err,stdout,stderr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            callback(<span class=\"string\">\"调用压缩脚本出错：\"</span>+stderr,<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stdout)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> upload_img_path = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = stdout.split(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result.length&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                callback(<span class=\"string\">\"脚本返回结果出错，返回：\"</span>+stdout,<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果返回的是正确结果</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result[<span class=\"number\">0</span>]==<span class=\"string\">'200'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取压缩后的图片路径</span></span><br><span class=\"line\">                upload_img_path = result[<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(upload_name,upload_img_path);</span><br><span class=\"line\">                <span class=\"comment\">//构造请求</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> req = <span class=\"keyword\">new</span> HttpRequest(<span class=\"string\">'POST'</span>,<span class=\"string\">'/'</span>,bucketName,upload_name,backupDir+<span class=\"string\">'/'</span>+upload_name);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> AuthClient(req,ucloudPublicKey,ucloudPrivateKey,ucloudDomain);</span><br><span class=\"line\">                client.SendRequest(<span class=\"function\">(<span class=\"params\">res:<span class=\"built_in\">any</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>)&#123;</span><br><span class=\"line\">                        callback(<span class=\"string\">'上传错误：'</span>+res.message,<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(res.statusCode != <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                        callback(<span class=\"string\">'上传错误：'</span>+res.statusCode,<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    callback(<span class=\"literal\">undefined</span>,<span class=\"string\">'http://'</span>+bucketName+ucloudDomain+<span class=\"string\">'/'</span>+upload_name);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                callback(<span class=\"string\">\"压缩错误：\"</span>+result[<span class=\"number\">1</span>],<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>img-upload.ts</code>中向外提供了一个handle函数用于压缩并上传图像，并要求传入一个callback，这个callback和nodejs大部分的callback差不多，就是<code>(err,data)=&gt;{}</code>这种的，如果有错误，err就有值，data没有值，如果没有错误，err无值，data有值。</p>\n<p>这样就编写好了，然后再在<code>extension.ts</code>中调用该方法：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.commands.registerTextEditorCommand(<span class=\"string\">'lilpig.pickandupload'</span>,(<span class=\"function\"><span class=\"params\">editor</span>=&gt;</span>&#123;</span><br><span class=\"line\">        vscode.window.showOpenDialog(options).then(<span class=\"function\"><span class=\"params\">uris</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(uris&amp;&amp;uris.length&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                vscode.window.showInputBox(&#123;prompt:<span class=\"string\">'压缩等级1-99'</span>,value:<span class=\"string\">'50'</span>&#125;).then(<span class=\"function\"><span class=\"params\">str</span>=&gt;</span>&#123;</span><br><span class=\"line\">                    handle(uris[<span class=\"number\">0</span>].fsPath,<span class=\"built_in\">parseInt</span>(str <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>),<span class=\"function\">(<span class=\"params\">err,data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                            vscode.window.showErrorMessage(err);</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            editor.insertSnippet(<span class=\"keyword\">new</span> vscode.SnippetString(<span class=\"string\">'![$&#123;1:图片&#125;]('</span>+data+<span class=\"string\">')'</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>这括号真吓人，回调地狱啊哈哈哈哈。</p>\n<p>这样就写好了，你还可以根据前面学到的知识扩展它，比如加个加载条等。</p>\n<p><strong><a href=\"/post/vscode-ext1#目录\">点此返回目录</a></strong></p>\n","prev":{"title":"VSCode 扩展开发(九) Editor操作","slug":"vscode-ext9"},"next":{"title":"VSCode 扩展开发(七) 实战-翻译插件","slug":"vscode-ext7"},"link":"http://lilpig.site/post/vscode-ext8/","toc":[{"title":"学习目标","id":"学习目标","index":"1"},{"title":"开篇寒暄","id":"开篇寒暄","index":"2"},{"title":"注册","id":"注册","index":"3"},{"title":"获取Node SDK","id":"获取Node-SDK","index":"4"},{"title":"编写代码","id":"编写代码","index":"5"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/vscode-ext8/\" title=\"VSCode 扩展开发(八) 实战-Markdown图片上传\">http://lilpig.site/post/vscode-ext8/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}