{"title":"xargs和tr","date":"2019-09-14T00:11:27.000Z","slug":"shell-commands2","tags":["shell"],"categories":["Shell"],"updated":"2019-09-14T01:04:02.381Z","content":"<h2 id=\"xargs\">xargs<a href=\"post/shell-commands2#xargs\"></a></h2><p>xargs是一个把stdin转换成参数列表的工具。</p>\n<p>比如有如下一个文件<code>args</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1</span><br><span class=\"line\">arg2</span><br><span class=\"line\">arg3</span><br></pre></td></tr></table></figure></p>\n<p>你想把其中每一行都输出一次（而不是一次全部输出），那么xargs就派上了用场。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat args | xargs -n 1 <span class=\"built_in\">echo</span></span><br></pre></td></tr></table></figure>\n<p>xargs指定了一个<code>-n</code>参数，意思是每一个参数执行一次，上面的示例中xargs会把文件内容根据回车分割成三份，并把每一份交给echo命令执行一次。</p>\n<p>最终的结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1</span><br><span class=\"line\">arg2</span><br><span class=\"line\">arg3</span><br></pre></td></tr></table></figure></p>\n<p>虽然这看起来和直接cat没有区别，但是本质上它们是不一样的。</p>\n<p>把上面的命令稍微修改一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat args | xargs -n 2 <span class=\"built_in\">echo</span></span><br></pre></td></tr></table></figure></p>\n<p>输出的结果是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1 arg2</span><br><span class=\"line\">arg3</span><br></pre></td></tr></table></figure></p>\n<p>显然，xargs一次给echo命令提交了两个参数。</p>\n<h3 id=\"指定分隔符\">指定分隔符<a href=\"post/shell-commands2#指定分隔符\"></a></h3><p>默认的分隔符可能是回车，可能是空格，可能是<code>\\0</code>。但是很多时候我们需要自己指定。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd | xargs -n 1</span><br></pre></td></tr></table></figure>\n<p>上面的代码通过xargs输出<code>/etc/passwd</code>的每一行，这个文件熟悉Linux的应该都知道，每一行是用<code>:</code>分割的。我们用xargs来分割它。</p>\n<p>xargs用<code>-d</code>参数指定分隔符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd | xargs -n 1 | xargs -n 1 -d :</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定参数位置\">指定参数位置<a href=\"post/shell-commands2#指定参数位置\"></a></h3><p>假如我们需要编写如下功能，输出每一个参数的前后加上<code>@</code>，也就是说xargs需要把参数放到中间，xargs提供了占位符功能实现这一需求。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat args | xargs -I &#123;&#125; <span class=\"built_in\">echo</span> @ &#123;&#125; @</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ arg1 @</span><br><span class=\"line\">@ arg2 @</span><br><span class=\"line\">@ arg3 @</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结合find\">结合find<a href=\"post/shell-commands2#结合find\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">'*.txt'</span> -print0 | xargs -0 rm -f</span><br></pre></td></tr></table></figure>\n<p>如上命令删除当前目录下所有txt文件。<code>-print0</code>是用<code>\\0</code>分割，而xargs的<code>-0</code>参数也是将分隔符设置成<code>\\0</code>。一定不要设置简单的分隔符，或使用默认的，这样可能会误删文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~/<span class=\"built_in\">source</span>/gesture4book/app/src/main/ -<span class=\"built_in\">type</span> f -regex <span class=\"string\">'.*\\.\\(java\\|xml\\)$'</span> | xargs wc -l</span><br></pre></td></tr></table></figure>\n<p>如上命令统计某个项目下的代码行数。</p>\n<h3 id=\"循环和xargs\">循环和xargs<a href=\"post/shell-commands2#循环和xargs\"></a></h3><p>xargs不能执行多条语句，而循环可以，所以有的时候用循环也不失为一个好办法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat args | ( <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> arg; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$arg</span>; <span class=\"keyword\">done</span> )</span><br></pre></td></tr></table></figure>\n<h2 id=\"tr\">tr<a href=\"post/shell-commands2#tr\"></a></h2><p>tr用于文本转换，将一个字符串转换成另一个字符串。</p>\n<h3 id=\"大小写转换\">大小写转换<a href=\"post/shell-commands2#大小写转换\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat args | tr <span class=\"string\">'a-z'</span> <span class=\"string\">'A-Z'</span></span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARG1</span><br><span class=\"line\">ARG2</span><br><span class=\"line\">ARG3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ROT13\">ROT13<a href=\"post/shell-commands2#ROT13\"></a></h3><p>ROT13是一种简单的加密方法，通过把所有字母后移13位，比如a变成n。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Yahoo~&quot; | tr &apos;a-zA-Z&apos; &apos;n-za-mN-ZA-M&apos;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lnubb~</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除指定字符集\">删除指定字符集<a href=\"post/shell-commands2#删除指定字符集\"></a></h3><p>比如我们的输入中有些无关紧要的数字：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;Hello12,Wo1r34ld34!12&apos;</span><br></pre></td></tr></table></figure></p>\n<p>我们想通过tr删除掉：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Hello12,Wo1r34ld34!12'</span> | tr -d [0-9]</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello,World!</span><br></pre></td></tr></table></figure></p>\n<p>除了<code>-d</code>删除，也可以用补集的方式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Hello12,Wo1r34ld34!12'</span> | tr -d -c [0-9]</span><br></pre></td></tr></table></figure></p>\n<p>这样的话就只会留下数字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;Hello12,Wo1r34ld34!12&apos; | tr -c [0-9] &apos; &apos;</span><br></pre></td></tr></table></figure>\n<p>这样的话会把所有不在集合1里的字符替换成空格。结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12   1 34  34 12</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"去除多余字符\">去除多余字符<a href=\"post/shell-commands2#去除多余字符\"></a></h3><p>刚刚我们利用补集把所有非数字变成了空格，但是这样参差不齐的空格有点丑，我们想只留下一个。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Hello12,Wo1r34ld34!12'</span> | tr -c [0-9] <span class=\"string\">' '</span> | tr -s <span class=\"string\">' '</span></span><br></pre></td></tr></table></figure>\n<p><code>-s</code>在遇到多个指定字符连续排列时，会只留下一个指定字符，删除多余的。常用来删除多余空格和换行符。</p>\n<h3 id=\"计算总和\">计算总和<a href=\"post/shell-commands2#计算总和\"></a></h3><p>假设我们有这样一个文本<code>nums</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frist 1</span><br><span class=\"line\">second 2</span><br><span class=\"line\">third 3</span><br></pre></td></tr></table></figure></p>\n<p>我们想把所有的数字加起来：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat nums | tr -d [a-z] | <span class=\"built_in\">echo</span> <span class=\"string\">\"total: $[ <span class=\"variable\">$( tr ' ' '+'  )</span> ]\"</span></span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"VSCode在Ubuntu上交换Capslock和Esc","slug":"vscode-keyboard-dispatch"},"next":{"title":"cat和find","slug":"shell-commands"},"link":"http://lilpig.site/post/shell-commands2/","toc":[{"title":"xargs","id":"xargs","index":"1","children":[{"title":"指定分隔符","id":"指定分隔符","index":"1.1"},{"title":"指定参数位置","id":"指定参数位置","index":"1.2"},{"title":"结合find","id":"结合find","index":"1.3"},{"title":"循环和xargs","id":"循环和xargs","index":"1.4"}]},{"title":"tr","id":"tr","index":"2","children":[{"title":"大小写转换","id":"大小写转换","index":"2.1"},{"title":"ROT13","id":"ROT13","index":"2.2"},{"title":"删除指定字符集","id":"删除指定字符集","index":"2.3"},{"title":"去除多余字符","id":"去除多余字符","index":"2.4"},{"title":"计算总和","id":"计算总和","index":"2.5"}]}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/shell-commands2/\" title=\"xargs和tr\">http://lilpig.site/post/shell-commands2/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}