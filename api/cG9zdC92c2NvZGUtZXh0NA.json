{"title":"VSCode 扩展开发(四) Output、智能提示和Snippets","date":"2019-06-03T23:47:54.000Z","slug":"vscode-ext4","tags":["editor","vscode"],"categories":["VSCode"],"updated":"2019-06-07T01:21:36.976Z","content":"<h2 id=\"学习目标\">学习目标<a href=\"post/vscode-ext4#学习目标\"></a></h2><p>经过本章，你会了解到如何使用VSCode API操作OutputChannel，以及如何构建一个类似Emmet的智能代码生成器与一些Snippets方面的内容。</p>\n<h2 id=\"开篇寒暄\">开篇寒暄<a href=\"post/vscode-ext4#开篇寒暄\"></a></h2><p>我们平常使用编辑器，最常用到的两个东西就是控制台和编辑器，开发插件的时候我们也有大部分需求是要操作它们的。所以了解如何操作它们是非常重要的一件事。</p>\n<p>并且VSCode面向插件提供了非常多的好用的<a href=\"https://code.visualstudio.com/api/references/vscode-api\" target=\"_blank\" rel=\"noopener\">API</a>，这些API几乎囊括了VSCode的所有功能，我们可以使用它们开发我们的插件，对VSCode进行任意功能的扩展。</p>\n<h2 id=\"OutputChannel\">OutputChannel<a href=\"post/vscode-ext4#OutputChannel\"></a></h2><p>Debug的时候，如果逻辑不是很复杂，不是很难发现Bug，我们基本上就会直接采用控制台输出的方式找问题，而不会去采用BreakPoint。<br>除了调试信息，一些日志信息也会被我们输出到控制台，方便我们观察程序的运行轨迹，所以控制台可是我们的好伙伴哦。如果你说你没用过控制台，那真的是没人会信。</p>\n<p>试想，如果我们再为一门语言设计VSCode插件，让它能脱离终端，直接在VSCode中运行，那么我们就要把每次执行程序所有输出的信息都放到VSCode的Output面板中。</p>\n<p>那它究竟怎么用呢？我们来新建一个项目看看，地址：<a href=\"https://github.com/YHaoNan/vscode-tutorial/tree/master/vsc-extensions-tutorial-4\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"创建OutputChannel、添加信息\">创建OutputChannel、添加信息<a href=\"post/vscode-ext4#创建OutputChannel、添加信息\"></a></h3><p><strong>注意：以后关于<code>package.json</code>中的声明Command，我基本上会省略，除非有新东西需要配置。各位自行去声明。</strong>  </p>\n<p>我们可以通过VSCode的<code>vscode.window.createOutputChannel</code>去创建一个输出面板。如下：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.commands.registerCommand(<span class=\"string\">'extension.runBrainfuck'</span>,<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> output = vscode.window.createOutputChannel(<span class=\"string\">'BrainFuck Interpreter'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>我们向方法中传递一个字符串，这是输出面板的名称，然后我们就可以引用<code>output</code>对象对面板进行操作了。</p>\n<p>VSCode的OutputChannel提供了如下API：</p>\n<h5 id=\"属性\">属性<a href=\"post/vscode-ext4#属性\"></a></h5><ul>\n<li>name: string<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5></li>\n<li>append(value: string): void<br>  向输出面板中添加字符串</li>\n<li>appendLine(value: string): void<br>  向输出面板中添加字符串并自动换行</li>\n<li>clear(): void<br>  清空输出面板中的内容</li>\n<li>dispose(): void<br>  处理和释放相关资源</li>\n<li>hide(): void<br>  隐藏面板</li>\n<li>show(preserveFocus?:boolean): void<br>  显示面板<br>  当preserveFocus为true的时候不获取焦点</li>\n<li><del>show(column?:ViewColumn,preserveFocus?:boolean): void</del><br>  方法已经过时</li>\n</ul>\n<p>我们尝试着往输出面板中输出几行信息。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.commands.registerCommand(<span class=\"string\">'extension.runBrainfuck'</span>,<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> output = vscode.window.createOutputChannel(<span class=\"string\">'BrainFuck Interpreter'</span>);</span><br><span class=\"line\">        output.show();</span><br><span class=\"line\">        output.append(<span class=\"string\">'Helo '</span>);</span><br><span class=\"line\">        output.appendLine(<span class=\"string\">'vsc~'</span>);</span><br><span class=\"line\">        output.appendLine(<span class=\"string\">'Helo vsc~'</span>);</span><br><span class=\"line\">        output.append(<span class=\"string\">'Helo Helo~'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>得出如下结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Helo vsc~</span><br><span class=\"line\">Helo vsc~</span><br><span class=\"line\">Helo Helo~</span><br></pre></td></tr></table></figure></p>\n<p>可以说明，append确实是不换行的，而appendLine只是在末尾换行，如果前面用的是append，并且没有换行符的话，appendLine并不会另起一行。</p>\n<p>光是这么学不好玩，我们来设计一门语言的VSCode插件，并使用Output面板输出运行结果。什么？你问我设计什么语言的？不知道你听没听过BrainFuck，如果没听过请走<a href=\"https://segmentfault.com/a/1190000000395225?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">这边</a>。</p>\n<p><em>PS:以下可能需要一些Brainfuck的知识和一定的阅读源码能力</em></p>\n<p>关于Brainfuck(以后简称bf)解释器，由于时间关系，我没有自己写，而是引用了一个开源的基于TypeScript的解释器<code>brnfck</code>，repo在<a href=\"https://github.com/tobiasholler/brnfck\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>我们分析一下这个解释器的运行原理，整个解释器源码不多：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TextDecoder &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"util\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OutputChannel &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vscode\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileBrainfuck</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> compiledCode: <span class=\"built_in\">string</span> = <span class=\"string\">\"(function(r,w)&#123;var i=0;var t=new Uint8Array(30000);\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i: <span class=\"built_in\">number</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> countChars = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">char: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (code.charAt(i) == char) &#123;</span><br><span class=\"line\">            c++</span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; code.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (code.charAt(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"&lt;\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"i-=\"</span> + countChars(<span class=\"string\">\"&lt;\"</span>) + <span class=\"string\">\";\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"&gt;\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"i+=\"</span> + countChars(<span class=\"string\">\"&gt;\"</span>) + <span class=\"string\">\";\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"+\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"t[i]+=\"</span> + countChars(<span class=\"string\">\"+\"</span>) + <span class=\"string\">\";\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"-\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"t[i]-=\"</span> + countChars(<span class=\"string\">\"-\"</span>) + <span class=\"string\">\";\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\".\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"w(t[i]);\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\",\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"t[i]=r();\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"[\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"while(t[i]!=0)&#123;\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"]\"</span>:</span><br><span class=\"line\">                compiledCode += <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compiledCode + <span class=\"string\">\"return t;&#125;)\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileBrainfuckToFunction</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>): (<span class=\"params\">readFunction: () =&gt; <span class=\"built_in\">number</span>, writeFunction: (byte: <span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">void</span></span>) =&gt; <span class=\"title\">Uint8Array</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(compileBrainfuck(code))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于用不到该方法所以不用管它</span></span><br><span class=\"line\"><span class=\"comment\">// export function compileBrainfuckToStandalone(code: string): string &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return '#!/usr/bin/env node\\n(function()&#123;var a=0;' + compileBrainfuck(code) + '(function()&#123;try&#123;return process.argv[2].charCodeAt(a++);&#125;catch(e)&#123;return 0;&#125;&#125;,function(b)&#123;process.stdout.write(String.fromCharCode(b))&#125;);&#125;)();'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看出这个哥们儿写的代码确实很有趣，它并没有采用大多数人的直接对bf源码进行解释执行的方法，而是利用脚本语言的特性，将bf翻译成了JS代码，并且提供读写方法供外界接入。</p>\n<p>它提供了<code>compileBrainfuck</code>方法把bf代码转换成字符串类型的JavaScript代码的字符串，并且通过<code>compileBrainfuckToFunction</code>方法调用eval来执行它，执行它后会返回一个签名为<code>(readFunction: () =&gt; number, writeFunction: (byte: number) =&gt; void) =&gt; Uint8Array</code>的Function，它有两个参数，第一个是读取方法，也就是bf需要从控制台读取一个字符时会回调的方法，你需要返回该字符在字符表中的位置，第二个方法是写入方法，改方法是bf需要向控制台输出一个字符时的回调方法，输出的字符就是那个<code>byte: number</code>，是该字符在字符表中的位置。</p>\n<p>仔细的看一下，如果我们有这样一段bf源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++++++ [ &gt; ++++++++++ &lt; - ] &gt; +++++ .</span><br></pre></td></tr></table></figure></p>\n<p>则它最终会变成这样的js代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了方便阅读我加上了换行，实际生成的方法是没有换行的。</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r,w</span>)</span>&#123;<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;<span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"number\">30000</span>);</span><br><span class=\"line\">t[i]+=<span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(t[i]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    i+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    t[i]=<span class=\"number\">10</span>;</span><br><span class=\"line\">    i-=<span class=\"number\">1</span>;</span><br><span class=\"line\">    t[i]-=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">t+=<span class=\"number\">1</span>;</span><br><span class=\"line\">t[i]+=<span class=\"number\">5</span>;</span><br><span class=\"line\">w(t[i]);</span><br><span class=\"line\"><span class=\"keyword\">return</span> t;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>现在请用你的人脑作为JS解释器，猜猜执行到最后<code>t[i]</code>是什么？其实最后i就是在第二个单元，也就是<code>t[1]</code>中循环6次，每次加10，最后再加5对吧，而且用<code>t[0]</code>作为循环条件，那么最后的<code>t[1]</code>一定是65。那么65对应的字符就是“A”，所以调用<code>w(t[i])</code>就应该在控制台输出A。</p>\n<p>分析完了这个解释器，我们开始考虑插件的事，输出方法中我们正好可以直接调用OutputChannel的append方法进行输出，但是关于输入，因为OutputChannel不支持，我们先不考虑，让它一直返回0。于是我们创建了一个<code>coderunner.ts</code>，写入了如下代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> bf <span class=\"keyword\">from</span> <span class=\"string\">'./brainfuck'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runCode</span>(<span class=\"params\">code: <span class=\"built_in\">string</span>,outputChannel: vscode.OutputChannel</span>)</span>&#123;</span><br><span class=\"line\">    bf.compileBrainfuckToFunction(code)(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>&#125;,<span class=\"function\">(<span class=\"params\">byte:<span class=\"built_in\">number</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">        outputChannel.append(<span class=\"built_in\">String</span>.fromCharCode(byte));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在<code>extensions.ts</code>中这样调用它：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> runner <span class=\"keyword\">from</span> <span class=\"string\">'./coderunner'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span>(<span class=\"params\">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class=\"line\">\tcontext.subscriptions.push(</span><br><span class=\"line\">\t\tvscode.commands.registerCommand(<span class=\"string\">'extension.runBrainfuck'</span>,<span class=\"function\">(<span class=\"params\">path</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> outputChannel = vscode.window.createOutputChannel(<span class=\"string\">'BrainFuck Interpreter'</span>);</span><br><span class=\"line\">\t\t\toutputChannel.show();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> sourceCode = fs.readFileSync(path.path).toString();</span><br><span class=\"line\">\t\t\t\trunner.runCode(sourceCode,outputChannel);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t\t\t\toutputChannel.appendLine(<span class=\"string\">'Error:'</span>+e.message);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deactivate</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们决定使用昨天最后介绍的办法获得文件路径，就是给<code>registerCommand</code>方法一个参数那个，并直接使用nodejs的<code>fs</code>模块获取它的内容，并丢到<code>brainfuck-js</code>中处理。</p>\n<p>运行，新建一个文件，写入如下Brainfuck代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</span><br></pre></td></tr></table></figure></p>\n<p>然后执行命令，会输出<code>Hello World!</code>。</p>\n<div class=\"article-img\"><p><img src=\"http://nsimg.cn-bj.ufileos.com/img-1559694977826.png\" alt=\"img\" data-zoomable></p></div>\n<h2 id=\"输入功能\">输入功能<a href=\"post/vscode-ext4#输入功能\"></a></h2><p>上面的插件运行的一直不错，但是直到有一天你遇到了这样的bf代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; , &lt; ++++ [ &gt; -------- &lt; - ] &gt; .</span><br></pre></td></tr></table></figure></p>\n<p>这个代码要求输入一个字符(我们假定该字符是一个小写英文字母)，然后输出该字符的大写，这时候我们的bf解释器就不好用了，因为我们的bf解释器还没有输入功能呢！</p>\n<p>所以，现在需要给我们的插件添加一个输入功能，但是OutputChannel是不可输入的，如果你尝试输入，它会告诉你不能在只读编辑器中输入。经过再三考虑，我们决定使用VSCode提供的<code>vscode.window.showInputBox</code>来完成这个功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.commands.registerCommand(<span class=\"string\">'extension.runBrainfuck'</span>,<span class=\"keyword\">async</span> (path)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> vscode.window.showInputBox(&#123;prompt: <span class=\"string\">'Input some character'</span>&#125;).then(<span class=\"function\"><span class=\"params\">input</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//To make sure input is not undefined</span></span><br><span class=\"line\">            input = input?input:<span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> outputChannel = vscode.window.createOutputChannel(<span class=\"string\">'BrainFuck Interpreter'</span>);</span><br><span class=\"line\">            outputChannel.show();</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> sourceCode = fs.readFileSync(path.path).toString();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> output = runner.runCode(sourceCode,input,outputChannel);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">                outputChannel.appendLine(<span class=\"string\">'Error:'</span>+e.message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>prompt是inputbox的提示信息，然后我们还需要修改<code>coderunner.runCode</code>的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runCode</span>(<span class=\"params\">code: <span class=\"built_in\">string</span>,input:<span class=\"built_in\">string</span>,outputChannel: vscode.OutputChannel</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    bf.compileBrainfuckToFunction(code)(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(counter&lt;input.length)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> input.charCodeAt(counter++);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;,<span class=\"function\">(<span class=\"params\">byte:<span class=\"built_in\">number</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">        outputChannel.append(<span class=\"built_in\">String</span>.fromCharCode(byte));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为bf中的输入和输出都是以一个字符为基准的，所以在<code>runCode</code>方法中提供一个counter用于每次取出输入中的一个字符。</p>\n<p>现在试着使用我们的插件运行刚刚的bf代码，会提示你输入，我们输入a，会输出大写的A。</p>\n<div class=\"article-img\"><p><img src=\"http://nsimg.cn-bj.ufileos.com/img-1559784487604.png\" alt=\"img\" data-zoomable></p></div>\n<h2 id=\"打造极致bf编码体验\">打造极致bf编码体验<a href=\"post/vscode-ext4#打造极致bf编码体验\"></a></h2><p>你用这个插件开开心心的写了一周bf(谁会这么干？？xD)，但是由于bf代码的可读性实在不高，经常写写着就不知道自己写的是啥了，而且遇到连续几个相同的符号一个一个敲的时候还得在心里计数。基于以上问题，我们打算改造一下bf的编码体验。</p>\n<p>首先我们打算加入Snippet功能，也就是输入一小段，自动补齐一大段。用于解决bf中的连续符号排列问题。我们的目标是，假如我们在编辑器中输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30+</span><br></pre></td></tr></table></figure></p>\n<p>然后按下tab，就会自动生成30个<code>+</code>出来，如果你搞过前端开发，这和前端必备插件<code>emmet</code>很像。</p>\n<p>这会很大程度减轻我们的工作量，而且我们不用在心里数各种bf运算符的个数了。比如这个代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++++++ [ &gt; ++++++++++ &lt; - ] &gt; +++++ .</span><br></pre></td></tr></table></figure></p>\n<p>我们的插件要达到这样的输入效果：</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/06/06/VacDcd.gif\" alt=\"效果\" data-zoomable></p></div>\n<p>是不是很炫酷呢？</p>\n<p>做到这个效果，需要用到<code>CompletionItemProvider</code>这个东西，我们需要在<code>extension.ts</code>中注册它：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.languages.registerCompletionItemProvider(</span><br><span class=\"line\">        &#123;language:  <span class=\"string\">'brainfuck'</span>, scheme: <span class=\"string\">'file'</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ac.BrainfuckCompletionItemProvider(),</span><br><span class=\"line\">        <span class=\"string\">'+'</span>,<span class=\"string\">'-'</span>,<span class=\"string\">'['</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>首先，因为我们针对语言开发插件，所以要指定一个语言，可以看到<code>registerCompletionItemProvider</code>的第一个参数就是语言和一个scheme头。但是我估计除了咱们，没人会设计brainfuck的插件，也没人会用VSCode写brainfuck，所以VSCode肯定不会认识brainfuck是啥。所以我们需要再去<code>contributes.languages</code>中注册个语言。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"languages\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"brainfuck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"aliases\"</span>: [<span class=\"string\">\"Brainfuck\"</span>,<span class=\"string\">\"BrainFuck\"</span>,<span class=\"string\">\"brainfuck\"</span>,<span class=\"string\">\"bf\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"extensions\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\".bf\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>id</code>即该语言的唯一标识，<code>aliases</code>是该语言的别名，在需要输入的地方输入别名时依旧能找到该语言，<code>extensions</code>是扩展名，我们写<code>.bf</code>。</p>\n<p>然后回到刚刚<code>extensions.ts</code>那里。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.subscriptions.push(</span><br><span class=\"line\">    vscode.languages.registerCompletionItemProvider(</span><br><span class=\"line\">        &#123;language:  <span class=\"string\">'brainfuck'</span>, scheme: <span class=\"string\">'file'</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ac.BrainfuckCompletionItemProvider(),</span><br><span class=\"line\">        <span class=\"string\">'+'</span>,<span class=\"string\">'-'</span>,<span class=\"string\">'['</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>第二个参数是我们自己定义的一个<code>CompletionItemProvider</code>，这是一个用于进行代码提示和补全的Provider，VSCode的API中有很多这样的Provider，还有的用于跳转定义、弹出悬浮提示等，这类Provider一般都是要实现一个Provider子类，然后并不用去<code>package.json</code>中去声明什么的。</p>\n<p>第三个参数是一个可变长参数，是触发智能提示的关键字，只要在编辑器中一输入这个关键字，我们的<code>CompletionItemProvider</code>的<code>provideCompletionItems</code>方法就会被触发，VSCode需要我们在这个方法中返回一个或一些智能提示选项，然后它去展示给用户。我们定义了三个关键字分别是<code>+</code>、<code>-</code>和<code>[</code>。</p>\n<p>然后我们来看一下<code>provideCompletionItems</code>方法长啥样：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">provideCompletionItems(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext)</span><br><span class=\"line\"></span><br><span class=\"line\">返回值</span><br><span class=\"line\">vscode.ProviderResult&lt;vscode.CompletionItem[] | vscode.CompletionList&gt;</span><br></pre></td></tr></table></figure></p>\n<p>它有四个参数，我们这里只关心第一个和第二个就好了，其他的您可以去官方文档中查看。</p>\n<p>第一个参数是方法被触发时当前编辑器的文档对象，我们主要用它来分析一些带有语义的东西，比如我们的<code>30+</code>，要分析出生成多少个加号。</p>\n<p>第二个参数则是当前输入关键字的Position对象，你可以获取到当前的行和当前的位置，主要和第一个参数配合使用。</p>\n<p>注意，因为我们知道VSCode的插件一开始不会被加载，得发生一定事件时被加载，比如<code>OnCommand</code>。现在我们需要当打开一个bf文件时加载插件，就需要在<code>activationEvents</code>中加入这个。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"onLanguage:brainfuck\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"思路及实现\">思路及实现<a href=\"post/vscode-ext4#思路及实现\"></a></h2><p>先说加和减运算符，因为这两个是最复杂的，我们把最复杂的解决了，简单的也就迎刃而解了。</p>\n<p>我们知道，经过我们在<code>extension.ts</code>中的注册，现在只要在编辑器中一输入<code>+</code>和<code>-</code>号的时候就会触发<code>provideCompletionItems</code>方法，所以我们只要从这里面找到前面的若干位数字，然后计算出生成的加号和减号的个数就好了。</p>\n<p>我们希望以单词为基本单位处理用户的输入，然后产生代码提示。</p>\n<p>从关键字，也就是本次输入的加号和减号的位置开始，往前寻找，一旦找到空格或者到了行首，我们就把那个位置记做起始位置，然后从一行中截取起始位置到关键字位置的字符串，作为当前的单词，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abcde 56+</span><br></pre></td></tr></table></figure></p>\n<p>输入加号后，当前单词就是<code>56+</code>。</p>\n<p>但是，用户输入的单词并不一定是规则的，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abcde abs56+</span><br></pre></td></tr></table></figure></p>\n<p>这种情况下，我们就不返回任何代码提示。</p>\n<p>除此之外，我发现你输入键盘上的<code>A-Z</code>或者其小写形式还有一些其他字符时，也会触发这个方法，再加上之前的不规则输入情况，为了避免错误提示，我们使用正则来判断当前单词是否符合规则，如果符合就生成并返回代码提示，否则就不做任何响应。</p>\n<p>那我就直接放代码了</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CompletionItem &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vscode-debugadapter'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stringify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'querystring'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> SUPPORT_OPT = [<span class=\"string\">'\\\\+'</span>,<span class=\"string\">'\\\\-'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckCompletionItemProvider <span class=\"keyword\">implements</span> vscode.CompletionItemProvider&#123;</span><br><span class=\"line\">    provideCompletionItems(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext): vscode.ProviderResult&lt;vscode.CompletionItem[] | vscode.CompletionList&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> completion: vscode.CompletionItem | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当前行文本</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentLineText = <span class=\"built_in\">document</span>.lineAt(position.line).text;</span><br><span class=\"line\">        <span class=\"comment\">//当前单词第一个字符位置 position.character中的下标指向的实际上是关键字的下一个(不知道这么说准确不准确)</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentTokenFisrtCharIndex = findCurrentTokenFirstCharIndex(currentLineText,position.character<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//当前单词</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentToken = currentLineText.substr(currentTokenFisrtCharIndex,position.character-currentTokenFisrtCharIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//针对所有支持的操作符(其实就+和-)构造正则表达式 并验证当前单词是否匹配</span></span><br><span class=\"line\">        SUPPORT_OPT.map(<span class=\"function\"><span class=\"params\">opt</span>=&gt;</span><span class=\"string\">'^(\\\\d+)('</span>+opt+<span class=\"string\">'&#123;1&#125;)$'</span>).forEach(<span class=\"function\"><span class=\"params\">regex</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> matched = currentToken.match(regex);</span><br><span class=\"line\">            <span class=\"comment\">//如果匹配了就构造CompletionItem</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matched!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//插入的文本 将关键字重复x次得出的结果，比如 5+ 则是 +++++</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> insertText = matched[<span class=\"number\">2</span>].repeat(<span class=\"built_in\">parseInt</span>(matched[<span class=\"number\">1</span>]));</span><br><span class=\"line\">                <span class=\"comment\">//创建CompletionItem 它所显示的标题为当前单词 比如 5+</span></span><br><span class=\"line\">                completion = <span class=\"keyword\">new</span> vscode.CompletionItem(currentToken);</span><br><span class=\"line\">                <span class=\"comment\">//这个是文档，我直接设置成了insertText</span></span><br><span class=\"line\">                completion.documentation = insertText; </span><br><span class=\"line\">                <span class=\"comment\">//这个是显示出来的解释信息</span></span><br><span class=\"line\">                completion.detail = <span class=\"string\">'Insert '</span>+matched[<span class=\"number\">1</span>] +<span class=\"string\">' '</span> + matched[<span class=\"number\">2</span>];</span><br><span class=\"line\">                <span class=\"comment\">//这个是插入的文字，支持SnippetString</span></span><br><span class=\"line\">                completion.insertText = insertText;</span><br><span class=\"line\">                <span class=\"comment\">//替换范围 这里设成了从当前单词第第一个位置到当前单词的最后一个位置</span></span><br><span class=\"line\">                completion.range = <span class=\"keyword\">new</span> vscode.Range(position.line,currentTokenFisrtCharIndex,position.line,position.character);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> completion?<span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">new</span> vscode.CompletionList([completion], <span class=\"literal\">true</span>)):<span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCurrentTokenFirstCharIndex</span>(<span class=\"params\">text: <span class=\"built_in\">string</span>,position: <span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(position&gt;<span class=\"number\">0</span>&amp;&amp;text.charAt(position)!=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        position--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text.charAt(position)==<span class=\"string\">' '</span>?position+<span class=\"number\">1</span>:position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>provideCompletionItems</code>方法返回一个<code>ProviderResult</code>，所有的Provider中的provide方法都返回一个这东西，它实际上是一个Promise，所以我们需要调用<code>Promise.resolve</code>。</p>\n<p>这样一来，加号和减号的智能提示就可以使用了，快去试试吧。</p>\n<h2 id=\"使用Snippet继续扩展\">使用Snippet继续扩展<a href=\"post/vscode-ext4#使用Snippet继续扩展\"></a></h2><p><code>CompletionItemProvider</code>确实好用，但是有些时候用不到，一般情况下，我们有动态的代码提示需求要处理的话才会使用它，就像<code>emmet</code>。一般的，固定格式的需求我们直接用snippet就好了，Snippet就是输入一小段生成一大段的意思，比如其他语言中的生成<code>for</code>语句的Snippet，只需要输入for就把整个的循环体弄出来了。</p>\n<p>我们用snippet来扩展bf里的其他操作提示。</p>\n<p>bf中经常会看到这样的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++ [ &gt; ++++ &lt; - ]</span><br></pre></td></tr></table></figure></p>\n<p>这是bf构造一个循环常用的手段，因为<code>]</code>符号在当前单元不为0的情况下会跳转到前一个<code>[</code>，而且循环里一般要控制另一个单元的值，所以一般都会在循环开始之前用一个单元作为循环控制单元，然后在循环中用<code>&gt;</code>跳到另一个单元进行累加操作，然后别忘了用<code>&lt;</code>跳回去将循环控制单元的值迭代，上面的代码为循环3次，每次为下一个单元的值加4，执行完成后，第二个单元为12。</p>\n<p>所以有必要写一个这样的snippet，生成这么个东西：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ &gt; &lt; ]</span><br></pre></td></tr></table></figure></p>\n<p>我们在<code>package.json</code>中的<code>contributes</code>节点下添加snippets相关的配置：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"snippets\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"brainfuck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"./snippets.json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>并且在<code>categories</code>中添加一个Snippets，否则snippet不会生效。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"categories\": [</span><br><span class=\"line\">    \"Other\",\"Snippets\",\"Languages\"</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>然后在项目根目录创建<code>snippets.json</code>，并填入如下内容：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"Bf_Jump_In_Unit_And_Loop\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"brainfuck\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"prefix\"</span>: <span class=\"string\">\"ul\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"body\"</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"[ &gt; $1 &lt; $2 ]\"</span></span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Create a unit jump body in loop\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>scope</code>指定snippet生效的语言，<code>prifix</code>则是前缀，这里我们用<code>ul</code>(Unit And Loop)当前缀，<code>body</code>就是选中后插入的大段代码，是一个列表，一项就是插入后的一行，我们只有一行，所以就一项。</p>\n<p><code>$1</code>代表位置，当你插入这个snippet后光标会跳转到<code>$1</code>的位置，当你输入完成后，按下tab就会跳转到<code>$2</code>的位置，你当然还可以设置一些提示信息，就像这样：<code>${1:tips}</code>，该位置会插入文字<code>tips</code>并且处于选中状态，直接输入就会被替换掉。</p>\n<p><code>description</code>则是说明信息。</p>\n<p>这样一来Snippet也弄好了，然后试着用我们刚刚写完的插件编写和编译bf代码吧！</p>\n<p>未完待续…</p>\n<h2 id=\"参考\">参考<a href=\"post/vscode-ext4#参考\"></a></h2><ul>\n<li><a href=\"https://code.visualstudio.com/api/references/vscode-api#CompletionItemProvider\" target=\"_blank\" rel=\"noopener\">CompletionItemProvider</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30687783/create-custom-language-in-visual-studio-code\" target=\"_blank\" rel=\"noopener\">Create Custom Language in Visual Studio Code</a></li>\n<li><a href=\"https://github.com/microsoft/vscode-emmet/\" target=\"_blank\" rel=\"noopener\">vscode-emmet opensource project</a></li>\n<li><a href=\"https://code.visualstudio.com/api/language-extensions/snippet-guide\" target=\"_blank\" rel=\"noopener\">snippet-guide</a></li>\n</ul>\n","next":{"title":"VSCode 扩展开发(三) Command详解","slug":"vscode-ext3"},"link":"http://yoursite.com/post/vscode-ext4/","toc":[{"title":"学习目标","id":"学习目标","index":"1"},{"title":"开篇寒暄","id":"开篇寒暄","index":"2"},{"title":"OutputChannel","id":"OutputChannel","index":"3","children":[{"title":"创建OutputChannel、添加信息","id":"创建OutputChannel、添加信息","index":"3.1"}]},{"title":"输入功能","id":"输入功能","index":"4"},{"title":"打造极致bf编码体验","id":"打造极致bf编码体验","index":"5"},{"title":"思路及实现","id":"思路及实现","index":"6"},{"title":"使用Snippet继续扩展","id":"使用Snippet继续扩展","index":"7"},{"title":"参考","id":"参考","index":"8"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://yoursite.com/post/vscode-ext4/\" title=\"VSCode 扩展开发(四) Output、智能提示和Snippets\">http://yoursite.com/post/vscode-ext4/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}