{"title":"VSCode 扩展开发(六) 用户设置","date":"2019-06-08T02:46:54.000Z","slug":"vscode-ext6","comments":true,"tags":["editor","vscode"],"categories":["VSCode"],"updated":"2019-06-08T03:24:46.993Z","content":"<h2 id=\"学习目标\">学习目标<a href=\"post/vscode-ext6#学习目标\"></a></h2><p>经过本节，你将了解如何给你的扩展添加用户设置选项。</p>\n<h2 id=\"开篇寒暄\">开篇寒暄<a href=\"post/vscode-ext6#开篇寒暄\"></a></h2><p>一个优秀的插件需要给用户很多可配置的选项，让用户决定使用哪些功能，而不是把所有功能都给写死在代码中，VSCode当然提供了这个功能，我们看看怎么使用吧。</p>\n<h2 id=\"开始\">开始<a href=\"post/vscode-ext6#开始\"></a></h2><p>关于用户设置的配置，我们全部都在<code>package.json</code>中的<code>contributes.configuration</code>节点里配置，并且我们只需要在TypeScript代码中通过<code>vscode.workspace.getConfiguration</code>引用即可。</p>\n<p>我们现在开始尝试给之前的bf解释器加一些可选项，复制上一章的代码，本章代码在<a href=\"https://github.com/YHaoNan/vscode-tutorial/tree/master/vsc-extensions-tutorial-6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>我决定加入三个选项，一个是是否开启运算符计数功能，第二个是是否开启自动完成功能，第三个是是否开启循环跳转功能。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"configuration\":&#123;</span><br><span class=\"line\">    \"title\": \"Brainfuck Plugin User Settings\",</span><br><span class=\"line\">    \"properties\": &#123;</span><br><span class=\"line\">        \"bf.openOptCounter\":&#123;</span><br><span class=\"line\">            \"type\": \"boolean\",</span><br><span class=\"line\">            \"default\": true,</span><br><span class=\"line\">            \"description\": \"Whether open the operator counter\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        \"bf.openAutoComplete\":&#123;</span><br><span class=\"line\">            \"type\": \"boolean\",</span><br><span class=\"line\">            \"default\": true,</span><br><span class=\"line\">            \"description\": \"Whether open the auto compelete\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        \"bf.openLoopJump\": &#123;</span><br><span class=\"line\">            \"type\": \"boolean\",</span><br><span class=\"line\">            \"default\": true,</span><br><span class=\"line\">            \"description\": \"Whether open the loop jump\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如上代码配置了我们需要的功能，<code>properties</code>中包含的的每一个子节点是一个选项，其id就是每一个节点的节点名，如<code>bf.openOptCounter</code>。</p>\n<p>我们运行插件，打开设置就能看到我们提供的设置项了。</p>\n<div class=\"article-img\"><p><img src=\"http://nsimg.cn-bj.ufileos.com/img-1559963277078.png\" alt=\"img\" data-zoomable></p></div>\n<p>当然，也可以在json中配置。</p>\n<div class=\"article-img\"><p><img src=\"http://nsimg.cn-bj.ufileos.com/img-1559963393773.png\" alt=\"img\" data-zoomable></p></div>\n<p>然后我们就可以在代码中判断选项是否开启，然后根据用户的设置来决定功能是否开启。</p>\n<p>hover.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; disconnect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'cluster'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> util <span class=\"keyword\">from</span> <span class=\"string\">'./util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckHoverProvider <span class=\"keyword\">implements</span> vscode.HoverProvider&#123;</span><br><span class=\"line\">    provideHover(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;vscode.Hover&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> opt = <span class=\"built_in\">document</span>.lineAt(position.line).text.charAt(position.character);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> wordRange = <span class=\"built_in\">document</span>.getWordRangeAtPosition(position,<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\'</span>+opt+<span class=\"string\">'+'</span>));</span><br><span class=\"line\">        <span class=\"comment\">//判断选项是否开启</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((opt==<span class=\"string\">'+'</span> || opt==<span class=\"string\">'-'</span>)&amp;&amp;vscode.workspace.getConfiguration().get&lt;<span class=\"built_in\">boolean</span>&gt;(<span class=\"string\">'bf.openOptCounter'</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> wordRange?<span class=\"keyword\">new</span> vscode.Hover(<span class=\"keyword\">new</span> vscode.MarkdownString(<span class=\"string\">'### BF Opt Counter  \\n\\n * **Opt: `'</span>+opt+<span class=\"string\">'`**\\n\\n* **Length: `'</span>+(wordRange.end.character-wordRange.start.character)+<span class=\"string\">'`**'</span>)):<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((opt==<span class=\"string\">'['</span> || opt==<span class=\"string\">']'</span>)&amp;&amp;vscode.workspace.getConfiguration().get&lt;<span class=\"built_in\">boolean</span>&gt;(<span class=\"string\">'bf.openLoopJump'</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> map = util.getLoopOptPairMap(<span class=\"built_in\">document</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> target = util.getMatchedOpt(map,position);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> wordRange?<span class=\"keyword\">new</span> vscode.Hover(<span class=\"keyword\">new</span> vscode.MarkdownString(<span class=\"string\">'### Loop Opt Pair\\n\\n* **Matched: `'</span>+target.character+<span class=\"string\">'`**, press ctrl and click to jump here.'</span>)):<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>definition.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> util <span class=\"keyword\">from</span> <span class=\"string\">'./util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckDefinitionProvider <span class=\"keyword\">implements</span> vscode.DefinitionProvider&#123;</span><br><span class=\"line\">    provideDefinition(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;vscode.Location | vscode.Location[] | vscode.LocationLink[]&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vscode.workspace.getConfiguration().get&lt;<span class=\"built_in\">boolean</span>&gt;(<span class=\"string\">'bf.openLoopJump'</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> char = <span class=\"built_in\">document</span>.lineAt(position.line).text.charAt(position.character);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(char);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(char != <span class=\"string\">'['</span> &amp;&amp; char != <span class=\"string\">']'</span>)<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> map = util.getLoopOptPairMap(<span class=\"built_in\">document</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> target = util.getMatchedOpt(map,position);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> vscode.Location(<span class=\"built_in\">document</span>.uri,target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>autocomplete.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CompletionItem &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vscode-debugadapter'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stringify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'querystring'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> SUPPORT_OPT = [<span class=\"string\">'\\\\+'</span>,<span class=\"string\">'\\\\-'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> BrainfuckCompletionItemProvider <span class=\"keyword\">implements</span> vscode.CompletionItemProvider&#123;</span><br><span class=\"line\">    provideCompletionItems(<span class=\"built_in\">document</span>: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext): vscode.ProviderResult&lt;vscode.CompletionItem[] | vscode.CompletionList&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vscode.workspace.getConfiguration().get&lt;<span class=\"built_in\">boolean</span>&gt;(<span class=\"string\">'bf.openAutoComplete'</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> completion: vscode.CompletionItem | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当前行文本</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentLineText = <span class=\"built_in\">document</span>.lineAt(position.line).text;</span><br><span class=\"line\">        <span class=\"comment\">//当前单词第一个字符位置 position.character中的下标指向的实际上是关键字的下一个(不知道这么说准确不准确)</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentTokenFisrtCharIndex = findCurrentTokenFirstCharIndex(currentLineText,position.character<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//当前单词</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentToken = currentLineText.substr(currentTokenFisrtCharIndex,position.character-currentTokenFisrtCharIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//针对所有支持的操作符(其实就+和-)构造正则表达式 并验证当前单词是否匹配</span></span><br><span class=\"line\">        SUPPORT_OPT.map(<span class=\"function\"><span class=\"params\">opt</span>=&gt;</span><span class=\"string\">'^(\\\\d+)('</span>+opt+<span class=\"string\">'&#123;1&#125;)$'</span>).forEach(<span class=\"function\"><span class=\"params\">regex</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> matched = currentToken.match(regex);</span><br><span class=\"line\">            <span class=\"comment\">//如果匹配了就构造CompletionItem</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matched!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//插入的文本 将关键字重复x次得出的结果，比如 5+ 则是 +++++</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> insertText = matched[<span class=\"number\">2</span>].repeat(<span class=\"built_in\">parseInt</span>(matched[<span class=\"number\">1</span>]));</span><br><span class=\"line\">                <span class=\"comment\">//创建CompletionItem 它所显示的标题为当前单词 比如 5+</span></span><br><span class=\"line\">                completion = <span class=\"keyword\">new</span> vscode.CompletionItem(currentToken);</span><br><span class=\"line\">                <span class=\"comment\">//这个是文档，我直接设置成了insertText</span></span><br><span class=\"line\">                completion.documentation = insertText; </span><br><span class=\"line\">                <span class=\"comment\">//这个是显示出来的解释信息</span></span><br><span class=\"line\">                completion.detail = <span class=\"string\">'Insert '</span>+matched[<span class=\"number\">1</span>] +<span class=\"string\">' '</span> + matched[<span class=\"number\">2</span>];</span><br><span class=\"line\">                <span class=\"comment\">//这个是插入的文字，支持SnippetString</span></span><br><span class=\"line\">                completion.insertText = insertText;</span><br><span class=\"line\">                <span class=\"comment\">//替换范围 这里设成了从当前单词第第一个位置到当前单词的最后一个位置</span></span><br><span class=\"line\">                completion.range = <span class=\"keyword\">new</span> vscode.Range(position.line,currentTokenFisrtCharIndex,position.line,position.character);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> completion?<span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">new</span> vscode.CompletionList([completion], <span class=\"literal\">true</span>)):<span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCurrentTokenFirstCharIndex</span>(<span class=\"params\">text: <span class=\"built_in\">string</span>,position: <span class=\"built_in\">number</span></span>):<span class=\"title\">number</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(position&gt;<span class=\"number\">0</span>&amp;&amp;text.charAt(position)!=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        position--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text.charAt(position)==<span class=\"string\">' '</span>?position+<span class=\"number\">1</span>:position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用户设置还支持如下类型：<code>string</code>、<code>array</code>、<code>number</code>、<code>boolean</code>、<code>object</code>、<code>integer</code>、<code>null</code>。</p>\n<h2 id=\"参考\">参考<a href=\"post/vscode-ext6#参考\"></a></h2><ul>\n<li><a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.configuration\" target=\"_blank\" rel=\"noopener\">contributes.configuration</a></li>\n</ul>\n","prev":{"title":"VSCode 扩展开发(七) 实战-翻译插件","slug":"vscode-ext7"},"next":{"title":"TypeScript的一些特性","slug":"other-typescript-ft"},"link":"http://lilpig.site/post/vscode-ext6/","toc":[{"title":"学习目标","id":"学习目标","index":"1"},{"title":"开篇寒暄","id":"开篇寒暄","index":"2"},{"title":"开始","id":"开始","index":"3"},{"title":"参考","id":"参考","index":"4"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/vscode-ext6/\" title=\"VSCode 扩展开发(六) 用户设置\">http://lilpig.site/post/vscode-ext6/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}