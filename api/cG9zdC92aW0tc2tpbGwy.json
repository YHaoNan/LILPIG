{"title":"VIM中被我忽略的技巧(移动篇)","date":"2019-11-12T03:50:27.000Z","slug":"vim-skill2","tags":["vim"],"categories":["Vim"],"updated":"2019-11-16T12:28:13.210Z","content":"<p>已经使用Vim有几个月了，现在我已经到了没有VIM就不会打字的处境了。</p>\n<p>不过VIM中有很多我曾经忽略的快捷键，其实这些快捷键挺常用的，就是不知道我当时怎么就不会用。导致在一些输入场景下很蛋疼。</p>\n<h2 id=\"行与屏幕行\">行与屏幕行<a href=\"post/vim-skill2#行与屏幕行\"></a></h2><p>VIM中有行和屏幕行之分。</p>\n<p>当设置了<code>wrap</code>的时候，如果一行放不下就会折行显示，但这个折行在VIM中并不算一个实际行，所以当你用<code>j k</code>等动作按键移动时就会直接移动到很远的位置。VIM提供了屏幕行的概念，将动作命令前面加上<code>g</code>就是对屏幕行操作。</p>\n<p><code>gj</code> — 向上移动一个屏幕行<br><code>gk</code> — 向下移动一个屏幕行</p>\n<h2 id=\"e和ge\">e和ge<a href=\"post/vim-skill2#e和ge\"></a></h2><p>总用w和b，忽略了e和ge。有时候想在单词尾部追加，这就很蛋疼了。</p>\n<p><code>e</code> — 跳转到当前/下一个单词尾部。<br><code>ge</code> — 跳转到上一个单词尾部。</p>\n<h2 id=\"单词和字串\">单词和字串<a href=\"post/vim-skill2#单词和字串\"></a></h2><p>字串只以空格分割，单词可能以标点分割。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">we&apos;re niubility.</span><br></pre></td></tr></table></figure>\n<p>对于上一句，会被分成两个字串但会被分成五个单词。</p>\n<p>大写的单词操作命令就是针对字串操作。</p>\n<h2 id>;<a href=\"post/vim-skill2#\"></a></h2><p>重度依赖<code>f</code>查找命令，这是个在单行快速跳转的好办法。因为我的vim安装了一个<code>f</code>按键的增强插件，如果一行中有多个搜索结果，再次按f就可以跳转到下一个结果位置。</p>\n<p>但我忽略了vim还有个和f配套的按键<code>;</code>，他就是重复上次的f命令，寻找下一个匹配的字母。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Find the first occurrence of &#123;char&#125; and move to it.</span><br></pre></td></tr></table></figure>\n<p>比如从上面这行找<code>occurrence</code>这个单词中的最后一个c。<code>fc;;</code>貌似是个好办法。</p>\n<h2 id=\"-1\">,<a href=\"post/vim-skill2#-1\"></a></h2><p>如果你按<code>;</code>过了头，按<code>,</code>可以反方向查找上次的内容。</p>\n<h2 id=\"t\">t<a href=\"post/vim-skill2#t\"></a></h2><p><code>t</code>和<code>f</code>功能相同，都是在一行内查找指定字符。但是<code>f</code>是查找到那个字符，<code>t</code>是查找到前一个字符。</p>\n<p>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;ve been expecting you, Mister Bond.</span><br></pre></td></tr></table></figure></p>\n<p>我们想把逗号后面的半句删除。</p>\n<p><code>f,dt.</code></p>\n<p>先用<code>f,</code>定位到逗号，再用<code>dt.</code>删除，不过这个操作会保留句尾的点。而用<code>f</code>就会删除句尾的点。</p>\n<p>这个需求经常见到。</p>\n<h2 id=\"查找命令\">查找命令<a href=\"post/vim-skill2#查找命令\"></a></h2><p><code>/xx&lt;CR&gt;</code>查找。<code>n</code>向下一个，<code>N</code>向上一个。</p>\n<p><code>d/xx</code>会删除查找到的单词之前的所有内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This phrase takes time but eventually gets to the point.</span><br></pre></td></tr></table></figure></p>\n<p>从行首执行<code>d/ge</code>会删除到<code>ge</code>之前的所有字符，结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets to the point.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文本对象\">文本对象<a href=\"post/vim-skill2#文本对象\"></a></h2><p>如果在圆括号内部，输入<code>vib</code>试试会发生什么？</p>\n<p>圆括号中的内容会被选中。<code>vab</code>呢？圆括号内的内容包括圆括号都会被选中。</p>\n<p>拆分这个命令，<code>v</code>是可视动作，<code>ib</code>和<code>ab</code>是操作对象，<code>b</code>即小括号，<code>i</code>可以看做<code>inside</code>，即只选中小括号内的文本，<code>a</code>看做<code>around</code>，即选中文本外还要选中包裹它的小括号。</p>\n<p>VIM提供了很多文本对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b或) -- 小括号</span><br><span class=\"line\">B或&#125; -- 大括号</span><br><span class=\"line\">] -- 中括号</span><br><span class=\"line\">&gt; -- 尖括号</span><br><span class=\"line\">&apos; -- 单引号</span><br><span class=\"line\">&quot; -- 双引号</span><br><span class=\"line\">` -- 反引号</span><br><span class=\"line\">t -- xml标签</span><br></pre></td></tr></table></figure>\n<p>可以使用<code>动作+a/i+文本对象</code>的方式操作它们，比如<code>dit</code>删除所在xml标签里所有内容。</p>\n<h2 id=\"文本块对象\">文本块对象<a href=\"post/vim-skill2#文本块对象\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w -- 当前单词</span><br><span class=\"line\">W -- 当前字串</span><br><span class=\"line\">s -- 当前句子</span><br><span class=\"line\">p -- 当前段落</span><br></pre></td></tr></table></figure>\n<p>当对单词字串和句子应用a选取时，比如<code>daw</code>，会删除一个单词外加一个空格。</p>\n<p>对段落时则是空行。</p>\n<h2 id=\"标记\">标记<a href=\"post/vim-skill2#标记\"></a></h2><p>VIM中一个一直被我忽略的强大功能就是标记。</p>\n<p>VIM中用反引号`代表在标记中跳转的动作命令。如下是一些VIM中自带的标记。</p>\n<p>位置标记|跳转到<br>``|当前文件中上次跳转动作之前的位置<br>`.|上次修改的地方<br>`^|上次插入的地方<br>`[|上次修改或复制的起始位置<br>`]|上次修改或复制的结束位置<br>`&lt;|上次高亮选区的起始位置<br>`&gt;|上次高亮选区的结束位置</p>\n<p>除了这些自带的位置标记以外，VIM还可以允许你手动设置位置标记。</p>\n<p><code>mm</code>允许你设置标记，使用`m就可以跳转到刚刚设置的标记处。</p>\n<h2 id=\"括号匹配\">括号匹配<a href=\"post/vim-skill2#括号匹配\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`%`允许我们在匹配的括号间跳转。</span><br><span class=\"line\"></span><br><span class=\"line\">cities = %w&#123;London Berlin New\\ York&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如上是一段Ruby代码，我们现在想把这个`cites`改为普通的列表，即`[&quot;London&quot;,&quot;Berlin&quot;,&quot;New York&quot;]`。</span><br><span class=\"line\"></span><br><span class=\"line\">假设我们现在在等号后面，我们可以使用如下命令dt&#123;%r]\\`\\`r[来实现。</span><br><span class=\"line\"></span><br><span class=\"line\">首先用`dt&#123;`而不是`df&#123;`的原因是如果我们删除了`&#123;`，我们就无法快速跳转到后面与它匹配的大括号了</span><br><span class=\"line\"></span><br><span class=\"line\">然后就是%跳转到后面的大括号，用r]替换成中括号，再用\\`\\`跳转到上一次跳转动作的位置。也就是前面的大括号，再用`r[`替换它。</span><br></pre></td></tr></table></figure>\n","prev":{"title":"VIM中被我忽略的技巧(复制篇)","slug":"vim-skill3"},"next":{"title":"儿的生日，爹的苦日","slug":"other-sonbir"},"link":"http://lilpig.site/post/vim-skill2/","toc":[{"title":"行与屏幕行","id":"行与屏幕行","index":"1"},{"title":"e和ge","id":"e和ge","index":"2"},{"title":"单词和字串","id":"单词和字串","index":"3"},{"title":",","id":"-1","index":"4"},{"title":"t","id":"t","index":"5"},{"title":"查找命令","id":"查找命令","index":"6"},{"title":"文本对象","id":"文本对象","index":"7"},{"title":"文本块对象","id":"文本块对象","index":"8"},{"title":"标记","id":"标记","index":"9"},{"title":"括号匹配","id":"括号匹配","index":"10"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/vim-skill2/\" title=\"VIM中被我忽略的技巧(移动篇)\">http://lilpig.site/post/vim-skill2/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}