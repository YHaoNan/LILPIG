{"title":"VIM中被我忽略的技巧","date":"2019-11-12T03:50:27.000Z","slug":"vim-skill2","tags":["vim"],"categories":["Vim"],"updated":"2019-11-13T13:23:39.544Z","content":"<p>已经使用Vim有几个月了，现在我已经到了没有VIM就不会打字的处境了。</p>\n<p>不过VIM中有很多我曾经忽略的快捷键，其实这些快捷键挺常用的，就是不知道我当时怎么就不会用。导致在一些输入场景下很蛋疼。</p>\n<h2 id=\"行与屏幕行\">行与屏幕行<a href=\"post/vim-skill2#行与屏幕行\"></a></h2><p>VIM中有行和屏幕行之分。</p>\n<p>当设置了<code>wrap</code>的时候，如果一行放不下就会折行显示，但这个折行在VIM中并不算一个实际行，所以当你用<code>j k</code>等动作按键移动时就会直接移动到很远的位置。VIM提供了屏幕行的概念，将动作命令前面加上<code>g</code>就是对屏幕行操作。</p>\n<p><code>gj</code> — 向上移动一个屏幕行<br><code>gk</code> — 向下移动一个屏幕行</p>\n<h2 id=\"e和ge\">e和ge<a href=\"post/vim-skill2#e和ge\"></a></h2><p>总用w和b，忽略了e和ge。有时候想在单词尾部追加，这就很蛋疼了。</p>\n<p><code>e</code> — 跳转到当前/下一个单词尾部。<br><code>ge</code> — 跳转到上一个单词尾部。</p>\n<h2 id=\"单词和字串\">单词和字串<a href=\"post/vim-skill2#单词和字串\"></a></h2><p>字串只以空格分割，单词可能以标点分割。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">we&apos;re niubility.</span><br></pre></td></tr></table></figure>\n<p>对于上一句，会被分成两个字串但会被分成五个单词。</p>\n<p>大写的单词操作命令就是针对字串操作。</p>\n<h2 id>;<a href=\"post/vim-skill2#\"></a></h2><p>重度依赖<code>f</code>查找命令，这是个在单行快速跳转的好办法。因为我的vim安装了一个<code>f</code>按键的增强插件，如果一行中有多个搜索结果，再次按f就可以跳转到下一个结果位置。</p>\n<p>但我忽略了vim还有个和f配套的按键<code>;</code>，他就是重复上次的f命令，寻找下一个匹配的字母。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Find the first occurrence of &#123;char&#125; and move to it.</span><br></pre></td></tr></table></figure>\n<p>比如从上面这行找<code>occurrence</code>这个单词中的最后一个c。<code>fc;;</code>貌似是个好办法。</p>\n<h2 id=\"-1\">,<a href=\"post/vim-skill2#-1\"></a></h2><p>如果你按<code>;</code>过了头，按<code>,</code>可以反方向查找上次的内容。</p>\n<h2 id=\"t\">t<a href=\"post/vim-skill2#t\"></a></h2><p><code>t</code>和<code>f</code>功能相同，都是在一行内查找指定字符。但是<code>f</code>是查找到那个字符，<code>t</code>是查找到前一个字符。</p>\n<p>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;ve been expecting you, Mister Bond.</span><br></pre></td></tr></table></figure></p>\n<p>我们想把逗号后面的半句删除。</p>\n<p><code>f,dt.</code></p>\n<p>先用<code>f,</code>定位到逗号，再用<code>dt.</code>删除，不过这个操作会保留句尾的点。而用<code>f</code>就会删除句尾的点。</p>\n<p>这个需求经常见到。</p>\n<h2 id=\"查找命令\">查找命令<a href=\"post/vim-skill2#查找命令\"></a></h2><p><code>/xx&lt;CR&gt;</code>查找。<code>n</code>向下一个，<code>N</code>向上一个。</p>\n<p><code>d/xx</code>会删除查找到的单词之前的所有内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This phrase takes time but eventually gets to the point.</span><br></pre></td></tr></table></figure></p>\n<p>从行首执行<code>d/ge</code>会删除到<code>ge</code>之前的所有字符，结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets to the point.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文本对象选择区\">文本对象选择区<a href=\"post/vim-skill2#文本对象选择区\"></a></h2><p>。。。明天再说。。。</p>\n","next":{"title":"儿的生日，爹的苦日","slug":"other-sonbir"},"link":"http://lilpig.site/post/vim-skill2/","toc":[{"title":"行与屏幕行","id":"行与屏幕行","index":"1"},{"title":"e和ge","id":"e和ge","index":"2"},{"title":"单词和字串","id":"单词和字串","index":"3"},{"title":",","id":"-1","index":"4"},{"title":"t","id":"t","index":"5"},{"title":"查找命令","id":"查找命令","index":"6"},{"title":"文本对象选择区","id":"文本对象选择区","index":"7"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/vim-skill2/\" title=\"VIM中被我忽略的技巧\">http://lilpig.site/post/vim-skill2/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}