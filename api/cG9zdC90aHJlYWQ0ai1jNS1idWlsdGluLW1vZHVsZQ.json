{"title":"（四）基础构建模块 —— 《Java并发编程实战》","date":"2019-07-29T10:19:30.000Z","slug":"thread4j-c5-builtin-module","tags":["java","thread"],"categories":["Java多线程"],"updated":"2019-07-30T00:02:24.171Z","content":"<p>多线程程序往往是很难控制的，因为我们要保证每一个对象状态的安全，本篇介绍一些Java中内置的用来构建并发程序的模块，让我们更快更优雅的实现并发程序。</p>\n<h2 id=\"concurrent并发数据结构\"><code>concurrent</code>并发数据结构<a href=\"post/thread4j-c5-builtin-module#concurrent并发数据结构\"></a></h2><p>我们先来看看一个具有同步机制的线程安全的数据结构——<code>Vector</code>。</p>\n<p>先看下JDK官方文档中对它的描述，出自JDK1.8：</p>\n<blockquote>\n<p>Unlike the new collection implementations, {@code Vector} is synchronized.  If a thread-safe implementation is not needed, it is recommended to use.</p>\n<p>不同于一个新的集合实现，Vector是同步的。如果不需要一个线程安全实现（指的应该是你不需要主动实现线程安全），推荐使用它。</p>\n</blockquote>\n<p><code>Vector</code>继承了<code>AbstractList</code>并且使用一个数组来管理元素，它通过为每个方法加上<code>synchronized</code>关键字保证每个操作的同步。</p>\n<p>也就是说它就是一个同步的List，不过我们使用它时要注意的是，它只能保证单个操作的同步，如果你的代码中有对<code>Vector</code>的操作依赖上面几行对<code>Vector</code>操作的结果时，需要自行加锁，假设我们对它做迭代操作：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVector</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Vector&lt;String&gt; vector = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;vector.size();i++)&#123;</span><br><span class=\"line\">            System.out.println(vector.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如上是一个单线程环境下的代码，不过它在多线程环境下会出现问题，<code>main</code>方法中的循环判断条件依据<code>vector.size()</code>的返回结果，当<code>vector.size()</code>返回后当前线程的锁被释放，这时可能有其他线程在当前线程调用<code>vector.get(i)</code>时抢先获得锁，如果它执行了一些删除操作，我们循环中的代码就可能抛出<code>ArrayIndexOutOfBoundsException</code>。</p>\n<p>解决办法是当进行遍历（或任何其他非原子的操作）时，请自行加锁：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (vector)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;vector.size();i++)&#123;</span><br><span class=\"line\">        System.out.println(vector.get(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你用迭代器操作，也是会出现异常的，但是不是<code>ArrayIndexOutOfBoundsException</code>，迭代器会在每次迭代时检测整个数组是否被修改，如果被修改则会抛出一个<code>ConcurrentModifactionException</code>。</p>\n<p>所以，只要你想在多线程环境下遍历<code>Vector</code>，不管你用什么办法，你都必须得获得锁，如果<code>Vector</code>是一个非常大的集合，而且遍历时对每一个元素的处理很耗时，这时就会造成阻塞，其他线程被都在外面无法进入，对于高并发的程序来说这是不好的。</p>\n<p><strong>而且要注意，当你输出一个vector时，或者把它连接到字符串中时，也会隐式的进行迭代，因为这时调用了它默认的toString方法</strong></p>\n<p>好了，介绍完<code>Vector</code>的缺点现在我们开始并发容器的主题。。。</p>\n<h3 id=\"ConcurrentHashMap\">ConcurrentHashMap<a href=\"post/thread4j-c5-builtin-module#ConcurrentHashMap\"></a></h3><p>这是一个并发的HashMap，Java的<code>concurrent</code>包中有很多为了实现高并发程序设计的数据结构，它就是其中之一，这些数据结构并不是通过为每一个方法加锁来确保安全性，而是使用更细粒度的锁，保证线程安全性的同时提高并发性能。</p>\n<p>在<code>ConcurrentHashMap</code>中多个线程可以并发访问它，而不是一个线程访问另一个线程就必须等待，因为在高并发情况下容器内的元素在很短时间内会经常的改变，所以一定程度的损失是可以容忍的，在迭代操作中，它能保证遍历当前已有的元素并且尽量把所有的修改操作反映到容器。</p>\n<p>实现高并发性能的代价就是一些在高并发应用中不那么重要的方法被减弱了，例如<code>size()</code>、<code>isEmpty()</code>，因为在高并发环境下容器的内容频繁改变，所以这些方法的返回值在计算时可能已经过期了，不过仔细想想这些方法在高并发应用中我们确实不太常用。</p>\n<p><code>ConcurrentHashMap</code>实现了一些常用的复合操作的原子版，比如“没有则添加”、“相等则移除”等。</p>\n<h3 id=\"CopyOnWriteArrayList\">CopyOnWriteArrayList<a href=\"post/thread4j-c5-builtin-module#CopyOnWriteArrayList\"></a></h3><p>从名字分析，就是在写入时复制的列表，它可以替代同步List。</p>\n<p>如果你自己去看这个类的源码，你就会发现它确实是每次add操作都会把整个数组复制一遍，复制成一个新的数组，这也说明了它不适合做一个元素会经常被改动的容器，因为操作的时间复杂度和空间复杂度都很高，也很耗资源。它适合做一些监听器列表等操作，只需要在初始化时把所有监听器设置进去，当事件发生时，遍历所有的监听器发送事件。</p>\n<h3 id=\"BlockingQueue\">BlockingQueue<a href=\"post/thread4j-c5-builtin-module#BlockingQueue\"></a></h3><p>阻塞队列是一个多线程环境下特别特别特别特别特别特别好用的FIFO队列数据结构，当<code>put</code>时如果队列满就会阻塞，等待何时队列腾出空位再加入，<code>take</code>操作时如果队列为空也会阻塞，等待何时队列中有内容时再弹出。</p>\n<p>反正我看到它的介绍时一下就想到了多线程中经典的生产者消费者模式，不知道你想到没有，哈哈。这个队列让我们可以方便的实现生产者消费者模式，而不用我们自己实现锁，自己操作<code>wait</code>和<code>notify</code>。下面是使用阻塞队列实现生产者消费者的一个示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BlockingQueue&lt;String&gt; productQueue =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name)</span></span>&#123;<span class=\"keyword\">super</span>(name);&#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">                Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(random.nextInt(<span class=\"number\">5</span>)*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                        String product = String.valueOf(System.nanoTime());</span><br><span class=\"line\">                        productQueue.add(product);</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Worker \"</span>+Thread.currentThread().getName()</span><br><span class=\"line\">                                +<span class=\"string\">\" put \"</span>+product+<span class=\"string\">\" to the queue.\"</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(String name)</span></span>&#123;<span class=\"keyword\">super</span>(name);&#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">                Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(random.nextInt(<span class=\"number\">5</span>)*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                        String product = productQueue.take();</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Consumer \"</span>+Thread.currentThread().getName()</span><br><span class=\"line\">                                +<span class=\"string\">\" take \"</span>+product+<span class=\"string\">\" from the queue.\"</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"W\"</span>+i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Consumer(<span class=\"string\">\"C\"</span>+i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码用了阻塞队列的一个实现<code>ArrayBlockingQueue</code>，它还有一些其他实现，比如按照优先级排序的<code>PriorityBlockingQueue</code>和同步队列<code>SynchronousQueue</code>（不维护空间，直接把产品交给消费者）</p>\n<h3 id=\"双端队列与密取\">双端队列与密取<a href=\"post/thread4j-c5-builtin-module#双端队列与密取\"></a></h3><p>Deque的阻塞实现是<code>BlockingDeque</code>，是JDK6中加入的双端队列数据结构，可以从两端加入或弹出。</p>\n<p>密取模式则是生产者消费者的升级版，传统的生产者消费者模式因为共用一个队列，经常会出现生产者跟不上消费者或消费者跟不上生产者的情况，然后速度比较快的一方会经常阻塞，效率不高。密取模式则各有各的队列，当消费者没有可消费的东西时就偷偷的去其他消费者那取，当生产者队列满时则悄悄的去其他生产者那里生产。</p>\n<p>密取使用双端队列可以更好的减少竞争，密取操作从尾部获取，而正常操作从头部。</p>\n<h3 id=\"同步工具类\">同步工具类<a href=\"post/thread4j-c5-builtin-module#同步工具类\"></a></h3><p>同步工具类即控制多个线程等待执行状态的工具类，所以BlockingQueue也可以作为一个同步工具类，Java中提供了一些线程的同步工具类。</p>\n<p>先介绍一种东西叫闭锁，它像一个大门，当条件未满足时这扇大门关着，一个线程都不能通过，而条件满足时这扇大门敞开，所有线程都可以通过。</p>\n<h4 id=\"CountDownLatch\">CountDownLatch<a href=\"post/thread4j-c5-builtin-module#CountDownLatch\"></a></h4><p><code>CountDownLatch</code>可以作为一个闭锁，它提供一个计数器，在构造时传入，调用<code>await</code>方法会产生阻塞，只有当计数器为0时阻塞才会结束，调用<code>countDown</code>方法可以使计数器减一。下面是一个用例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHarness</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">timeTask</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads,Runnable task)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        CountDownLatch startGate = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">        CountDownLatch endGate = <span class=\"keyword\">new</span> CountDownLatch(nThreads);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nThreads;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        startGate.await();</span><br><span class=\"line\">                        task.run();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        endGate.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.nanoTime();</span><br><span class=\"line\">        startGate.countDown();</span><br><span class=\"line\">        endGate.await();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.nanoTime();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> endTime - startTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable task  = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> timePast = <span class=\"keyword\">new</span> TestHarness().timeTask(<span class=\"number\">1000</span>,task);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"All done , time : \"</span>+timePast);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用两个<code>CountDownLatch</code>第一个用于控制1000个测试线程一起开始，第二个用于确保所有测试线程执行完成。</p>\n<h4 id=\"FutureTask\">FutureTask<a href=\"post/thread4j-c5-builtin-module#FutureTask\"></a></h4><p><code>FutureTask</code>同样可以作为一个闭锁使用，它表示一个异步任务，当任务正在运行时调用<code>get</code>获取结果会产生阻塞，当任务运行完成调用<code>get</code>则会立即返回。</p>\n<p>下面是我们用<code>FutureTask</code>处理耗时任务的一个示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFuture</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FutureTask&lt;String&gt; task = <span class=\"keyword\">new</span> FutureTask(<span class=\"keyword\">new</span> Callable&lt;String&gt;()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟耗时任务</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> randomString(<span class=\"number\">32</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Thread thread = <span class=\"keyword\">new</span> Thread(task);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;thread.start();&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> task.get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            Throwable cause = e.getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> RuntimeException)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> (RuntimeException) cause;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> Error)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> (Error) cause;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Not unchecked exception: \"</span>,cause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        TestFuture future = <span class=\"keyword\">new</span> TestFuture();</span><br><span class=\"line\">        future.start();</span><br><span class=\"line\">        System.out.println(future.getResult());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">randomString</span><span class=\"params\">(<span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        StringBuffer buffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br><span class=\"line\">            buffer.append((<span class=\"keyword\">char</span>)(random.nextInt(<span class=\"number\">26</span>)+<span class=\"number\">97</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buffer.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主线程中的<code>future.getResult</code>会产生阻塞，直到<code>Callable</code>的<code>call</code>方法执行完毕返回，然后把结果返回给主线程。</p>\n<p><code>FutureTask</code>执行任务时的错误处理是个问题，无论发生什么异常，都会被封装到<code>ExecutionException</code>中，所以我们要根据不同的异常类型向父级继续抛出。</p>\n<h4 id=\"Semaphore信号量\">Semaphore信号量<a href=\"post/thread4j-c5-builtin-module#Semaphore信号量\"></a></h4><p><code>Semaphore</code>维护一组固定数量的许可，这个数量可以在构造时传入，每当调用<code>acquire</code>时将颁发一个许可，当没有多余的许可可以颁发时<code>acquire</code>进入阻塞状态，调用<code>release</code>方法可以释放许可，下面用<code>Semaphore</code>实现了一个类似阻塞队列的东西，当然他不是阻塞队列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSemaphore</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; set;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Semaphore semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestSemaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> bound)</span></span>&#123;</span><br><span class=\"line\">        set = Collections.synchronizedSet(<span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">        semaphore = <span class=\"keyword\">new</span> Semaphore(bound);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(String e)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        semaphore.acquire();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> wasAdded = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            wasAdded = set.add(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> wasAdded;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!wasAdded)</span><br><span class=\"line\">                semaphore.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(String e)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> wasRemoved = set.remove(e);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wasRemoved)&#123;</span><br><span class=\"line\">            semaphore.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wasRemoved;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        TestSemaphore mySet = <span class=\"keyword\">new</span> TestSemaphore(<span class=\"number\">5</span>);</span><br><span class=\"line\">        mySet.add(<span class=\"string\">\"ADFADF\"</span>);</span><br><span class=\"line\">        mySet.add(<span class=\"string\">\"ADFavADF\"</span>);</span><br><span class=\"line\">        mySet.add(<span class=\"string\">\"AvasdbDFADF\"</span>);</span><br><span class=\"line\">        mySet.add(<span class=\"string\">\"ADasdfFADF\"</span>);</span><br><span class=\"line\">        mySet.add(<span class=\"string\">\"ADFasbbADF\"</span>);</span><br><span class=\"line\">        mySet.add(<span class=\"string\">\"ADFababbADF\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Set并不知道关于边界的任何内容，边界是我们的信号量在通过许可控制。</p>\n<h3 id=\"构建结果缓存\">构建结果缓存<a href=\"post/thread4j-c5-builtin-module#构建结果缓存\"></a></h3><p>下面将用我们学到的这些模块来构建一个结果缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Computable</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">compute</span><span class=\"params\">(A a)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Computable</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computable&lt;A,V&gt; c;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;A,V&gt; cache;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache</span><span class=\"params\">(Computable&lt;A,V&gt; computable)</span></span>&#123;</span><br><span class=\"line\">        c = computable;</span><br><span class=\"line\">        cache = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> V <span class=\"title\">compute</span><span class=\"params\">(A a)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        V v = cache.get(a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            v = c.compute(a);</span><br><span class=\"line\">            cache.put(a,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个示例很简单了，直接用一个<code>HashMap</code>来构建缓存，并且为了保证线程安全，我们只能使用锁把<code>compute</code>方法锁住。接下来是调用示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cache&lt;String,Integer&gt; converter = <span class=\"keyword\">new</span> Cache&lt;&gt;(<span class=\"keyword\">new</span> Computable&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">compute</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//模拟耗时</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Integer.parseInt(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Integer result = converter.compute(<span class=\"string\">\"200\"</span>);</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">            result = converter.compute(<span class=\"string\">\"200\"</span>);</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在单线程环境中，它是没有问题的，第二次调用<code>compute</code>处理200会直接返回<code>HashMap</code>中的缓存，但是在多线程中还是有问题，因为计算是一个耗时任务，直接用<code>synchronized</code>包裹起来会造成大量的计算请求被阻塞在外面，之前也说过，这种耗时操作能不用<code>synchronized</code>尽量还是不用，我们要用更细粒度的操作来保证性能。</p>\n<p>我们尝试用<code>ConcurrentHashMap</code>来完成这个操作：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache2</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Computable</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computable&lt;A,V&gt; c;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;A,V&gt; cache;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache2</span><span class=\"params\">(Computable&lt;A,V&gt; computable)</span></span>&#123;</span><br><span class=\"line\">        c = computable;</span><br><span class=\"line\">        cache = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">compute</span><span class=\"params\">(A a)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        V v = cache.get(a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            v = c.compute(a);</span><br><span class=\"line\">            cache.put(a,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们要做的很简单，只需要把<code>cache</code>的实现类换成<code>ConcurrentHashMap</code>并把方法上的<code>synchronized</code>去掉就好了，由于是并发操作所以它能保证这个应用是线程安全的，但是因为去掉了<code>synchronized</code>导致<code>compute</code>方法的原子性丢失，所以当有两个线程同时计算同一个对象时，线程1执行<code>compute</code>时发现缓存里没有，然后去计算，因为计算是耗时任务，不能马上计算完放进缓存，所以线程2也发现了缓存里没有这个，然后又去计算，这会导致多了很多不必要的计算，我们的目的是让线程2发现已经有其他线程计算这个问题了，我只需要等待它计算完毕即可。</p>\n<p><code>FutureTask</code>正好能解决我们的问题：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache3</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Computable</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computable&lt;A,V&gt; c;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache3</span><span class=\"params\">(Computable&lt;A,V&gt; computable)</span></span>&#123;</span><br><span class=\"line\">        c = computable;</span><br><span class=\"line\">        cache = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">compute</span><span class=\"params\">(A a)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Future&lt;V&gt; future = cache.get(a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (future == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            FutureTask&lt;V&gt; ft = <span class=\"keyword\">new</span> FutureTask(<span class=\"keyword\">new</span> Callable&lt;V&gt;()&#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> c.compute(a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            future = ft;</span><br><span class=\"line\">            cache.put(a,future);</span><br><span class=\"line\">            ft.run();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> future.get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"ERR\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码使用<code>Future</code>重写，让我们的Map中保存<code>Future</code>，由于它的特性，计算过程中会产生阻塞，其他线程就会等它计算完毕，而计算完毕后就会直接返回。最后我们对错误的处理选择直接简单的抛出了<code>RuntimeException</code>，在实际开发中不要这么做。</p>\n<p>不过还是有问题，由于<code>if</code>中的<code>put</code>操作还是非原子的，所以还是会可能出现两个线程同时执行同一个任务的尴尬场面。使用<code>ConcurrentHashMap</code>的<code>putIfAbsent</code>方法来避免这个问题：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache4</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Computable</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computable&lt;A,V&gt; c;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentHashMap&lt;A, Future&lt;V&gt;&gt; cache;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache4</span><span class=\"params\">(Computable&lt;A,V&gt; computable)</span></span>&#123;</span><br><span class=\"line\">        c = computable;</span><br><span class=\"line\">        cache = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">compute</span><span class=\"params\">(A a)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Future&lt;V&gt; future = cache.get(a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (future == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            FutureTask&lt;V&gt; ft = <span class=\"keyword\">new</span> FutureTask(<span class=\"keyword\">new</span> Callable&lt;V&gt;()&#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> c.compute(a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            future = cache.putIfAbsent(a,ft);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (future == <span class=\"keyword\">null</span>)&#123;future = ft;ft.run();&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> future.get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"ERR\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","next":{"title":"（三）对象的组合 —— 《Java并发编程实战》","slug":"thread4j-c4-obj-fit"},"link":"http://lilpig.site/post/thread4j-c5-builtin-module/","toc":[{"title":"<code>concurrent</code>并发数据结构","id":"concurrent并发数据结构","index":"1","children":[{"title":"ConcurrentHashMap","id":"ConcurrentHashMap","index":"1.1"},{"title":"CopyOnWriteArrayList","id":"CopyOnWriteArrayList","index":"1.2"},{"title":"BlockingQueue","id":"BlockingQueue","index":"1.3"},{"title":"双端队列与密取","id":"双端队列与密取","index":"1.4"},{"title":"同步工具类","id":"同步工具类","index":"1.5","children":[{"title":"CountDownLatch","id":"CountDownLatch","index":"1.5.1"},{"title":"FutureTask","id":"FutureTask","index":"1.5.2"},{"title":"Semaphore信号量","id":"Semaphore信号量","index":"1.5.3"}]},{"title":"构建结果缓存","id":"构建结果缓存","index":"1.6"}]}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/thread4j-c5-builtin-module/\" title=\"（四）基础构建模块 —— 《Java并发编程实战》\">http://lilpig.site/post/thread4j-c5-builtin-module/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}