{"title":"GO语言笔记和习题","date":"2019-12-07T06:52:27.000Z","slug":"go-go1","tags":["Golang"],"categories":["golang"],"updated":"2019-12-07T06:52:31.281Z","content":"<p>开始学Go语言了，今天把GO语言的语法中我认为和其他语言差异很大的值得记录的地方记录下来。并记录了一些官方习题。</p>\n<h2 id=\"命名返回值\">命名返回值<a href=\"post/go-go1#命名返回值\"></a></h2><p>Go语言中的函数返回值可以是命名的，它的好处就是可以直接作为文档使用，并且看起来会很简洁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(sum <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\tx = sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\ty = sum - x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tx,y := split(<span class=\"number\">17</span>)</span><br><span class=\"line\">\tfmt.Println(x,y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到命名返回值可以直接使用<code>return</code>语句返回，只要函数体中有对应变量就好。</p>\n<p>不过官方并不推荐将直接返回语句应用在长函数中，因为会影响代码可读性。</p>\n<h2 id=\"if前置语句\">if前置语句<a href=\"post/go-go1#if前置语句\"></a></h2><p>在<code>for</code>循环中可以有一个初始化语句，但是大部分语言都没提供一个if语句的初始化语句，然而有时候这是必要的。Go语言允许在if中存在一个初始化语句，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> conn,err := connect() ; err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，如果<code>connect()</code>方法返回的错误为空，就执行if里面的内容。这样做除了简洁外，还可以把<code>conn</code>和<code>err</code>的作用域限制在if语句内。</p>\n<h2 id=\"结构体指针\">结构体指针<a href=\"post/go-go1#结构体指针\"></a></h2><p>假如我们有一个指向结构体的指针，可以通过<code>(*p).X</code>访问其中的字段，相当于先针对指针取值，再取字段。</p>\n<p>在C++中可以通过<code>-&gt;</code>运算符取字段，go中为了避免麻烦，直接允许通过指针访问结构体中的字段：<code>p.X</code>。它会被编译成<code>(*p).X</code>的形式。</p>\n<h2 id=\"结构体方法\">结构体方法<a href=\"post/go-go1#结构体方法\"></a></h2><p>Go没有类，只有结构体，它为结构体定义方法也和其他语言不太相同。</p>\n<p>它把结构体看做方法的接收者，你需要在定义的方法签名中指定接收者，接收者在方法签名中类似于一个特殊的参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span> <span class=\"title\">Abs</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的<code>Abs</code>方法既是为<code>Vertex</code>结构体定义的方法，<code>Vertex</code>为接收者，可以看到Go中需要把接收者放在方法名前。在方法中可以引用这个接收者，上例中的<code>v</code>类似于其他面向对象编程语言中的<code>this</code>。</p>\n<p>Go官方给出的方法定义是：方法只是个带接收者参数的函数。</p>\n<p>那岂不就是说我们就可以在任意位置给结构体扩展方法了？就像这样：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">times</span><span class=\"params\">(c <span class=\"keyword\">int</span>)</span> <span class=\"params\">(result <span class=\"keyword\">string</span>)</span></span>&#123; <span class=\"comment\">//cannot define new methods on non-local type string</span></span><br><span class=\"line\">    result = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i&lt;c ; i++ &#123;</span><br><span class=\"line\">        result = result + s</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"a\"</span>.times(<span class=\"number\">20</span>)) <span class=\"comment\">//\"a\".times undefined (type string has no field or method times)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>显然不是的，运行代码后编译不会通过，因为Go只允许为包内的结构体定义方法。而string的定义显然不在我们的包里。</p>\n<p>我们可以通过自定义类型来完成需求，我们只需要这样修改代码：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyString <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span> <span class=\"title\">times</span><span class=\"params\">(c <span class=\"keyword\">int</span>)</span> <span class=\"params\">(result MyString)</span></span>&#123;</span><br><span class=\"line\">\tresult = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i&lt;c ; i++ &#123;</span><br><span class=\"line\">\t\tresult = result + s</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(MyString(<span class=\"string\">\"a\"</span>).times(<span class=\"number\">20</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指针接收者\">指针接收者<a href=\"post/go-go1#指针接收者\"></a></h2><p>你可以定义方法的接收者为指针，这样可以修改指向者的值，因为在普通的值接收者（上例）中，Go会先对原始的Vertex对象创建副本，然后再传入方法，也就是说我们操作的都是副本。所以当你的方法需要修改原始对象的值时就使用指针接收者。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span> <span class=\"title\">Abs</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span> <span class=\"title\">Scale</span><span class=\"params\">(f <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>指针接收者接受一个指针，而我们调用的是<code>v.Scale(10)</code>，它会被编译为<code>(&amp;v).Scale(10)</code></p>\n<p>相反，对于普通函数来说，接受一个值作为参数的函数，你传入的参数既能是值又能是指。</p>\n<h2 id=\"切片练习\">切片练习<a href=\"post/go-go1#切片练习\"></a></h2><p><a href=\"https://tour.go-zh.org/moretypes/18\" target=\"_blank\" rel=\"noopener\">在线Playground</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现 Pic。它应当返回一个长度为 dy 的切片，其中每个元素是一个长度为 dx，元素类型为 uint8 的切片。当你运行此程序时，它会将每个整数解释为灰度值（好吧，其实是蓝度值）并显示它所对应的图像。</span><br><span class=\"line\"></span><br><span class=\"line\">图像的选择由你来定。几个有趣的函数包括 (x+y)/2, x*y, x^y, x*log(y) 和 x%(y+1)。</span><br><span class=\"line\"></span><br><span class=\"line\">（提示：需要使用循环来分配 [][]uint8 中的每个 []uint8；请使用 uint8(intValue) 在类型之间转换；你可能会用到 math 包中的函数。）</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"golang.org/x/tour/pic\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Pic</span><span class=\"params\">(dx, dy <span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">uint8</span></span> &#123;</span><br><span class=\"line\">\touter := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">uint8</span>,dy)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y := <span class=\"keyword\">range</span> outer &#123;</span><br><span class=\"line\">\t\tinter := <span class=\"built_in\">make</span>([]<span class=\"keyword\">uint8</span>,dx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"keyword\">range</span> inter &#123;</span><br><span class=\"line\">\t\t\tinter[x] = <span class=\"keyword\">uint8</span>(x%(y+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\touter[y] = inter</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> outer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpic.Show(Pic)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"映射练习\">映射练习<a href=\"post/go-go1#映射练习\"></a></h2><p><a href=\"https://tour.go-zh.org/moretypes/23\" target=\"_blank\" rel=\"noopener\">在线Playground</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现 WordCount。它应当返回一个映射，其中包含字符串 s 中每个“单词”的个数。函数 wc.Test 会对此函数执行一系列测试用例，并输出成功还是失败。</span><br><span class=\"line\"></span><br><span class=\"line\">你会发现 strings.Fields 很有帮助。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/tour/wc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WordCount</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">map</span>[<span class=\"title\">string</span>]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapToResult <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tmapToResult = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,keyword := <span class=\"keyword\">range</span> strings.Fields(s) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> curV,ok := mapToResult[keyword]; ok &#123;</span><br><span class=\"line\">\t\t\tmapToResult[keyword] = curV + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmapToResult[keyword] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mapToResult</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\twc.Test(WordCount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包练习（斐波那契闭包）\">闭包练习（斐波那契闭包）<a href=\"post/go-go1#闭包练习（斐波那契闭包）\"></a></h2><p><a href=\"https://tour.go-zh.org/moretypes/26\" target=\"_blank\" rel=\"noopener\">在线Playground</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">让我们用函数做些好玩的事情。</span><br><span class=\"line\"></span><br><span class=\"line\">实现一个 fibonacci 函数，它返回一个函数（闭包），该闭包返回一个斐波纳契数列 `(0, 1, 1, 2, 3, 5, ...)`。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个“返回int的函数”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tlast,curr := <span class=\"number\">0</span> ,<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(result <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\t\tresult = last + curr</span><br><span class=\"line\">\t\tlast = curr</span><br><span class=\"line\">\t\tcurr = result</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := fibonacci()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(f())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Stringer练习\">Stringer练习<a href=\"post/go-go1#Stringer练习\"></a></h2><p><a href=\"https://tour.go-zh.org/methods/18\" target=\"_blank\" rel=\"noopener\">在线Playground</a></p>\n<p>Stringer是一个接口，用于其它类型的字符串表示，它像Java中的<code>toString</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Stringer interface &#123;</span><br><span class=\"line\">\tString() string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过让 IPAddr 类型实现 fmt.Stringer 来打印点号分隔的地址。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，IPAddr&#123;1, 2, 3, 4&#125; 应当打印为 &quot;1.2.3.4&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPAddr [<span class=\"number\">4</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> 给 IPAddr 添加一个 \"String() string\" 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(addr IPAddr)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%d.%d.%d.%d\"</span>,addr[<span class=\"number\">0</span>],addr[<span class=\"number\">1</span>],addr[<span class=\"number\">2</span>],addr[<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thosts := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]IPAddr&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"loopback\"</span>:  &#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"googleDNS\"</span>: &#123;<span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> name, ip := <span class=\"keyword\">range</span> hosts &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"%v: %v\\n\"</span>, name, ip)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习-Reader\">练习 Reader<a href=\"post/go-go1#练习-Reader\"></a></h2><p><a href=\"https://tour.go-zh.org/methods/22\" target=\"_blank\" rel=\"noopener\">在线Playground</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现一个 Reader 类型，它产生一个 ASCII 字符 &apos;A&apos; 的无限流。</span><br><span class=\"line\"></span><br><span class=\"line\">Reader接口有如下方法</span><br><span class=\"line\">func (T) Read(b []byte) (n int, err error)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"golang.org/x/tour/reader\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyReader <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> 给 MyReader 添加一个 Read([]byte) (int, error) 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(reader MyReader)</span> <span class=\"title\">Read</span><span class=\"params\">(buf []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span>&#123;</span><br><span class=\"line\">\tn := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> buf &#123;</span><br><span class=\"line\">\t\tbuf[i] = <span class=\"string\">'A'</span></span><br><span class=\"line\">\t\tn++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n ,<span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\treader.Validate(MyReader&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"rot13Reader-练习\">rot13Reader 练习<a href=\"post/go-go1#rot13Reader-练习\"></a></h2><p><a href=\"https://tour.go-zh.org/methods/23\" target=\"_blank\" rel=\"noopener\">在线Playground</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">练习：rot13Reader</span><br><span class=\"line\">有种常见的模式是一个 io.Reader 包装另一个 io.Reader，然后通过某种方式修改其数据流。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，gzip.NewReader 函数接受一个 io.Reader（已压缩的数据流）并返回一个同样实现了 io.Reader 的 *gzip.Reader（解压后的数据流）。</span><br><span class=\"line\"></span><br><span class=\"line\">编写一个实现了 io.Reader 并从另一个 io.Reader 中读取数据的 rot13Reader，通过应用 rot13 代换密码对数据流进行修改。</span><br><span class=\"line\"></span><br><span class=\"line\">rot13Reader 类型已经提供。实现 Read 方法以满足 io.Reader。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"><span class=\"string\">\"io\"</span></span><br><span class=\"line\"><span class=\"string\">\"os\"</span></span><br><span class=\"line\"><span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> rot13Reader <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tr io.Reader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(reader rot13Reader)</span> <span class=\"title\">Read</span><span class=\"params\">(buf []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span>&#123;</span><br><span class=\"line\">\tn , err := reader.r.Read(buf)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i,b := <span class=\"keyword\">range</span> buf &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> b &gt;= <span class=\"string\">'A'</span> &amp;&amp; b &lt; <span class=\"string\">'N'</span> || b &gt;= <span class=\"string\">'a'</span> &amp;&amp; b &lt; <span class=\"string\">'n'</span>:</span><br><span class=\"line\">\t\t\tbuf[i] = b + <span class=\"number\">13</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> b &gt;= <span class=\"string\">'N'</span> &amp;&amp; b &lt;= <span class=\"string\">'Z'</span> || b &gt;= <span class=\"string\">'n'</span> &amp;&amp; b &lt;= <span class=\"string\">'z'</span>:</span><br><span class=\"line\">\t\t\tbuf[i] = b - <span class=\"number\">13</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := strings.NewReader(<span class=\"string\">\"Lbh penpxrq gur pbqr!\"</span>)</span><br><span class=\"line\">\tr := rot13Reader&#123;s&#125;</span><br><span class=\"line\">\tio.Copy(os.Stdout, &amp;r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"亲密爱人（Covor 法老）","slug":"other-lover"},"next":{"title":"VIM中被我忽略的技巧(复制篇)","slug":"vim-skill3"},"link":"http://lilpig.site/post/go-go1/","toc":[{"title":"命名返回值","id":"命名返回值","index":"1"},{"title":"if前置语句","id":"if前置语句","index":"2"},{"title":"结构体指针","id":"结构体指针","index":"3"},{"title":"结构体方法","id":"结构体方法","index":"4"},{"title":"指针接收者","id":"指针接收者","index":"5"},{"title":"切片练习","id":"切片练习","index":"6"},{"title":"映射练习","id":"映射练习","index":"7"},{"title":"闭包练习（斐波那契闭包）","id":"闭包练习（斐波那契闭包）","index":"8"},{"title":"Stringer练习","id":"Stringer练习","index":"9"},{"title":"练习 Reader","id":"练习-Reader","index":"10"},{"title":"rot13Reader 练习","id":"rot13Reader-练习","index":"11"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/go-go1/\" title=\"GO语言笔记和习题\">http://lilpig.site/post/go-go1/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}