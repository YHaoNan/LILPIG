{"title":"（一）基本概念 —— Java多线程学习","date":"2019-07-24T06:13:30.000Z","slug":"thread4j-intro","tags":["java","thread"],"categories":["Java多线程"],"updated":"2019-07-24T13:16:56.690Z","content":"<p>一直对多线程的很多东西很模糊，以前看过一本《Java多线程设计模式》，讲了很多多线程应用程序的设计模式，感觉受益匪浅，但是当时正在准备高考，看了之后没时间实现出来，也没时间记录，现在基本全都忘了。</p>\n<p>最近在读《Java并发编程实战》，顺便把读到的记下来，转换成自己的东西。</p>\n<h2 id=\"基本概念\">基本概念<a href=\"post/thread4j-intro#基本概念\"></a></h2><p>多线程的概念、线程和进程的区别这些内容基本上你随便打开一篇多线程相关的文章或者是书籍时都会说，我就不准备在这个地方废话了。</p>\n<h3 id=\"线程安全\">线程安全<a href=\"post/thread4j-intro#线程安全\"></a></h3><p>线程安全就是说一个类（或者方法？）被多个线程同时访问时，它会正常的工作，不会出错。这个错不一定是显式的异，更多是其中的数据出现错乱。</p>\n<p>比如如下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">incr</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> ++counter;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法将类中的一个变量<code>counter</code>递增返回，变量递增要进行三个操作，先读取<code>counter</code>的值，再加一，最后再设置给<code>counter</code>，尽管这三个操作对你并不可见，但是Java中它的确是这样的。</p>\n<p>这时如果线程A、B同时访问这个方法时，我们希望<code>incr</code>方法能正确的递增，但是操作顺序很有可能是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter为0</span><br><span class=\"line\">A读取counter为0</span><br><span class=\"line\">B读取counter为0</span><br><span class=\"line\">A递增 counter为1</span><br><span class=\"line\">B递增 counter为1</span><br><span class=\"line\">A设置counter为1并返回</span><br><span class=\"line\">B设置counter为1并返回</span><br></pre></td></tr></table></figure></p>\n<p>它并没有返回正确的结果，这就是线程不安全的例子。</p>\n<h3 id=\"原子操作\">原子操作<a href=\"post/thread4j-intro#原子操作\"></a></h3><p>所谓原子操作，字面意思就是不可分割的操作，也就是一次完成的操作，上面的递增就不是一个原子操作，它分为三次才能操作完。</p>\n<h3 id=\"竞态条件\">竞态条件<a href=\"post/thread4j-intro#竞态条件\"></a></h3><p>竞态条件简单的说就是返回的数据已经丧失了有效性，比如如下的单例模式代码就会有产生竞态：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> site.lilpig.tlearn01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonRace</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonRace instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonRace <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonRace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>假如A、B两个线程共同调用<code>getInstance</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A进入getInstance</span><br><span class=\"line\">B进入getInstance</span><br><span class=\"line\">A判断instance为null</span><br><span class=\"line\">B判断instance为null</span><br><span class=\"line\">A创建instance并返回</span><br><span class=\"line\">B创建instance并返回</span><br></pre></td></tr></table></figure></p>\n<p>A和B返回了两个不一样的instance，这在单例模式中是绝对不被允许的，如果后面的线程不会和AB产生竞态的话，那么它们用的应该都是B创建的instance，那么如果线程A给instance设置了一些状态，在整个应用中这些状态都是没用的，因为其他线程用到的instance和A不是同一个。</p>\n<h3 id=\"锁\">锁<a href=\"post/thread4j-intro#锁\"></a></h3><p>锁是针对一个对象的，默认情况下的对象就是该对象本身。用锁锁住的操作都可以视为一个原子操作，当一个线程进入时会持有锁，这时其他线程无法进入此操作，当线程操作完毕退出时会释放锁，其他线程开始争抢这个锁。</p>\n<p>例如修改之前计数器的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"keyword\">synchronized</span> <span class=\"title\">incr</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> ++counter;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以把本来是三步的操作当作一个原子操作，因为操作是不可分割的，所以不可能会产生线程不安全的问题。</p>\n<h3 id=\"死锁\">死锁<a href=\"post/thread4j-intro#死锁\"></a></h3><p>A持有锁1并想获得锁2，B持有锁2并想获得锁1，这个时候两个线程会永远的等待下去。</p>\n<h3 id=\"重入\">重入<a href=\"post/thread4j-intro#重入\"></a></h3><p>试想一下，如果有一个这样的代码会出现啥情况<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"keyword\">synchronized</span> <span class=\"title\">incrWithTimes</span><span class=\"params\">(<span class=\"keyword\">int</span> times)</span></span>&#123;</span><br><span class=\"line\">    ++counter;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> times==<span class=\"number\">1</span>?counter:incrWithTimes(times-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果直接看的话，我们可能认为它会发生死锁，因为在return语句递归调用<code>incrWithTimes</code>的时候，线程持有的锁还没有被释放，显然也不能进入这个方法，就是说线程一直等着自己释放锁。</p>\n<p>但是它能正确运行，这就说明Java获取锁操作是基于线程的而不是方法，就是说同一个线程可以在自己持有锁的状态下继续获取锁，Java会提供一个计数器，每次获取锁加1，直到所有操作完成，计数器变成0，这时锁被释放。</p>\n<p>这个现象叫做重入。</p>\n<h3 id=\"活跃性与性能\">活跃性与性能<a href=\"post/thread4j-intro#活跃性与性能\"></a></h3><p>如果直接对所有操作加锁，那么肯定会出现性能问题，从加锁的关键字就可以看出，加锁后所有的线程的操作都是串行的，也就是同步的，这完全就发挥不出多线程异步的优势，所以要有针对性的加锁。</p>\n<p>假设我们有这样的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> site.lilpig.tlearn01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//模拟任务</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//随机选一个200或2000来模拟现实任务中极快和极慢的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> delayMS = <span class=\"keyword\">new</span> Random().nextBoolean()?<span class=\"number\">200</span>:<span class=\"number\">2000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(delayMS);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Catch an exception...\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//计数</span></span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Counter:\"</span>+counter+<span class=\"string\">\",Input:\"</span>+num+<span class=\"string\">\",Result:\"</span>+num*num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TaskService service = <span class=\"keyword\">new</span> TaskService();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">            lunchANewTask(service,i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lunchANewTask</span><span class=\"params\">(TaskService service,<span class=\"keyword\">int</span> param)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                service.doTask(param);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个代码会有一个问题，你会发现把整个方法都加上一个synchronized后，整个操作变成了串行的，所有线程一个一个的通过（因为是抢占锁所以不一定是按顺序），当一个线程调用doTask时，如果随即延时是200毫秒还可以忍受，等200毫秒下一个线程就会执行，而如果是2000毫秒，下一个线程会等好久也得不到执行的机会。如果此时我们设计的是一个web后端应用，如果我们面对的是成千上万的用户，而不是上面示例中的20次调用，那么整个服务器都会阻塞，可能用户今天发起的请求，我们隔了几天才会处理，因为它前面还可能有若干个请求在等待处理…这是很可怕的。</p>\n<p>分析上面的代码，其实我们只有计数的时候调用了方法作用域外部的变量，也只有<code>counter</code>变量会引发线程不安全问题，所以我们只需要针对<code>counter</code>自增操作加锁就可以，这个操作很快，加锁也不会引起阻塞。而上面用<code>Thread.sleep</code>模拟的执行任务因为没有调用什么其他变量，不会引起线程安全问题，这个操作根本不用加锁。</p>\n<p>所以我们修改代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> delayMS = <span class=\"keyword\">new</span> Random().nextBoolean()?<span class=\"number\">200</span>:<span class=\"number\">2000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(delayMS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Catch an exception...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Counter:\"</span>+counter+<span class=\"string\">\",Input:\"</span>+num+<span class=\"string\">\",Result:\"</span>+num*num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只在用到外部变量的时候加锁，再运行时发现速度很快，上面的模拟任务处理操作也都是同时执行的。</p>\n<p>所以千万不要对外部的大型IO操作或者什么耗时操作加锁，你需要根据实际情况进行加锁，而不是上来就加整个方法。</p>\n","prev":{"title":"Nodejs中的异步编程 -- Async模块","slug":"nodejs-aysnc"},"next":{"title":"undefined","slug":"other-story01"},"link":"http://lilpig.site/post/thread4j-intro/","toc":[{"title":"基本概念","id":"基本概念","index":"1","children":[{"title":"线程安全","id":"线程安全","index":"1.1"},{"title":"原子操作","id":"原子操作","index":"1.2"},{"title":"竞态条件","id":"竞态条件","index":"1.3"},{"title":"锁","id":"锁","index":"1.4"},{"title":"死锁","id":"死锁","index":"1.5"},{"title":"重入","id":"重入","index":"1.6"},{"title":"活跃性与性能","id":"活跃性与性能","index":"1.7"}]}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/thread4j-intro/\" title=\"（一）基本概念 —— Java多线程学习\">http://lilpig.site/post/thread4j-intro/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}