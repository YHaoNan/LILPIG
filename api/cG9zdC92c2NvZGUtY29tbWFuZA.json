{"title":"VSCode扩展开发 - Command","date":"2019-05-30T07:58:24.000Z","slug":"vscode-command","tags":["editor","vscode"],"categories":["VSCode"],"updated":"2019-05-30T09:34:16.756Z","content":"<p>这回我们来研究下VSCode扩展开发中一个非常重要的东西，Command。</p>\n<p>VSCode之所以这么强大，都是因为Command在工作，虽然你可能没有意识到它的存在，但是它确确实实的已经为你服务了无数回。</p>\n<p>当我们每次使用<code>Ctrl+/</code>在当前行加入一个注释，当我们每次为代码生成文档，甚至我们每次打开一个文件夹或者文件，背后都是Command在工作。VSCode提供了大量的<a href=\"https://code.visualstudio.com/api/references/commands\" target=\"_blank\" rel=\"noopener\">内建Command</a>支撑它更好的工作。</p>\n<p>Command可以绑定在一个快捷键上，可以在extension的功能中运行，可以出现在各种地方。</p>\n<p>现在请你打开<code>Ctrl-Shift-P</code>，然后输入<code>Toggle Line Comment</code>并运行，你会发现这和你点击<code>Ctrl+/</code>的效果是一样的，都在当前行插入了一个注释。我们打开VSCode的键盘映射表可以看到这个快捷键就是绑定的这个命令。</p>\n<h3 id=\"创建一个新的命令\">创建一个新的命令<a href=\"post/vscode-command#创建一个新的命令\"></a></h3><h4 id=\"注册命令\">注册命令<a href=\"post/vscode-command#注册命令\"></a></h4><p>创建命令之前需要注册命令，如果你使用VSCode的生成器生成项目，那么默认会添加一个HelloWorld的命令进去，我们大胆的删除它。</p>\n<p>生成的代码在<code>src/extension.ts</code>中。</p>\n<p>我们使用<code>vscode.commands.registerCommand</code>注册了一个命令，并且传入了一个该命令被触发时的回调函数。在回调函数中，我们调用了<code>vscode.window.showInformationMessage</code>来显示了一个通知消息。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> vscode <span class=\"keyword\">from</span> <span class=\"string\">'vscode'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span>(<span class=\"params\">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Congratulations, your extension \"helloworld\" is now active!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> command = <span class=\"string\">'ext.firstExtension'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> disposable = vscode.commands.registerCommand(command,<span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span> = 'Babe~~'</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tvscode.window.showInformationMessage(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>~~`</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcontext.subscriptions.push(disposable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deactivate</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>activate和deactivate两个函数的用法官方文档里有介绍，这里简单说一下，activate就是插件被激活时调用的方法，另一个看名字就知道是最后用来释放资源的方法。</p>\n<p>如果运行这个命令，我们希望看到VSCode会弹出一个<code>Hello xxx</code>的提示消息，默认是<code>Hello Babe~~</code>。但是现在还不行，我们只是注册了命令和处理函数之间的映射，如果想让它对用户可见，我们还得在<code>package.json</code>中加入一些配置。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"contributes\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"commands\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"ext.firstExtension\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Say Hello\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>commands节点是一个列表，如果你是使用VSCode的工具生成的话，应该已经有了一个HelloWorld的命令在这里注册了，那么你就只需要再添加你的注册代码就行了。</p>\n<p>现在运行我们的插件，打开命令面板，他就会显示了。</p>\n<p>不过我们运行它好像并没有什么用，因为事实上我们的命令还没有激活。我们还需要注册一个东西。</p>\n<p>在你的<code>activationEvents</code>节点中添加你的插件。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"activationEvents\": [</span><br><span class=\"line\">    <span class=\"string\">\"onCommand:ext.firstExtension\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>现在在运行我们就可以看到提示了。</p>\n<h3 id=\"控制Command在何时出现\">控制Command在何时出现<a href=\"post/vscode-command#控制Command在何时出现\"></a></h3><p>默认情况下，我们的Command用户可以在任意情况下调用，但是很多时候我们的需求是只有在特定情况下才可以调用。试想一下我们开发一个Markdown的Extension，需要提供一个Command添加表格，那么我们肯定是只希望在Markdown文件中才能调用我们的Command，在其他时不能。</p>\n<p><code>menus.commandPalettle</code>可以让我们的命令在特殊情况下在CommandPalettle中显示，我们需要这样写：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"contributes\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"menus\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"commandPalette\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"ext.firstExtension\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"when\"</span>: <span class=\"string\">\"editorLangId == markdown\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样一来就只有在Markdown中才能看到我们的Command了。</p>\n<h3 id=\"参考\">参考<a href=\"post/vscode-command#参考\"></a></h3><p><a href=\"https://code.visualstudio.com/api/extension-guides/command\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/api/extension-guides/command</a></p>\n","next":{"title":"效率神器 - VSCode的Snippets","slug":"vscode-snippets"},"link":"http://yoursite.com/post/vscode-command/","reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://yoursite.com/post/vscode-command/\" title=\"VSCode扩展开发 - Command\">http://yoursite.com/post/vscode-command/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}