{"title":"（七）任务执行框架 —— 《Java并发编程实战》","date":"2019-08-03T11:13:08.000Z","slug":"thread4j-c8-task-exec-fw","tags":["java","thread"],"categories":["Java多线程"],"updated":"2019-08-03T12:26:43.634Z","content":"<p>之前我们多少接触过一些<code>Executor</code>方面的内容，知道了它是Java提供的任务执行框架，能很方便的管理线程，对任务进行管理控制。</p>\n<p>在实际开发中，线程池设置的大小需要仔细斟酌或者经过程序计算动态修改，因为线程池过大或者过小都会有问题。如果线程池过大，会造成大部分系统资源被占用但却是闲置的，等于占着茅坑不拉屎，而线程池如果过小则会导致响应缓慢，大部分系统资源没有被利用上。</p>\n<p>如果任务中存在依赖关系，比如一个任务需要另一个任务的结果，那么这时如果它们还在一个线程池中的话，在线程吃过小或任务过多的时候可能会造成死锁，我们称之为“饥饿死锁”。看个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarvationDeadLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable task = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"doSomething...\"</span>);</span><br><span class=\"line\">                Future future = executor.submit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    future.get();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Over...\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        executor.submit(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个代码就会造成饥饿死锁，为了缩小问题范围，我们把线程池大小设置成了1，并在任务中再一次提交自己并等待获取值。因为线程池只有一个，被当前任务占用了，第二个任务等着第一个任务结束后运行，而第一个任务又因为用<code>future.get</code>获取第二个任务的结果而阻塞，所以这个时候就会造成死锁，你会发现<code>finally</code>块中的<code>Over...</code>永远不会被打印，并且程序永远不会结束运行。</p>\n<p>而且就算不是完全阻塞，只是线程中的某个操作比较耗时，那当线程池过小的时候响应还是会慢。不过对于这种问题我们可以使用超时技术，Java平台中的阻塞方法一般都提供了两个版本，一个是不带超时的，一个是带超时的版本，比如我们可以把上面的代码改进：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarvationDeadLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable task = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"doSomething...\"</span>);</span><br><span class=\"line\">                Future future = executor.submit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    future.get(<span class=\"number\">5</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (TimeoutException e) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Can not get the result of the sub task...\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Over...\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        executor.submit(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们给<code>future.get</code>设置了超时，如果五秒获取不到子任务的结果就放弃，这时会抛出一个<code>TimeoutException</code>可以捕获到它做一些操作，由于这个示例都是用的一个<code>Runnable</code>实例所以会一直死循环执行任务。</p>\n<h2 id=\"设置线程池大小\">设置线程池大小<a href=\"post/thread4j-c8-task-exec-fw#设置线程池大小\"></a></h2><p>根据处理器个数，内存大小，数据库连接，还有执行任务的类型确定线程池大小，这个在原书中做了详细介绍，我不写上来了。</p>\n<p>除了显式的设置线程池大小，还有隐式原因可能让你间接的限制了线程池中的线程数量，比如你的JDBC连接数量只有10个，任务中需要依赖JDBC连接，那么无论你的线程池多大都是没用的，线程池中永远只能有10个（或更少）任务。</p>\n<h2 id=\"配置ThreadPoolExecutor\">配置ThreadPoolExecutor<a href=\"post/thread4j-c8-task-exec-fw#配置ThreadPoolExecutor\"></a></h2><p>Thread参数最多的构造器如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>它们的作用如下：<br>名字|作用<br>:-:|:-:<br>corePoolSize|核心线程数，就是池子中一般情况下的线程数量，线程会保持在这个数量，少了就创建，多余的会删掉<br>maximumPoolSize|最大线程数，到了最大线程数后其他的任务会阻塞等待<br>keepAliveTime|线程存活时间，核心线程数之外的线程的存活时间，到时间没任务使用会删除<br>unit|时间单位<br>workQueue|工作队列，线程池中线程的队列<br>threadFactory|线程工厂，线程池创建新线程时会用到工厂方法<br>handler|拒绝执行处理器，当线程池满了后的拒绝处理器</p>\n<p><code>Executors</code>提供了一些方法创建线程池，比如<code>newFixedThreadPool</code>，<code>newCachedThreadPool</code>，前者把<code>corePoolSize</code>和<code>maximumPoolSize</code>全设置成传入的<code>nThreads</code>，<code>keepAliveTime</code>设置成0，这样不会超时。而后者把<code>corePoolSize</code>设置成0，<code>maximumPoolSize</code>设置成<code>Integer.MAX_VALUE</code>，<code>keepAliveTime</code>为60秒，也就是一个线程都不留，只要过了超时时间就不用了，然后来新任务如果线程池满了就会创建新的线程。</p>\n<p>其实如果业务不是很复杂，我们直接利用<code>ThreadPoolExecutor</code>的构造器就可以设计出符合自己需求的线程池，就像官方提供的那些线程池一样，但是很多情况下我们不能直接用，我们需要更复杂的逻辑，比如在任务进入和执行完毕后写入日志，添加一个未捕获异常，那么我们就要自己继承<code>ThreadPoolExecutor</code>了，下面我们就一起深入了解下它的各种用法。</p>\n<h2 id=\"任务队列\">任务队列<a href=\"post/thread4j-c8-task-exec-fw#任务队列\"></a></h2><p>上面我们看到了我们需要在<code>ThreadPoolExecutor</code>的构造器中设置任务队列，默认的<code>newFixedThreadPool</code>使用的是一个无界的<code>LinkedBlockingQueue</code>，而<code>newCachedThreadPool</code>使用的是<code>SynchronousQueue</code>，它其实不是一个队列，它通常作为生产者和消费者之间直接传递工作的一个伪队列，它会把任务直接交给消费者，这适用于没有限制的，大的线程池。</p>\n<p>有时为了避免资源消耗，会使用有界的阻塞队列，有界的就会有满的时候，我们成为“饱和”，队列如果满了其他任务就要阻塞，等待空闲位置，这时候<code>RejectedExecutionHandler</code>就发挥作用了，它是当发生饱和时的拒绝处理器，有如下几个处理器：<br>名称|策略<br>:-:|:-:<br>AbortPolicy|直接拒绝任务并抛出异常<br>CallerRunsPolicy|用调用者线程执行任务<br>DiscardPolicy|无声的直接拒绝任务，不会抛出异常<br>DiscardOldestPolicy|无声的拒绝最老的任务</p>\n<p>下面的代码用<code>CallerRunsPolicy</code>作为拒绝处理器，并限制阻塞队列最大为10：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadPoolExecutor executor =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">10</span>,<span class=\"number\">10</span>,</span><br><span class=\"line\">                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>));</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        executor.setRejectedExecutionHandler(<span class=\"keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"TASK RUNNING...\"</span>+Thread.currentThread().getName());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2000</span>;i++)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            executor.submit(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你会时不时的发现控制台会打印一个<code>TASK RUNNING...main</code>，这代表任务被退回到了主线程执行。</p>\n<h2 id=\"线程工厂\">线程工厂<a href=\"post/thread4j-c8-task-exec-fw#线程工厂\"></a></h2><p><code>ThreadFactory</code>是一个接口，实现这个接口的<code>newThread</code>方法返回一个你自己的线程，你可以在这里定制你自己的线程对象，线程池会通过你的工厂来创建新线程，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> AtomicInteger created = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(Runnable runnable,String name)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(runnable,name+created.incrementAndGet());</span><br><span class=\"line\">            setUncaughtExceptionHandler(<span class=\"keyword\">new</span> UncaughtExceptionHandler() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                    System.out.println(getName()+<span class=\"string\">\" found a uncaught exception...\"</span>+e.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> created.get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyThread(r,<span class=\"string\">\"MyThread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的示例为线程设置了自己的名字，并且设置了一个未捕获异常的处理器，所有未捕获的异常都会被这个处理器捕获，你可以在这里写入日志或做一些别的操作。</p>\n<h2 id=\"扩展ThreadPoolExecutor\">扩展ThreadPoolExecutor<a href=\"post/thread4j-c8-task-exec-fw#扩展ThreadPoolExecutor\"></a></h2><p>上面的一通操作你其实已经可以很灵活的定制线程池了，但是很多时候我们要在任务开始和结束记录日志，或者做一些别的操作，这时我们可以继承<code>ThreadPoolExecutor</code>。</p>\n<p><code>ThreadPoolExecutor</code>提供了<code>beforeExecute</code>和<code>afterExecute</code>方法帮助我们完成这个想法。</p>\n<p>下面我们通过一个示例结合上面学到的所有东西来制作一个自动关闭的线程池，这个线程池只接受指定数量的线程，多余的不会接了，并且当任务都执行完，它还会自动关闭。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoCloseThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger doneTaskCount;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger canAddTaskCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AutoCloseThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(nThreads, nThreads, keepAliveTime, unit, <span class=\"keyword\">new</span> LinkedBlockingQueue(nThreads), threadFactory);</span><br><span class=\"line\">            doneTaskCount = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\">            canAddTaskCount = <span class=\"keyword\">new</span> AtomicInteger(nThreads);</span><br><span class=\"line\">            setRejectedExecutionHandler(<span class=\"keyword\">new</span> AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canAddTaskCount.decrementAndGet()==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Can not submit a task because the pool is fulled!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.submit(task);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterExecute</span><span class=\"params\">(Runnable r, Throwable t)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canAddTaskCount.incrementAndGet()==<span class=\"keyword\">this</span>.getMaximumPoolSize()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                shutdown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.afterExecute(r, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadPoolExecutor executor =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> AutoCloseThreadPoolExecutor(<span class=\"number\">10</span>,</span><br><span class=\"line\">                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> MyThreadFactory());</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"TASK RUNNING...\"</span>+Thread.currentThread().getName());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2000</span>;i++)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            executor.submit(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过修改它的<code>submit</code>方法和<code>afterExecute</code>实现了限制提交和关闭功能。</p>\n","next":{"title":"初识Vue —— 制作 I'll tell you","slug":"vue-exmple"},"link":"http://lilpig.site/post/thread4j-c8-task-exec-fw/","toc":[{"title":"设置线程池大小","id":"设置线程池大小","index":"1"},{"title":"配置ThreadPoolExecutor","id":"配置ThreadPoolExecutor","index":"2"},{"title":"任务队列","id":"任务队列","index":"3"},{"title":"线程工厂","id":"线程工厂","index":"4"},{"title":"扩展ThreadPoolExecutor","id":"扩展ThreadPoolExecutor","index":"5"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/thread4j-c8-task-exec-fw/\" title=\"（七）任务执行框架 —— 《Java并发编程实战》\">http://lilpig.site/post/thread4j-c8-task-exec-fw/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}