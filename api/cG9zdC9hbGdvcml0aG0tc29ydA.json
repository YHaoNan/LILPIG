{"title":"归并排序、快速排序","date":"2019-06-26T11:19:18.000Z","slug":"algorithm-sort","tags":["排序","算法"],"categories":["算法和数据结构"],"updated":"2019-06-27T05:41:54.000Z","content":"<p>会写点业务逻辑，但是算法太渣了，之前看过《算法 第四版》，因为高考，一直没弄这些东西，最近刷leetcode发现我连个归并排序自己都写不出来了，打算重新看看算法这些东西吧，毕竟真的不想只当一个copy、paste的平庸之辈～～</p>\n<h2 id=\"归并排序\">归并排序<a href=\"post/algorithm-sort#归并排序\"></a></h2><p>归并排序的思想就是分治，把问题分成一堆小问题，依次解决，最后整个大问题就解决了。</p>\n<p>如果让你把两个有序的数组<code>arr1</code>和<code>arr2</code>合并为一个有序的数组<code>arr3</code>，你应该会这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr3 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr1.length+arr2.length];</span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i&lt;arr1.length&amp;&amp;j&lt;arr2.length)</span><br><span class=\"line\">    arr3[k++] = arr1[i]&lt;arr2[j]?arr1[i++]:arr2[j++];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理剩余</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i&lt;arr1.length)</span><br><span class=\"line\">    arr3[k++]=arr1[i++];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (secondStart&lt;=hi)</span><br><span class=\"line\">    arr3[k++]=arr2[j++];</span><br></pre></td></tr></table></figure></p>\n<p>归并排序利用分治，每次把数组分两等分，再把每一份分两等分，一直这样分下去，直到最后每份只剩下一个元素，一个元素我们始终可以认为是有序的，然后再把这些小的有序数组依次排成一个大的有序数组，这种操作非常适合递归完成。</p>\n<p>但是每次分成两等分需要耗费许多不必要的空间，所以我们采用原地归并，利用三个变量<code>lo</code>、<code>mid</code>、<code>hi</code>表示最低下标、中间和最大下标，然后把lo-mid看成一份，mid-hi看成一份。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span></span>&#123;</span><br><span class=\"line\">        divide(array,<span class=\"number\">0</span>,array.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//分割数组为两等份(实际不一定是等份)，然后递归再分，lo==hi，也就是分成一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == hi)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (lo+hi)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//继续分左边</span></span><br><span class=\"line\">        divide(array,lo,mid);</span><br><span class=\"line\">        <span class=\"comment\">//继续分右边</span></span><br><span class=\"line\">        divide(array,mid+<span class=\"number\">1</span>,hi);</span><br><span class=\"line\">        merge(array,lo,mid,hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并数组</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstStart = lo;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> secondStart = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempI=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[hi-lo+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (firstStart&lt;=mid&amp;&amp;secondStart&lt;=hi)&#123;</span><br><span class=\"line\">            temp[tempI++] = array[firstStart]&lt;array[secondStart]?array[firstStart++]:array[secondStart++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (firstStart&lt;=mid)&#123;</span><br><span class=\"line\">            temp[tempI++]=array[firstStart++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (secondStart&lt;=hi)&#123;</span><br><span class=\"line\">            temp[tempI++]=array[secondStart++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempI=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">            array[lo++]=temp[tempI++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = &#123;<span class=\"number\">54</span>,<span class=\"number\">41</span>,<span class=\"number\">563</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">47</span>,<span class=\"number\">21</span>,<span class=\"number\">341</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">47</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MergeSort().sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"快速排序\">快速排序<a href=\"post/algorithm-sort#快速排序\"></a></h2><p>快速排序和归并排序一样，也用到了分治思想，它的时间复杂度和归并排序一样，但是归并排序需要一个暂存数组，在空间复杂度上稍高，而快速排序解决了这个问题，并且它的原理和代码都是很简洁的。</p>\n<p>快速排序的思想是在数组中找一个基数，然后遍历整个数组，把比他大的排在它右边，比它小的排在它左边，这样就保证了这个元素的位置是正确的。再以这个正确的位置分割，将左右两边的子数组分别再做此操作，最后所有的元素都会找到自己该有的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        divide(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo&gt;=hi)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找中心位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = partition(arr,lo,hi);</span><br><span class=\"line\">        <span class=\"comment\">//再次对左右两边重复操作</span></span><br><span class=\"line\">        divide(arr,lo,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">        divide(arr,j+<span class=\"number\">1</span>,hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//把第一个元素当做基数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> base=arr[lo];</span><br><span class=\"line\">        <span class=\"comment\">//开始做排队操作</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo &lt; hi)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果右侧的元素比基数大或等于基数，hi--，如果比基数小，就放在左边(放到arr[lo])，因为最开始的元素被作为基数，所以从hi这边开始遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo&lt;hi &amp;&amp; arr[hi]&gt;=base) hi--; </span><br><span class=\"line\">            arr[lo]=arr[hi];</span><br><span class=\"line\">            <span class=\"comment\">//如果左侧的元素比基数小或等于基数，lo++，如果比基数大，则放在右边(放到arr[hi])</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo&lt;hi &amp;&amp; arr[lo]&lt;=base) lo++;</span><br><span class=\"line\">            arr[hi]=arr[lo];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把基数归位</span></span><br><span class=\"line\">        arr[lo] = base;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = &#123;<span class=\"number\">54</span>,<span class=\"number\">41</span>,<span class=\"number\">563</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">47</span>,<span class=\"number\">21</span>,<span class=\"number\">341</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">47</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> QuickSort().sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"优先队列","slug":"algorithm-maxpq"},"next":{"title":"Git常用命令","slug":"other-git"},"link":"http://lilpig.site/post/algorithm-sort/","toc":[{"title":"归并排序","id":"归并排序","index":"1"},{"title":"快速排序","id":"快速排序","index":"2"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/algorithm-sort/\" title=\"归并排序、快速排序\">http://lilpig.site/post/algorithm-sort/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}