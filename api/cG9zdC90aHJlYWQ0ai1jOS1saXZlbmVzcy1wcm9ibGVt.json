{"title":"（八）活跃性问题 —— 《Java并发编程实战》","date":"2019-08-09T03:52:08.000Z","slug":"thread4j-c9-liveness-problem","tags":["java","thread"],"categories":["Java多线程"],"updated":"2019-08-09T05:13:24.451Z","content":"<p>活跃性问题的原因有很多，如死锁、活锁等等。出现活跃性问题后，我们的系统可能无法继续正常工作，或者响应性变差，大量资源被浪费，所以避免发生活跃性问题在多线程开发中还是很重要的。</p>\n<h2 id=\"死锁\">死锁<a href=\"post/thread4j-c9-liveness-problem#死锁\"></a></h2><p>造成死锁的原因是两个线程互相等待获得对方的锁而双方又都不释放锁。例如线程A持有锁L，并想要获得锁M，与此同时，线程B持有锁M，并想要获得锁L，两个线程都在等待着对方释放锁，但是Java的内置锁可没有发现死锁并自动释放的机制，所以两个线程就会僵持不下，造成无限等待。</p>\n<p>就像我们小时候和同班的plmm打闹一样，你抓着她的书包挑逗人家，人家抓着你的肉想要抢回自己的书包，你太疼了于是你说：“松手！”<br>她拧着你肉的手又向右旋转了一些，说：“你先放！”<br>你疼的龇牙咧嘴，但是你还要装作云淡风轻，因为不能在plmm面前丢脸，于是你说：“我不，你先放！”</p>\n<p>你俩的行为就是我们说的死锁。你是线程A，plmm的书包是锁L，plmm是线程B，你的肉是锁M。你持有plmm的书包并想获得plmm手捏着的你的肉的所有权，plmm捏着你的肉，并想要夺回书包。</p>\n<p><em>（PS:我是不知道现在的小孩还这样不了，反正我小时候干过这事，嗯没错就是这样）</em></p>\n<p>看一个死锁的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLockExample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object lockA = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object lockB = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DeadLockExample example = <span class=\"keyword\">new</span> DeadLockExample();</span><br><span class=\"line\"></span><br><span class=\"line\">        Runnable task1 = ()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (example.lockA)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (example.lockB)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"T1...\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Runnable task2 = ()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (example.lockB)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (example.lockA)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"T2...\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;</span><br><span class=\"line\">            Thread t1 = <span class=\"keyword\">new</span> Thread(task1);</span><br><span class=\"line\">            Thread t2 = <span class=\"keyword\">new</span> Thread(task2);</span><br><span class=\"line\">            t1.start();t2.start();</span><br><span class=\"line\">            t1.join();t2.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为获得锁的过程很快，不一定每次都出现死锁，所以我这里用了个循环一直重复10000次，其实在线程获得锁的过程中加一个<code>Thread.sleep</code>也可以，但是我总觉得<code>try-catch</code>那个中断异常很丑。</p>\n<p>造成死锁的原因主要是获得锁的顺序不一致导致的，如果两个线程都获取锁的顺序都是<code>A-B</code>就不会发生死锁。</p>\n<h3 id=\"动态死锁\">动态死锁<a href=\"post/thread4j-c9-liveness-problem#动态死锁\"></a></h3><p>思考一下下面的代码是否会发生死锁：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transferMoney</span><span class=\"params\">(Account from,Account to,<span class=\"keyword\">int</span> money)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (from)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (to)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (from.balance&gt;=money)&#123;</span><br><span class=\"line\">                from.balance -= money;</span><br><span class=\"line\">                to.balance += money;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看起来是不会，因为获取锁的顺序都是从<code>from</code>到<code>to</code>，但是。。。<code>from</code>和<code>to</code>可以随便传啊，第一次把用户1当作<code>from</code>把用户2当<code>to</code>，第二次把用户2当<code>from</code>用户1当<code>to</code>，这样就可能造成死锁。</p>\n<p>可以调整两个账户获得锁的顺序，从而避免死锁。比如使用hashcode来避免死锁。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object tieLock = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transferMoney</span><span class=\"params\">(Account from,Account to,<span class=\"keyword\">int</span> money)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fromHash = System.identityHashCode(from);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> toHash = System.identityHashCode(to);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fromHash&gt;toHash)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (from)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (to)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (from.balance&gt;=money)&#123;</span><br><span class=\"line\">                    from.balance -= money;</span><br><span class=\"line\">                    to.balance += money;</span><br><span class=\"line\">                    System.out.println(from+<span class=\"string\">\" to \"</span>+to);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fromHash&lt;toHash)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (to)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (from)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (from.balance&gt;=money)&#123;</span><br><span class=\"line\">                    from.balance -= money;</span><br><span class=\"line\">                    to.balance += money;</span><br><span class=\"line\">                    System.out.println(from+<span class=\"string\">\" to \"</span>+to);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (tieLock)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (from)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (to)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (from.balance&gt;=money)&#123;</span><br><span class=\"line\">                        from.balance -= money;</span><br><span class=\"line\">                        to.balance += money;</span><br><span class=\"line\">                        System.out.println(from+<span class=\"string\">\" to \"</span>+to);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>虽然增加了很多额外代码，但是避免了死锁发生的可能性。关于最后一个else块是因为hashcode可能相等，这时<code>from</code>和<code>to</code>其实没办法分辨，先锁哪个都不行，所以外面再加一层锁，这样就可以避免因为hashcode冲突而造成的死锁了。</p>\n<p>如果你的用户类有唯一的ID的话那就更好了。</p>\n<h3 id=\"协作对象之间的死锁\">协作对象之间的死锁<a href=\"post/thread4j-c9-liveness-problem#协作对象之间的死锁\"></a></h3><p>上面的两种发生死锁的原因都很明显，下面我们要看的这个例子就不那么明显了，这个死锁发生在两个协同工作的对象之间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CooperativeObjectDeadLock</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Taxi</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Dispatcher dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\">        Taxi(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, Dispatcher dispatcher) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.dispatcher = dispatcher;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocation</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">            dispatcher.notifyMove(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span>[] getLocation() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x, y&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dispatcher</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Set&lt;Taxi&gt; taxis = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyMove</span><span class=\"params\">(Taxi taxi)</span> </span>&#123;</span><br><span class=\"line\">            taxis.add(taxi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">drawImage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Taxi taxi : taxis) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span>[] loc = taxi.getLocation();</span><br><span class=\"line\">                <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例中的两个类如果协同工作可能产生死锁，因为<code>Taxi</code>的<code>setLocation</code>方法需要获得两个锁，分别是<code>this</code>和<code>dispatcher</code>，而<code>dispatcher</code>的<code>drawImage</code>同样需要获得两个锁，是<code>this</code>和<code>taxi</code>，这就造成了获取锁的顺序不同。</p>\n<p>解决办法就是控制锁的粒度，让它更精细，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocation</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dispatcher.notifyMove(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawImage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Taxi taxi : taxis) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] loc = taxi.getLocation();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是锁的粒度更细了，不在锁中的操作就越多，无法保证同步的操作也就越多。这就需要开发人员在更高的活跃性和更高的安全性之间做权衡。</p>\n<h2 id=\"死锁的避免与诊断\">死锁的避免与诊断<a href=\"post/thread4j-c9-liveness-problem#死锁的避免与诊断\"></a></h2><h3 id=\"定时锁\">定时锁<a href=\"post/thread4j-c9-liveness-problem#定时锁\"></a></h3><p>不使用内置锁，使用Java提供的<code>Lock</code>类中的<code>tryLock</code>，该方法可以提供一个时限，如果指定时限内没有获得锁就放弃并抛出异常。</p>\n<h3 id=\"线程转储\">线程转储<a href=\"post/thread4j-c9-liveness-problem#线程转储\"></a></h3><p>略</p>\n<h2 id=\"饥饿\">饥饿<a href=\"post/thread4j-c9-liveness-problem#饥饿\"></a></h2><p>除了死锁，饥饿也是引发活跃性问题的一个原因。</p>\n<p>饥饿就是线程无法访问它需要访问的资源，比如CPU的时钟周期</p>\n<h2 id=\"耗时操作\">耗时操作<a href=\"post/thread4j-c9-liveness-problem#耗时操作\"></a></h2><p>我们之前有说过在耗时操作里不要获取锁，因为其它的线程必须等待耗时任务结束，在结束之前它们没法获得锁。</p>\n<h2 id=\"活锁\">活锁<a href=\"post/thread4j-c9-liveness-problem#活锁\"></a></h2><p>活锁和死锁不一样，它不能造成程序假死，但是他会消耗无用的资源。</p>\n<p>当一个任务执行出现问题，它可能会被回滚到任务队列尾部等待继续执行，一旦这个任务是个不可能成功的任务，就是每次他都会出现问题，那么他就一直会在任务队列中存在。</p>\n<p>解决办法是添加一个任务失败的重试次数。</p>\n","prev":{"title":"Vue中的组件","slug":"vue-component"},"next":{"title":"（七）任务执行框架 —— 《Java并发编程实战》","slug":"thread4j-c8-task-exec-fw"},"link":"http://lilpig.site/post/thread4j-c9-liveness-problem/","toc":[{"title":"死锁","id":"死锁","index":"1","children":[{"title":"动态死锁","id":"动态死锁","index":"1.1"},{"title":"协作对象之间的死锁","id":"协作对象之间的死锁","index":"1.2"}]},{"title":"死锁的避免与诊断","id":"死锁的避免与诊断","index":"2","children":[{"title":"定时锁","id":"定时锁","index":"2.1"},{"title":"线程转储","id":"线程转储","index":"2.2"}]},{"title":"饥饿","id":"饥饿","index":"3"},{"title":"耗时操作","id":"耗时操作","index":"4"},{"title":"活锁","id":"活锁","index":"5"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/thread4j-c9-liveness-problem/\" title=\"（八）活跃性问题 —— 《Java并发编程实战》\">http://lilpig.site/post/thread4j-c9-liveness-problem/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}