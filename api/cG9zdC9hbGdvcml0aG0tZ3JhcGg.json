{"title":"图简单实现以及深度优先搜索和广度优先搜索","date":"2019-07-07T09:01:19.000Z","slug":"algorithm-graph","tags":["图","数据结构","算法"],"categories":["数据结构","算法"],"updated":"2020-02-14T02:31:46.483Z","content":"<h2 id=\"写在最前\">写在最前<a href=\"post/algorithm-graph#写在最前\"></a></h2><p>博客最近都没怎么更新，天天练车，也没啥时间打理。但是我一直都在学习吼～～</p>\n<h2 id=\"图\">图<a href=\"post/algorithm-graph#图\"></a></h2><p>图是啥？我们不妨想地图。</p>\n<p>地图上都有啥？各种地名，把地名连接起来的线路。</p>\n<p>图也是这样的，它由各种节点和连接节点的边组成。图可以干很多事，比如社交网络的朋友关系、计算机网络、地图等等。</p>\n<p>这篇文章中我们介绍下无向图，即边中没有任何方向信息，只是负责连接节点。</p>\n<h2 id=\"树\">树<a href=\"post/algorithm-graph#树\"></a></h2><p>树就是一个图，满足如下条件的图就是一棵树：</p>\n<ol>\n<li>图的边是节点数-1条且不含有环</li>\n<li>每条边是连通的</li>\n<li>图是连通的(可以由一个节点到所有节点)，但删除任意一条边都会让它不连通</li>\n<li>添加任何一条边都会产生一个环</li>\n<li>任意一对顶点之间只存在一条简单路径</li>\n</ol>\n<h2 id=\"无向图\">无向图<a href=\"post/algorithm-graph#无向图\"></a></h2><p>我们先抽象一个无向图的API：<br>public class|Graph|<span>&lt;/span&gt;<br>-:|:-|:-<br><span></span>|Graph(int V)|创建一个含有V个顶点但不含有边的图<br>int|V()|顶点数<br>int|E()|边数<br>void|addEdge(int v,int w)|添加一条边，连接v-w<br>Iterable\\<integer>|adj(int v)|和v相邻的所有顶点<br>String|toString()|对象的字符串表示<br>int|<em>degree(Graph G,int v)</em>|计算v的度数<br>int|<em>maxDegree(Graph G)</em>|计算图中顶点的最大度数<br>double|<em>avgDegree(Graph G)</em>|计算图中顶点的平均度数<br>int|<em>numberOfSelfLoops(Graph G)</em>|计算自环个数</integer></span></p>\n<p>下面有几个静态方法，我们会在以后的所有图API中用到。</p>\n<h2 id=\"邻接表数组表示图\">邻接表数组表示图<a href=\"post/algorithm-graph#邻接表数组表示图\"></a></h2><p>我们提供一个数组，数组中每一个项目是一个链表，代表与当前下标（每个下标就代表相应的元素）相邻的节点。</p>\n<p>每当调用<code>addEdge</code>去添加一条边的时候，我们需要把<code>v</code>放到<code>w</code>的邻接列表里，把<code>w</code>放到<code>v</code>的邻接列表里。</p>\n<p>我们得出了这样一个图模型(我把V和E方法省略了，直接公开属性)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: description...</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: LILPIG</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 19-7-7</span></span><br><span class=\"line\"><span class=\"comment\"> * God bless my code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> graph;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> E;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> V;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LinkedList&lt;Integer&gt; adj[];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> V)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.V = V;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adj = (LinkedList&lt;Integer&gt;[]) <span class=\"keyword\">new</span> LinkedList[V];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;adj.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.adj[i] = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        adj[v].add(w);</span><br><span class=\"line\">        adj[w].add(v);</span><br><span class=\"line\">        E++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 和某个节点相邻的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">adj</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adj[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算图的度数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> G</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">degree</span><span class=\"params\">(Graph G,<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> degree = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w:G.adj(v))degree++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> degree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取最大的度数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> G</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDegree</span><span class=\"params\">(Graph G)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;G.V;i++)&#123;</span><br><span class=\"line\">            max = Math.max(max,degree(G,i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取平均度数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> G</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">avgDegreeSlow</span><span class=\"params\">(Graph G)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> sDeg = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;G.V;i++)</span><br><span class=\"line\">            sDeg += degree(G,i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sDeg / G.V;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取平均度数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> G</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">avgDegree</span><span class=\"params\">(Graph G)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2.0</span> * G.E / G.V;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取自环个数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> G</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">numberOfSelfLoops</span><span class=\"params\">(Graph G)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;G.V;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num:G.adj(i))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num == i) c++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder s = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        s.append(V + <span class=\"string\">\" vertices, \"</span> + E + <span class=\"string\">\" edges \"</span> + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; V; v++) &#123;</span><br><span class=\"line\">            s.append(v + <span class=\"string\">\": \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w : adj[v]) &#123;</span><br><span class=\"line\">                s.append(w + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"搜索算法\">搜索算法<a href=\"post/algorithm-graph#搜索算法\"></a></h2><p>我们需要一个搜索算法搜索两个节点是否连通，和某个节点连通的节点总数，两个节点之间的一条路径。</p>\n<p>所以我们抽象如下API：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">public interface</th>\n<th style=\"text-align:left\">Search</th>\n<th style=\"text-align:left\"><span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">int</td>\n<td style=\"text-align:left\">count</td>\n<td style=\"text-align:left\">与某个节点连通的节点数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">boolean</td>\n<td style=\"text-align:left\">hasPathTo(int v)</td>\n<td style=\"text-align:left\">是否能连通到这个节点</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">Iterable\\<integer></integer></td>\n<td style=\"text-align:left\">pathTo(int v)</td>\n<td style=\"text-align:left\">到v的路径</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"深度优先搜索\">深度优先搜索<a href=\"post/algorithm-graph#深度优先搜索\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: description...</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: LILPIG</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 19-7-7</span></span><br><span class=\"line\"><span class=\"comment\"> * God bless my code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> graph;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度优先搜索</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthFirstSearch</span> <span class=\"keyword\">implements</span> <span class=\"title\">Search</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> marked[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> edgeTo[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DepthFirstSearch</span><span class=\"params\">(Graph G, <span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">        marked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[G.V];</span><br><span class=\"line\">        edgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[G.V];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">        dfs(G,s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Graph G,<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        marked[v] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i:G.adj(v))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!marked[i]) &#123;edgeTo[i]=v;dfs(G,i);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> marked[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasPathTo(v))<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=v;x!=s;x=edgeTo[x])</span><br><span class=\"line\">            stack.push(x);</span><br><span class=\"line\">        stack.push(s);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"广度优先搜索\">广度优先搜索<a href=\"post/algorithm-graph#广度优先搜索\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: description...</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: LILPIG</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 19-7-7</span></span><br><span class=\"line\"><span class=\"comment\"> * God bless my code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> graph;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreadthFirstSearch</span> <span class=\"keyword\">implements</span> <span class=\"title\">Search</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] marked;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] edgeTo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BreadthFirstSearch</span><span class=\"params\">(Graph G,<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">        marked = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[G.V];</span><br><span class=\"line\">        edgeTo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[G.V];</span><br><span class=\"line\">        bfs(G,s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(Graph G,<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue=<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class=\"line\">        marked[s] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        queue.add(s);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x:G.adj(c))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!marked[x])&#123;edgeTo[x]=c;bfs(G,x);queue.add(x);&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> marked[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"title\">pathTo</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasPathTo(v))<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=v;x!=s;x=edgeTo[x])</span><br><span class=\"line\">            stack.push(x);</span><br><span class=\"line\">        stack.push(s);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内容来自《算法 第四版》</p>\n","prev":{"title":"NodeJS中的网络操作","slug":"nodejs-nodetcp"},"next":{"title":"事件发射器-NodeJS","slug":"nodejs-eventemitter"},"link":"http://lilpig.site/post/algorithm-graph/","toc":[{"title":"写在最前","id":"写在最前","index":"1"},{"title":"图","id":"图","index":"2"},{"title":"树","id":"树","index":"3"},{"title":"无向图","id":"无向图","index":"4"},{"title":"邻接表数组表示图","id":"邻接表数组表示图","index":"5"},{"title":"搜索算法","id":"搜索算法","index":"6"},{"title":"深度优先搜索","id":"深度优先搜索","index":"7"},{"title":"广度优先搜索","id":"广度优先搜索","index":"8"}],"reward":true,"copyright":{"author":"LIL PIG","link":"<a href=\"http://lilpig.site/post/algorithm-graph/\" title=\"图简单实现以及深度优先搜索和广度优先搜索\">http://lilpig.site/post/algorithm-graph/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}